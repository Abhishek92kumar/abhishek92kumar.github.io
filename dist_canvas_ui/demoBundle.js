(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _ActivityIndicatorView = require('canvas_ui/ActivityIndicatorView');

var _ActivityIndicatorView2 = _interopRequireDefault(_ActivityIndicatorView);

var _Frame = require('canvas_ui/Frame');

var _Frame2 = _interopRequireDefault(_Frame);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ActivityIndicatorDemoView = function (_DemoView) {
    _inherits(ActivityIndicatorDemoView, _DemoView);

    function ActivityIndicatorDemoView() {
        _classCallCheck(this, ActivityIndicatorDemoView);

        var _this = _possibleConstructorReturn(this, (ActivityIndicatorDemoView.__proto__ || Object.getPrototypeOf(ActivityIndicatorDemoView)).call(this, 'Activity Indicators'));

        _this.lightActivityIndicator = new _ActivityIndicatorView2.default();
        _this.lightActivityIndicator.backgroundColor = '#fff';
        _this.lightActivityIndicator.lineColor = '#000';
        _this.lightActivityIndicator.lineWidth = 2;
        _this.addSubview(_this.lightActivityIndicator);

        _this.darkActivityIndicator = new _ActivityIndicatorView2.default();
        _this.darkActivityIndicator.backgroundColor = '#000';
        _this.darkActivityIndicator.lineColor = '#fff';
        _this.darkActivityIndicator.lineWidth = 2;
        _this.addSubview(_this.darkActivityIndicator);
        return _this;
    }

    _createClass(ActivityIndicatorDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            var ActivityIndicatorSize = 40;

            this.lightActivityIndicator.frame = _Frame2.default.makeFrame(0, 0, ActivityIndicatorSize, ActivityIndicatorSize);
            this.lightActivityIndicator.moveToCenterMiddle();

            this.darkActivityIndicator.makeSameSize(this.lightActivityIndicator).moveBelow(this.lightActivityIndicator, 10).alignLeft(this.lightActivityIndicator).insets.setAll(Math.round(this.darkActivityIndicator.contentWidth * 0.2));
        }
    }, {
        key: 'wasAddedToView',
        value: function wasAddedToView() {
            _get(ActivityIndicatorDemoView.prototype.__proto__ || Object.getPrototypeOf(ActivityIndicatorDemoView.prototype), 'wasAddedToView', this).call(this);

            this.lightActivityIndicator.animating = true;
            this.darkActivityIndicator.animating = true;
        }
    }]);

    return ActivityIndicatorDemoView;
}(_DemoView3.default);

exports.default = ActivityIndicatorDemoView;

},{"./DemoView":14,"canvas_ui/ActivityIndicatorView":54,"canvas_ui/Frame":67}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _lorem = require('./lorem');

var _lorem2 = _interopRequireDefault(_lorem);

var _Button = require('canvas_ui/Button');

var _Button2 = _interopRequireDefault(_Button);

var _AlertView = require('canvas_ui/AlertView');

var _AlertView2 = _interopRequireDefault(_AlertView);

var _ConfirmView = require('canvas_ui/ConfirmView');

var _ConfirmView2 = _interopRequireDefault(_ConfirmView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AlertDemoView = function (_DemoView) {
    _inherits(AlertDemoView, _DemoView);

    function AlertDemoView() {
        _classCallCheck(this, AlertDemoView);

        // Alert

        var _this = _possibleConstructorReturn(this, (AlertDemoView.__proto__ || Object.getPrototypeOf(AlertDemoView)).call(this, 'Alert'));

        _this.alertButton = new _Button2.default('Alert');
        _this.alertButton.on('tap', function () {
            this.rootView.addSubview(new _AlertView2.default('Alert', 'Hello, World!'));
        });
        _this.addSubview(_this.alertButton);

        _this.longTextAlertButton = new _Button2.default('Alert with Long Text');
        _this.longTextAlertButton.on('tap', function () {
            this.rootView.addSubview(new _AlertView2.default('Alert', _lorem2.default));
        });
        _this.addSubview(_this.longTextAlertButton);

        // Confirm

        _this.confirmButton = new _Button2.default('Confirm');
        _this.confirmButton.on('tap', function () {
            var _this2 = this;

            var confirmView = new _ConfirmView2.default('Confirm', 'You sure you want to do that?');

            confirmView.on('canceled', function () {
                confirmView.removeFromSuperview();
            });

            confirmView.on('confirmed', function () {
                // Leave input blocker as we're going to show an alert immediately hereafter.
                confirmView.removeFromSuperview(false);

                // Wait for the confirm modal to animate off.
                confirmView.on('removedFromSuperview', function () {
                    _this2.rootView.addSubview(new _AlertView2.default('Alert', 'OK, let\'s do it!'));
                });
            });

            this.rootView.addSubview(confirmView);
        });

        _this.addSubview(_this.confirmButton);
        return _this;
    }

    _createClass(AlertDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.longTextAlertButton.sizeToFit();

            this.alertButton.makeSameSize(this.longTextAlertButton).moveToCenterMiddle();

            this.confirmButton.makeSameSize(this.longTextAlertButton).moveBelow(this.alertButton, 20).alignLeft(this.alertButton);

            this.longTextAlertButton.moveBelow(this.confirmButton, 20).alignLeft(this.alertButton);
        }
    }]);

    return AlertDemoView;
}(_DemoView3.default);

exports.default = AlertDemoView;

},{"./DemoView":14,"./lorem":52,"canvas_ui/AlertView":55,"canvas_ui/Button":62,"canvas_ui/ConfirmView":65}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _View = require('canvas_ui/View');

var _View2 = _interopRequireDefault(_View);

var _Point = require('canvas_ui/Point');

var _Point2 = _interopRequireDefault(_Point);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AlphaDemoView = function (_DemoView) {
    _inherits(AlphaDemoView, _DemoView);

    function AlphaDemoView() {
        _classCallCheck(this, AlphaDemoView);

        var _this = _possibleConstructorReturn(this, (AlphaDemoView.__proto__ || Object.getPrototypeOf(AlphaDemoView)).call(this, 'Views can be partially transparent'));

        _this.redView = new _View2.default();
        _this.redView.backgroundColor = 'red';
        _this.redView.alpha = 0.5;
        _this.addSubview(_this.redView);

        _this.blueView = new _View2.default();
        _this.blueView.backgroundColor = 'blue';
        _this.blueView.alpha = 0.5;
        _this.addSubview(_this.blueView);
        return _this;
    }

    _createClass(AlphaDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.redView.size.set(100, 100);
            this.redView.moveToCenterMiddle(new _Point2.default(-25, -25));

            this.blueView.size.set(100, 100);
            this.blueView.moveToCenterMiddle(new _Point2.default(25, 25));
        }
    }]);

    return AlphaDemoView;
}(_DemoView3.default);

exports.default = AlphaDemoView;

},{"./DemoView":14,"canvas_ui/Point":85,"canvas_ui/View":101}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _View = require('canvas_ui/View');

var _View2 = _interopRequireDefault(_View);

var _Button = require('canvas_ui/Button');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AngleDemoView = function (_DemoView) {
    _inherits(AngleDemoView, _DemoView);

    function AngleDemoView() {
        _classCallCheck(this, AngleDemoView);

        var _this = _possibleConstructorReturn(this, (AngleDemoView.__proto__ || Object.getPrototypeOf(AngleDemoView)).call(this, 'Views can rotate about their center'));

        _this.orangeView = new _View2.default();
        _this.orangeView.backgroundColor = 'orange';
        _this.addSubview(_this.orangeView);

        _this.button = new _Button2.default('Rotate a bit');
        _this.button.on('tap', function () {
            _this.orangeView.angle = Math.PI / 8;
        });
        _this.button.insets.setAll(10);
        _this.addSubview(_this.button);
        return _this;
    }

    _createClass(AngleDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.orangeView.size.set(100, 100);
            this.orangeView.moveToCenterMiddle();

            this.button.sizeToFit().moveToCenterMiddle().moveAbove(this.orangeView, -20);
        }
    }]);

    return AngleDemoView;
}(_DemoView3.default);

exports.default = AngleDemoView;

},{"./DemoView":14,"canvas_ui/Button":62,"canvas_ui/View":101}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _Animation = require('canvas_ui/Animation');

var _Animation2 = _interopRequireDefault(_Animation);

var _AnimationSequence = require('canvas_ui/AnimationSequence');

var _AnimationSequence2 = _interopRequireDefault(_AnimationSequence);

var _AnimationParallel = require('canvas_ui/AnimationParallel');

var _AnimationParallel2 = _interopRequireDefault(_AnimationParallel);

var _View = require('canvas_ui/View');

var _View2 = _interopRequireDefault(_View);

var _Button = require('canvas_ui/Button');

var _Button2 = _interopRequireDefault(_Button);

var _Label = require('canvas_ui/Label');

var _Label2 = _interopRequireDefault(_Label);

var _ProgressBar = require('canvas_ui/ProgressBar');

var _ProgressBar2 = _interopRequireDefault(_ProgressBar);

var _BasicAnimations = require('canvas_ui/BasicAnimations');

var _BasicLayouts = require('canvas_ui/BasicLayouts');

var _fonts = require('canvas_ui/fonts');

var _Point = require('canvas_ui/Point');

var _Point2 = _interopRequireDefault(_Point);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AnimationDemoView = function (_DemoView) {
    _inherits(AnimationDemoView, _DemoView);

    function AnimationDemoView() {
        _classCallCheck(this, AnimationDemoView);

        var _this = _possibleConstructorReturn(this, (AnimationDemoView.__proto__ || Object.getPrototypeOf(AnimationDemoView)).call(this, 'Properties can be animated'));

        _this.insets.setAll(10);

        _this.addTargetView();

        _this.buttons = _lodash2.default.map([{ text: 'Fall', onTap: _this.fallDownAndBounce.bind(_this) }, { text: 'Fade Out', onTap: _this.fadeOut.bind(_this) }, { text: 'Fade In', onTap: _this.fadeIn.bind(_this) }, { text: 'Blink', onTap: _this.blink.bind(_this) }, { text: 'Pop In', onTap: _this.popIn.bind(_this) }, { text: 'Spin', onTap: _this.spin.bind(_this) }, { text: 'Borders', onTap: _this.borderGrowShrink.bind(_this) }, { text: 'Parallel: Fade In + Spin', onTap: _this.fadeInAndSpinSimultaneously.bind(_this) }, { text: 'Sequence', onTap: _this.runSequenceA.bind(_this) }], function (def) {
            var b = new _Button2.default(def.text);
            b.on('tap', def.onTap);
            _this.addSubview(b);
            return b;
        });

        _this.progressBar = new _ProgressBar2.default();
        _this.addSubview(_this.progressBar);

        _this.eventLabel = new _Label2.default();
        _this.eventLabel.backgroundColor = null;
        _this.eventLabel.textColor = '#aaa';
        _this.eventLabel.font = (0, _fonts.SystemFontOfSize)(12);
        _this.addSubview(_this.eventLabel);

        _this.targetView.on('animationAdded', function (anim) {
            _this.eventLabel.text = 'Animation "' + anim.name + '" added';
        });
        _this.targetView.on('animationStarted', function (anim) {
            _this.eventLabel.text = 'Animation "' + anim.name + '" started';
        });
        _this.targetView.on('animationCompleted', function (anim) {
            _this.eventLabel.text = 'Animation "' + anim.name + '" completed';
        });
        return _this;
    }

    _createClass(AnimationDemoView, [{
        key: 'addTargetView',
        value: function addTargetView() {
            this.targetView = new _View2.default();
            this.targetView.backgroundColor = 'red';
            this.addSubview(this.targetView);
        }
    }, {
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.targetView.size.set(100, 100);
            this.targetView.moveToCenterMiddle();

            (0, _BasicLayouts.layoutNaturalFlow)(this, this.buttons);

            this.progressBar.size.set(this.width, 2);
            this.progressBar.moveToLeftTop(); //.moveInTopLeftCorner();

            this.eventLabel.width = this.width - 20;
            this.eventLabel.height = 20;
            this.eventLabel.moveToLeftBottom(); //moveInBottomLeftCorner(new Point(10, -10));
        }
    }, {
        key: 'fadeOut',
        value: function fadeOut() {
            this.runAnimation(new _BasicAnimations.FadeOut());
        }
    }, {
        key: 'fadeIn',
        value: function fadeIn() {
            this.runAnimation(new _BasicAnimations.FadeIn({ duration: 1000 }));
        }
    }, {
        key: 'fallDownAndBounce',
        value: function fallDownAndBounce() {
            this.runAnimation(new _Animation2.default({
                name: 'fallDownAndBounce',
                target: this.targetView,
                endValues: { bottom: this.height - 100 },
                easing: _Animation2.default.easing.bounceEnd,
                duration: 1000
            }));
        }
    }, {
        key: 'blink',
        value: function blink() {
            this.runAnimation(new _BasicAnimations.Blink());
        }
    }, {
        key: 'popIn',
        value: function popIn() {
            this.runAnimation(new _BasicAnimations.PopIn());
        }
    }, {
        key: 'spin',
        value: function spin() {
            this.runAnimation(new _BasicAnimations.Spin({
                duration: 2000,
                easing: _Animation2.default.easing.cubic
            }));
        }
    }, {
        key: 'fadeInAndSpinSimultaneously',
        value: function fadeInAndSpinSimultaneously() {
            this.spin();
            this.addAnimation(new _BasicAnimations.FadeIn(this, { duration: 2000 }));
        }
    }, {
        key: 'borderGrowShrink',
        value: function borderGrowShrink() {
            this.runAnimation(new _Animation2.default({
                name: 'borderGrowShrink',
                target: this.targetView,
                startValues: { borderWidth: 0, borderColor: 'orange' },
                endValues: { borderWidth: 8 },
                autoReverse: true,
                playCount: 3, // leave it non-zero to show reset functionality
                duration: 500
            }));
        }
    }, {
        key: 'runSequenceA',
        value: function runSequenceA() {
            var _this2 = this;

            var anim = function anim(opts) {
                return new _Animation2.default(_lodash2.default.merge({
                    target: _this2.targetView,
                    easing: _Animation2.default.easing.cubic
                }, opts));
            };

            this.runAnimation(new _AnimationSequence2.default('sample sequence', [anim({ endValues: { left: 0, top: 0 } }), anim({ endValues: { right: this.width, bottom: this.height } }), anim({ endValues: { right: this.width, top: 0 } }), anim({ endValues: { left: 0, bottom: this.height } }), new _AnimationParallel2.default('backToCenter', [anim({
                endValues: {
                    centerX: this.contentCenterX,
                    centerY: this.contentCenterY
                },
                duration: 1200
            }), new _BasicAnimations.Spin({ startDelay: 600, duration: 600 })]), new _BasicAnimations.Scale({ scale: 0.8, duration: 200 }),

            // like PopIn but from current scale not 0
            new _BasicAnimations.Scale({
                scale: 1.0,
                easing: _Animation2.default.easing.backEnd
            })]));
        }
    }, {
        key: 'runAnimation',
        value: function runAnimation(anim) {
            var _this3 = this;

            this.hideButtons(true);

            var self = this;
            clearTimeout(this.resetTimeout);

            this.targetView.addAnimation(anim).on('update', function () {
                self.progressBar.progress = this.elapsedTimeUnit;
                self.progressBar.barColor = this.animTime === -1 ? 'orange' : 'green';
            }).once('complete', function () {
                _this3.progressBar.progress = 0;
                setTimeout(function () {
                    _this3.targetView.addAnimation(new _BasicAnimations.ResetAnimation()).once('complete', function () {
                        _this3.hideButtons(false);
                        setTimeout(function () {
                            _this3.eventLabel.text = '';
                        }, 500);
                    });
                }, 500);
            });

            return anim;
        }
    }, {
        key: 'hideButtons',
        value: function hideButtons(yesNo) {
            _lodash2.default.each(this.buttons, function (b) {
                b.hidden = yesNo;
            });
        }
    }]);

    return AnimationDemoView;
}(_DemoView3.default);

exports.default = AnimationDemoView;

},{"./DemoView":14,"canvas_ui/Animation":57,"canvas_ui/AnimationParallel":58,"canvas_ui/AnimationSequence":59,"canvas_ui/BasicAnimations":60,"canvas_ui/BasicLayouts":61,"canvas_ui/Button":62,"canvas_ui/Label":75,"canvas_ui/Point":85,"canvas_ui/ProgressBar":86,"canvas_ui/View":101,"canvas_ui/fonts":103,"lodash":53}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _View = require('canvas_ui/View');

var _View2 = _interopRequireDefault(_View);

var _Label = require('canvas_ui/Label');

var _Label2 = _interopRequireDefault(_Label);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BasicViewDemoView = function (_DemoView) {
    _inherits(BasicViewDemoView, _DemoView);

    function BasicViewDemoView(title) {
        _classCallCheck(this, BasicViewDemoView);

        var _this = _possibleConstructorReturn(this, (BasicViewDemoView.__proto__ || Object.getPrototypeOf(BasicViewDemoView)).call(this, title || 'Views present data visually'));

        _this.aView = new _View2.default();
        _this.aView.id = 'Basic View';
        _this.aView.backgroundColor = '#ddd';
        _this.addSubview(_this.aView);

        _this.infoLabel = new _Label2.default('The default shape is a rectangle.');
        _this.infoLabel.id = 'Info Label';
        _this.infoLabel.textAlign = 'center';
        _this.addSubview(_this.infoLabel);
        return _this;
    }

    _createClass(BasicViewDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.aView.size.set(200, 100);
            this.aView.moveToCenterMiddle();

            this.infoLabel.sizeToFit().alignHorizontalCenter(this.aView).moveBelow(this.aView, 40);
        }
    }]);

    return BasicViewDemoView;
}(_DemoView3.default);

exports.default = BasicViewDemoView;

},{"./DemoView":14,"canvas_ui/Label":75,"canvas_ui/View":101}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _BasicViewDemoView2 = require('./BasicViewDemoView');

var _BasicViewDemoView3 = _interopRequireDefault(_BasicViewDemoView2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BorderDemoView = function (_BasicViewDemoView) {
    _inherits(BorderDemoView, _BasicViewDemoView);

    function BorderDemoView() {
        _classCallCheck(this, BorderDemoView);

        return _possibleConstructorReturn(this, (BorderDemoView.__proto__ || Object.getPrototypeOf(BorderDemoView)).call(this, 'Borders'));
    }

    _createClass(BorderDemoView, [{
        key: 'didBecomeVisible',
        value: function didBecomeVisible() {
            var _this2 = this;

            _get(BorderDemoView.prototype.__proto__ || Object.getPrototypeOf(BorderDemoView.prototype), 'didBecomeVisible', this).call(this);

            this.aView.borderWidth = 1;
            this.aView.borderColor = '#333';

            this.infoLabel.text = 'A view may have a border...';
            this.infoLabel.sizeToFit();

            this.timeout = setTimeout(function () {
                _this2.infoLabel.text = 'with width and color.';
                _this2.infoLabel.sizeToFit();

                _this2.aView.borderWidth = 3;
                _this2.aView.borderColor = 'red';
            }, 1200);
        }
    }, {
        key: 'didBecomeHidden',
        value: function didBecomeHidden() {
            _get(BorderDemoView.prototype.__proto__ || Object.getPrototypeOf(BorderDemoView.prototype), 'didBecomeHidden', this).call(this);
            clearTimeout(this.timeout);
        }
    }, {
        key: 'willBeRemovedFromView',
        value: function willBeRemovedFromView() {
            _get(BorderDemoView.prototype.__proto__ || Object.getPrototypeOf(BorderDemoView.prototype), 'willBeRemovedFromView', this).call(this);
            clearTimeout(this.timeout);
        }
    }]);

    return BorderDemoView;
}(_BasicViewDemoView3.default);

exports.default = BorderDemoView;

},{"./BasicViewDemoView":6}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _Button = require('canvas_ui/Button');

var _Button2 = _interopRequireDefault(_Button);

var _fonts = require('canvas_ui/fonts');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ButtonDemoView = function (_DemoView) {
    _inherits(ButtonDemoView, _DemoView);

    function ButtonDemoView() {
        _classCallCheck(this, ButtonDemoView);

        var _this = _possibleConstructorReturn(this, (ButtonDemoView.__proto__ || Object.getPrototypeOf(ButtonDemoView)).call(this, 'A Button'));

        var prevText = 'Press Me';
        _this.button = new _Button2.default(prevText);
        _this.button.insets.setAll(10);
        _this.addSubview(_this.button);
        _this.button.on('tap', function () {
            var _this2 = this;

            this.text = 'Thanks!';
            this.sizeToFit();

            var prevFont = this.font;
            this.font = (0, _fonts.BoldSystemFontOfSize)(14);

            setTimeout(function () {
                _this2.font = prevFont;
                _this2.text = prevText;
                _this2.sizeToFit();
            }, 1500);
        });
        return _this;
    }

    _createClass(ButtonDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.button.sizeToFit().moveToCenterMiddle();
        }
    }]);

    return ButtonDemoView;
}(_DemoView3.default);

exports.default = ButtonDemoView;

},{"./DemoView":14,"canvas_ui/Button":62,"canvas_ui/fonts":103}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CandyButton = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _Button2 = require('canvas_ui/Button');

var _Button3 = _interopRequireDefault(_Button2);

var _core = require('canvas_ui/core');

var _fonts = require('canvas_ui/fonts');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CandyButtonHeight = 100;

var CandyButton = exports.CandyButton = function (_Button) {
    _inherits(CandyButton, _Button);

    function CandyButton(text, color1, color2) {
        var textColor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '#fff';

        _classCallCheck(this, CandyButton);

        var _this = _possibleConstructorReturn(this, (CandyButton.__proto__ || Object.getPrototypeOf(CandyButton)).call(this, text));

        var context = (0, _core.getContext)();

        var grad = context.createLinearGradient(0, 0, 0, CandyButtonHeight);
        grad.addColorStop(0, color1);
        grad.addColorStop(1, color2);
        _this.backgroundColor = grad;

        _this.font = (0, _fonts.BoldSystemFontOfSize)(20);
        _this.textColor = textColor;

        _this.borderWidth = 4;
        _this.borderColor = textColor;

        _this.cornerRadius = 20;
        return _this;
    }

    return CandyButton;
}(_Button3.default);

var CandyButtonDemoView = function (_DemoView) {
    _inherits(CandyButtonDemoView, _DemoView);

    function CandyButtonDemoView() {
        _classCallCheck(this, CandyButtonDemoView);

        var _this2 = _possibleConstructorReturn(this, (CandyButtonDemoView.__proto__ || Object.getPrototypeOf(CandyButtonDemoView)).call(this, 'Candy Buttons'));

        _this2.playNowButton = new CandyButton('Do it', '#d3ff6d', '#1b9100', '#084f00');
        _this2.addSubview(_this2.playNowButton);

        _this2.challengesButton = new CandyButton('Do it more', '#fec529', '#cd572a', '#46120a');
        _this2.addSubview(_this2.challengesButton);
        return _this2;
    }

    _createClass(CandyButtonDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            var _this3 = this;

            _lodash2.default.each(this.subviews, function (subview) {
                subview.size.set(Math.max(100, _this3.superview.width / 2), CandyButtonHeight);
            });

            this.playNowButton.moveToCenterMiddle();
            this.playNowButton.top = CandyButtonHeight * 2;

            this.challengesButton.moveBelow(this.playNowButton, CandyButtonHeight / 2).alignHorizontalCenter(this.playNowButton);
        }
    }]);

    return CandyButtonDemoView;
}(_DemoView3.default);

exports.default = CandyButtonDemoView;

},{"./DemoView":14,"canvas_ui/Button":62,"canvas_ui/core":102,"canvas_ui/fonts":103,"lodash":53}],10:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _ColorPickerView = require('canvas_ui/ColorPickerView');

var _ColorPickerView2 = _interopRequireDefault(_ColorPickerView);

var _View = require('canvas_ui/View');

var _View2 = _interopRequireDefault(_View);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ColorPickerDemoView = function (_DemoView) {
    _inherits(ColorPickerDemoView, _DemoView);

    function ColorPickerDemoView() {
        _classCallCheck(this, ColorPickerDemoView);

        var _this = _possibleConstructorReturn(this, (ColorPickerDemoView.__proto__ || Object.getPrototypeOf(ColorPickerDemoView)).call(this, 'Color Picker'));

        _this.coloredView = new _View2.default();
        _this.addSubview(_this.coloredView);

        _this.colorPicker = new _ColorPickerView2.default();
        _this.addSubview(_this.colorPicker);
        _this.colorPicker.on('colorPicked', function (color) {
            _this.coloredView.backgroundColor = color;
        });
        return _this;
    }

    _createClass(ColorPickerDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            _get(ColorPickerDemoView.prototype.__proto__ || Object.getPrototypeOf(ColorPickerDemoView.prototype), 'layoutSubviews', this).call(this);

            this.colorPicker.size.set(this.halfWidth, this.halfWidth);
            this.colorPicker.moveToCenterMiddle();

            this.coloredView.size.set(50, 50);
            this.coloredView.alignHorizontalCenter(this.colorPicker).moveAbove(this.colorPicker, -20);
        }
    }]);

    return ColorPickerDemoView;
}(_DemoView3.default);

exports.default = ColorPickerDemoView;

},{"./DemoView":14,"canvas_ui/ColorPickerView":63,"canvas_ui/View":101}],11:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _BasicViewDemoView2 = require('./BasicViewDemoView');

var _BasicViewDemoView3 = _interopRequireDefault(_BasicViewDemoView2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CornerRadiusDemoView = function (_BasicViewDemoView) {
    _inherits(CornerRadiusDemoView, _BasicViewDemoView);

    function CornerRadiusDemoView() {
        _classCallCheck(this, CornerRadiusDemoView);

        var _this = _possibleConstructorReturn(this, (CornerRadiusDemoView.__proto__ || Object.getPrototypeOf(CornerRadiusDemoView)).call(this, 'Corner Radius'));

        _this.aView.cornerRadius = 10;
        _this.aView.borderWidth = 2;

        _this.infoLabel.text = 'A view may have rounded corners';
        _this.infoLabel.sizeToFit();
        return _this;
    }

    _createClass(CornerRadiusDemoView, [{
        key: 'didBecomeVisible',
        value: function didBecomeVisible() {
            var _this2 = this;

            _get(CornerRadiusDemoView.prototype.__proto__ || Object.getPrototypeOf(CornerRadiusDemoView.prototype), 'didBecomeVisible', this).call(this);

            this.timeout = setTimeout(function () {
                _this2.aView.cornerRadius = [0, 20, 0, 20]; // TL, TR, BR, BL;
            }, 2000);
        }
    }, {
        key: 'didBecomeHidden',
        value: function didBecomeHidden() {
            _get(CornerRadiusDemoView.prototype.__proto__ || Object.getPrototypeOf(CornerRadiusDemoView.prototype), 'didBecomeHidden', this).call(this);
            clearTimeout(this.timeout);
        }
    }, {
        key: 'willBeRemovedFromView',
        value: function willBeRemovedFromView() {
            _get(CornerRadiusDemoView.prototype.__proto__ || Object.getPrototypeOf(CornerRadiusDemoView.prototype), 'willBeRemovedFromView', this).call(this);
            clearTimeout(this.timeout);
        }
    }]);

    return CornerRadiusDemoView;
}(_BasicViewDemoView3.default);

exports.default = CornerRadiusDemoView;

},{"./BasicViewDemoView":6}],12:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _CompositeImageView = require('canvas_ui/CompositeImageView');

var _CompositeImageView2 = _interopRequireDefault(_CompositeImageView);

var _Label = require('canvas_ui/Label');

var _Label2 = _interopRequireDefault(_Label);

var _BasicAnimations = require('canvas_ui/BasicAnimations');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * All flag images are stored in a single composite image.
 */

var CountryFlagsDemoView = function (_DemoView) {
    _inherits(CountryFlagsDemoView, _DemoView);

    function CountryFlagsDemoView() {
        _classCallCheck(this, CountryFlagsDemoView);

        // Our flag composite image asset is 15x15 sub-images but the last
        // 3 sub-images are empty space.

        var _this = _possibleConstructorReturn(this, (CountryFlagsDemoView.__proto__ || Object.getPrototypeOf(CountryFlagsDemoView)).call(this, 'Country Flags'));

        _this.imageView = new _CompositeImageView2.default('assets/flags.png', 15, 15, 15 * 15 - 3);
        _this.imageView.borderWidth = 1;
        _this.imageView.size.set(30, 22);
        _this.imageView.index = 1; // ZW is first due to asset issue, skip it
        _this.addSubview(_this.imageView);

        _this.countryNames = ['ZW', 'AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AR', 'AS', 'AT', 'AU', 'AW', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BM', 'BN', 'BO', 'BR', 'BS', 'BT', 'BW', 'BY', 'BZ', 'CA', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GT', 'GU', 'GW', 'GY', 'HK', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SI', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'ST', 'SV', 'SY', 'SZ', 'TC', 'TD', 'TG', 'TH', 'TJ', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WS', 'YE', 'ZA', 'ZM'];

        _this.countryNameLabel = new _Label2.default(_this.countryNames[1]);
        _this.countryNameLabel.textAlign = 'center';
        _this.countryNameLabel.textColor = '#aaa';
        _this.addSubview(_this.countryNameLabel);
        return _this;
    }

    _createClass(CountryFlagsDemoView, [{
        key: 'wasAddedToView',
        value: function wasAddedToView() {
            var _this2 = this;

            _get(CountryFlagsDemoView.prototype.__proto__ || Object.getPrototypeOf(CountryFlagsDemoView.prototype), 'wasAddedToView', this).call(this);

            // Flip through the flags over time.

            clearInterval(this.interval);
            this.interval = setInterval(function () {
                _this2.imageView.makeNextCurrent();
                _this2.countryNameLabel.text = _this2.countryNames[_this2.imageView.index];

                if (_this2.imageView.index === 1) {
                    _this2.addAnimation(new _BasicAnimations.PopIn(_this2));
                }
            }, 500);
        }
    }, {
        key: 'willBeRemovedFromView',
        value: function willBeRemovedFromView() {
            _get(CountryFlagsDemoView.prototype.__proto__ || Object.getPrototypeOf(CountryFlagsDemoView.prototype), 'willBeRemovedFromView', this).call(this);
            clearInterval(this.interval);
        }
    }, {
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            _get(CountryFlagsDemoView.prototype.__proto__ || Object.getPrototypeOf(CountryFlagsDemoView.prototype), 'layoutSubviews', this).call(this);

            this.imageView.moveToCenterMiddle();

            this.countryNameLabel.width = this.contentWidth;
            this.countryNameLabel.height = 40;
            this.countryNameLabel.moveBelow(this.imageView, 10);
        }
    }]);

    return CountryFlagsDemoView;
}(_DemoView3.default);

exports.default = CountryFlagsDemoView;

},{"./DemoView":14,"canvas_ui/BasicAnimations":60,"canvas_ui/CompositeImageView":64,"canvas_ui/Label":75}],13:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _View2 = require('canvas_ui/View');

var _View3 = _interopRequireDefault(_View2);

var _Label = require('canvas_ui/Label');

var _Label2 = _interopRequireDefault(_Label);

var _fonts = require('canvas_ui/fonts');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DemoPageView = function (_View) {
    _inherits(DemoPageView, _View);

    function DemoPageView(text, backgroundColor) {
        _classCallCheck(this, DemoPageView);

        var _this = _possibleConstructorReturn(this, (DemoPageView.__proto__ || Object.getPrototypeOf(DemoPageView)).call(this));

        _this.label = new _Label2.default(text);
        _this.label.backgroundColor = backgroundColor;
        _this.label.font = (0, _fonts.BoldSystemFontOfSize)(20);
        _this.addSubview(_this.label);

        _this.backgroundColor = backgroundColor;
        return _this;
    }

    _createClass(DemoPageView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            _get(DemoPageView.prototype.__proto__ || Object.getPrototypeOf(DemoPageView.prototype), 'layoutSubviews', this).call(this);

            this.label.sizeToFit().moveToCenterMiddle();
        }
    }]);

    return DemoPageView;
}(_View3.default);

exports.default = DemoPageView;

},{"canvas_ui/Label":75,"canvas_ui/View":101,"canvas_ui/fonts":103}],14:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _View2 = require('canvas_ui/View');

var _View3 = _interopRequireDefault(_View2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DemoView = function (_View) {
    _inherits(DemoView, _View);

    function DemoView(title) {
        _classCallCheck(this, DemoView);

        var _this = _possibleConstructorReturn(this, (DemoView.__proto__ || Object.getPrototypeOf(DemoView)).call(this));

        _this.title = title;
        return _this;
    }

    _createClass(DemoView, [{
        key: 'wasAddedToView',
        value: function wasAddedToView() {
            _get(DemoView.prototype.__proto__ || Object.getPrototypeOf(DemoView.prototype), 'wasAddedToView', this).call(this);

            this.frame = this.superview.contentFrame;
        }
    }]);

    return DemoView;
}(_View3.default);

exports.default = DemoView;

},{"canvas_ui/View":101}],15:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _DraggableDemoView = require('./DraggableDemoView');

var _DraggableDemoView2 = _interopRequireDefault(_DraggableDemoView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Drag red square wherever.
 */

var DragAndDropBaseDemoView = function (_DemoView) {
    _inherits(DragAndDropBaseDemoView, _DemoView);

    function DragAndDropBaseDemoView(title) {
        _classCallCheck(this, DragAndDropBaseDemoView);

        var _this = _possibleConstructorReturn(this, (DragAndDropBaseDemoView.__proto__ || Object.getPrototypeOf(DragAndDropBaseDemoView)).call(this, title || 'Draggable'));

        _this.redDraggable = new _DraggableDemoView2.default('red');
        _this.redDraggable.id = 'red-draggable';
        _this.addSubview(_this.redDraggable);
        return _this;
    }

    _createClass(DragAndDropBaseDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.redDraggable.size.set(100, 100);
            this.redDraggable.moveToCenterMiddle();
            this.redDraggable.needsLayout = false;
            this.needsLayout = false;
        }
    }]);

    return DragAndDropBaseDemoView;
}(_DemoView3.default);

exports.default = DragAndDropBaseDemoView;

},{"./DemoView":14,"./DraggableDemoView":18}],16:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _DragAndDropBaseDemoView = require('./DragAndDropBaseDemoView');

var _DragAndDropBaseDemoView2 = _interopRequireDefault(_DragAndDropBaseDemoView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DragAndDropConstraintDemoView = function (_DragAndDropBaseDemoV) {
    _inherits(DragAndDropConstraintDemoView, _DragAndDropBaseDemoV);

    function DragAndDropConstraintDemoView() {
        _classCallCheck(this, DragAndDropConstraintDemoView);

        var _this = _possibleConstructorReturn(this, (DragAndDropConstraintDemoView.__proto__ || Object.getPrototypeOf(DragAndDropConstraintDemoView)).call(this, 'Drag - Horiz. Constraint'));

        var topAtDragStart;
        _this.redDraggable.on('dragStarted', function () {
            topAtDragStart = _this.redDraggable.top;
        });
        _this.redDraggable.on('dragUpdated', function () {
            _this.redDraggable.top = topAtDragStart;
        });
        return _this;
    }

    return DragAndDropConstraintDemoView;
}(_DragAndDropBaseDemoView2.default);

exports.default = DragAndDropConstraintDemoView;

},{"./DragAndDropBaseDemoView":15}],17:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _DragAndDropBaseDemoView = require('./DragAndDropBaseDemoView');

var _DragAndDropBaseDemoView2 = _interopRequireDefault(_DragAndDropBaseDemoView);

var _DraggableDemoView = require('./DraggableDemoView');

var _DraggableDemoView2 = _interopRequireDefault(_DraggableDemoView);

var _DroppableDemoView = require('./DroppableDemoView');

var _DroppableDemoView2 = _interopRequireDefault(_DroppableDemoView);

var _Label = require('canvas_ui/Label');

var _Label2 = _interopRequireDefault(_Label);

var _Animation = require('canvas_ui/Animation');

var _Animation2 = _interopRequireDefault(_Animation);

var _magic = require('canvas_ui/magic');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Accepts dropped view with the same background color as
 * configured acceptable color.
 */

var DragAndDropDemoView = function (_DragAndDropBaseDemoV) {
    _inherits(DragAndDropDemoView, _DragAndDropBaseDemoV);

    function DragAndDropDemoView() {
        _classCallCheck(this, DragAndDropDemoView);

        var _this = _possibleConstructorReturn(this, (DragAndDropDemoView.__proto__ || Object.getPrototypeOf(DragAndDropDemoView)).call(this, 'Drag and Drop'));

        _this.blueDraggable = new _DraggableDemoView2.default('blue');
        _this.blueDraggable.id = 'blue-draggable';
        _this.addSubview(_this.blueDraggable);
        _this.blueDraggable.userInteractionEnabled = false;

        _this.blueDropbox = new _DroppableDemoView2.default('blue');
        _this.blueDropbox.id = 'blue-dropbox';
        _this.addSubview(_this.blueDropbox);

        _this.redDropbox = new _DroppableDemoView2.default('red');
        _this.redDropbox.id = 'red-dropbox';
        _this.addSubview(_this.redDropbox);

        var redInstructions = 'Drop solid red box on red-bordered box.',
            blueInstructions = 'Drop solid blue box on blue-bordered box.',
            failText = 'Oops!';

        _this.infoLabel = new _Label2.default(redInstructions);
        _this.infoLabel.textAlign = 'center';
        _this.infoLabel.textColor = 'red';
        _this.addSubview(_this.infoLabel);

        _this.redDropbox.on('dropReceived', function () {
            _this.redDraggable.alignCenter(_this.redDropbox).addAnimation({
                name: 'spin',
                endValues: { angle: 2 * Math.PI },
                duration: 1000,
                easing: _Animation2.default.easing.cubic
            });

            _this.redDraggable.userInteractionEnabled = false;
            _this.blueDraggable.userInteractionEnabled = true;

            _this.infoLabel.text = blueInstructions;
            _this.infoLabel.textColor = 'blue';
        });

        _this.blueDropbox.on('dropReceived', function () /*droppedView*/{
            _this.blueDraggable.alignCenter(_this.blueDropbox).addAnimation({
                name: 'spin',
                endValues: { angle: 2 * Math.PI },
                duration: 1000,
                easing: _Animation2.default.easing.cubic
            });

            _this.blueDraggable.userInteractionEnabled = false;

            _this.infoLabel.text = 'Amazing!';
            _this.infoLabel.textColor = '#282';

            clearTimeout(_this.timeout);
            _this.timeout = setTimeout(function () {
                _this.redDraggable.userInteractionEnabled = true;
                _this.blueDraggable.userInteractionEnabled = true;

                _this.redDraggable.angle = _this.blueDraggable.angle = 0;

                _this.infoLabel.text = redInstructions;
                _this.infoLabel.textColor = 'red';

                _this.needsLayout = true;
            }, 4000);
        });

        _this.redDraggable.on('dropRejected', function () {
            _this.infoLabel.text = failText;
            _this.infoLabel.textColor = 'black';

            clearTimeout(_this.timeout);
            _this.timeout = setTimeout(function () {
                _this.infoLabel.text = redInstructions;
                _this.infoLabel.textColor = 'red';
            }, 1000);
        });

        _this.blueDraggable.on('dropRejected', function () {
            _this.infoLabel.text = failText;
            _this.infoLabel.textColor = 'black';

            clearTimeout(_this.timeout);
            _this.timeout = setTimeout(function () {
                _this.infoLabel.text = blueInstructions;
                _this.infoLabel.textColor = 'blue';
            }, 1000);
        });

        _this.bringToFront(_this.redDraggable);
        _this.bringToFront(_this.blueDraggable);
        return _this;
    }

    _createClass(DragAndDropDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.redDraggable.size.set(_magic.FingerSizePoints, _magic.FingerSizePoints);
            this.redDraggable.moveToCenterMiddle();

            this.blueDraggable.size.set(_magic.FingerSizePoints, _magic.FingerSizePoints);
            this.blueDraggable.moveBelow(this.redDraggable, 20).alignLeft(this.redDraggable);

            var dropboxSize = Math.round(_magic.FingerSizePoints * 1.5);

            this.blueDropbox.size.set(dropboxSize, dropboxSize);
            this.blueDropbox.moveToCenterMiddle().left = 20;

            this.redDropbox.size.set(dropboxSize, dropboxSize);
            this.redDropbox.moveToCenterMiddle().right = this.width - 20;

            this.infoLabel.frame.set(0, 0, this.width, 30);
        }
    }, {
        key: 'willBeRemovedFromView',
        value: function willBeRemovedFromView() {
            _get(DragAndDropDemoView.prototype.__proto__ || Object.getPrototypeOf(DragAndDropDemoView.prototype), 'willBeRemovedFromView', this).call(this);
            clearTimeout(this.timeout);
        }
    }]);

    return DragAndDropDemoView;
}(_DragAndDropBaseDemoView2.default);

exports.default = DragAndDropDemoView;

},{"./DragAndDropBaseDemoView":15,"./DraggableDemoView":18,"./DroppableDemoView":19,"canvas_ui/Animation":57,"canvas_ui/Label":75,"canvas_ui/magic":105}],18:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _View2 = require('canvas_ui/View');

var _View3 = _interopRequireDefault(_View2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DraggableDemoView = function (_View) {
    _inherits(DraggableDemoView, _View);

    function DraggableDemoView(color) {
        _classCallCheck(this, DraggableDemoView);

        var _this = _possibleConstructorReturn(this, (DraggableDemoView.__proto__ || Object.getPrototypeOf(DraggableDemoView)).call(this));

        _this.backgroundColor = color;
        _this.draggable = true;
        return _this;
    }

    return DraggableDemoView;
}(_View3.default);

exports.default = DraggableDemoView;

},{"canvas_ui/View":101}],19:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _View2 = require('canvas_ui/View');

var _View3 = _interopRequireDefault(_View2);

var _BasicAnimations = require('canvas_ui/BasicAnimations');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DroppableDemoView = function (_View) {
    _inherits(DroppableDemoView, _View);

    function DroppableDemoView(acceptsColor) {
        _classCallCheck(this, DroppableDemoView);

        var _this = _possibleConstructorReturn(this, (DroppableDemoView.__proto__ || Object.getPrototypeOf(DroppableDemoView)).call(this));

        _this._acceptsColor = acceptsColor;

        _this.backgroundColor = '#fff';
        _this.borderColor = acceptsColor;
        _this.borderWidth = 2;

        // This view may accept some dropped view;
        // see acceptsDroppedView.

        _this.acceptsDroppedViews = true;
        return _this;
    }

    _createClass(DroppableDemoView, [{
        key: 'acceptsDroppedView',
        value: function acceptsDroppedView(otherView /*, localPoint*/) {
            return otherView.backgroundColor === this._acceptsColor;
        }
    }, {
        key: 'mightReceiveDroppedView',
        value: function mightReceiveDroppedView(view, atPoint) {
            this.addAnimation(new _BasicAnimations.Scale(this, { scale: 1.2 }));
            _get(DroppableDemoView.prototype.__proto__ || Object.getPrototypeOf(DroppableDemoView.prototype), 'mightReceiveDroppedView', this).call(this, view, atPoint);
        }
    }, {
        key: 'willNotReceiveDroppedView',
        value: function willNotReceiveDroppedView(view) {
            this.addAnimation(new _BasicAnimations.Scale(this, { scale: 1.0 }));
            _get(DroppableDemoView.prototype.__proto__ || Object.getPrototypeOf(DroppableDemoView.prototype), 'willNotReceiveDroppedView', this).call(this, view);
        }
    }, {
        key: 'droppedViewWasReceived',
        value: function droppedViewWasReceived() /*droppedView, localPoint*/{
            this.addAnimation(new _BasicAnimations.Scale(this, { scale: 1.0 }));
            _get(DroppableDemoView.prototype.__proto__ || Object.getPrototypeOf(DroppableDemoView.prototype), 'droppedViewWasReceived', this).call(this);
        }
    }]);

    return DroppableDemoView;
}(_View3.default);

exports.default = DroppableDemoView;

},{"canvas_ui/BasicAnimations":60,"canvas_ui/View":101}],20:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _TableViewDataSource2 = require('canvas_ui/TableViewDataSource');

var _TableViewDataSource3 = _interopRequireDefault(_TableViewDataSource2);

var _TableViewCell = require('canvas_ui/TableViewCell');

var _TableViewCell2 = _interopRequireDefault(_TableViewCell);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EditableTableViewDemoDataSource = function (_TableViewDataSource) {
    _inherits(EditableTableViewDemoDataSource, _TableViewDataSource);

    function EditableTableViewDemoDataSource() {
        _classCallCheck(this, EditableTableViewDemoDataSource);

        var _this = _possibleConstructorReturn(this, (EditableTableViewDemoDataSource.__proto__ || Object.getPrototypeOf(EditableTableViewDemoDataSource)).call(this));

        _this.items = _lodash2.default.map(_lodash2.default.range(20), function (i) {
            return {
                title: 'Title # ' + i,
                subtitle: 'Subtitle # ' + i
            };
        });
        return _this;
    }

    _createClass(EditableTableViewDemoDataSource, [{
        key: 'numberOfItems',
        value: function numberOfItems() /*tableView*/{
            return this.items.length;
        }
    }, {
        key: 'cellForItemAtIndex',
        value: function cellForItemAtIndex(tableView, index) {
            var item = this.items[index];

            var cell = new _TableViewCell2.default(tableView, index);
            cell.title = item.title;
            cell.subtitle = item.subtitle;
            return cell;
        }
    }, {
        key: 'moveItem',
        value: function moveItem(tableView, fromIndex, toIndex) {
            if (fromIndex === toIndex) {
                return;
            }

            this.items.splice(toIndex, 0, this.items.splice(fromIndex, 1)[0]);
        }
    }, {
        key: 'removeItemAtIndex',
        value: function removeItemAtIndex(tableView, index) {
            this.items.splice(index, 1);
        }
    }]);

    return EditableTableViewDemoDataSource;
}(_TableViewDataSource3.default);

exports.default = EditableTableViewDemoDataSource;

},{"canvas_ui/TableViewCell":96,"canvas_ui/TableViewDataSource":97,"lodash":53}],21:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _EditableTableViewDemoDataSource = require('./EditableTableViewDemoDataSource');

var _EditableTableViewDemoDataSource2 = _interopRequireDefault(_EditableTableViewDemoDataSource);

var _TableView = require('canvas_ui/TableView');

var _TableView2 = _interopRequireDefault(_TableView);

var _TextView = require('canvas_ui/TextView');

var _TextView2 = _interopRequireDefault(_TextView);

var _Label = require('canvas_ui/Label');

var _Label2 = _interopRequireDefault(_Label);

var _fonts = require('canvas_ui/fonts');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EditableTableViewDemoView = function (_DemoView) {
    _inherits(EditableTableViewDemoView, _DemoView);

    function EditableTableViewDemoView() {
        _classCallCheck(this, EditableTableViewDemoView);

        var _this = _possibleConstructorReturn(this, (EditableTableViewDemoView.__proto__ || Object.getPrototypeOf(EditableTableViewDemoView)).call(this, 'Editable Table View'));

        _this.tableView = new _TableView2.default(new _EditableTableViewDemoDataSource2.default(), _this);
        _this.addSubview(_this.tableView);

        var headerView = new _TextView2.default('Drag to scroll.\nSwipe left to delete.\nLong press to reorder.');
        headerView.backgroundColor = '#eee';
        headerView.insets.setAll(10);
        headerView.font = (0, _fonts.SystemFontOfSize)(9);
        headerView.textColor = '#777';
        headerView.textAlign = 'center';
        headerView.height = 65;
        _this.tableView.headerView = headerView;

        var footerView = new _Label2.default('I am a footer. Whee!');
        footerView.font = (0, _fonts.SystemFontOfSize)(9);
        footerView.textColor = '#aaa';
        footerView.textAlign = 'center';
        footerView.height = 60;
        _this.tableView.footerView = footerView;
        return _this;
    }

    _createClass(EditableTableViewDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.tableView.frame = this.bounds;
        }
    }, {
        key: 'heightForCellAtIndex',
        value: function heightForCellAtIndex() /*tableView, index*/{
            return 60;
        }
    }, {
        key: 'canMoveItem',
        value: function canMoveItem() /*tableView, fromIndex, toIndex*/{
            return true;
        }
    }, {
        key: 'canRemoveItem',
        value: function canRemoveItem() /*tableView, atIndex*/{
            return true;
        }
    }, {
        key: 'wasAddedToView',
        value: function wasAddedToView() {
            _get(EditableTableViewDemoView.prototype.__proto__ || Object.getPrototypeOf(EditableTableViewDemoView.prototype), 'wasAddedToView', this).call(this);
            this.tableView.scrollToRow(0);
        }
    }]);

    return EditableTableViewDemoView;
}(_DemoView3.default);

exports.default = EditableTableViewDemoView;

},{"./DemoView":14,"./EditableTableViewDemoDataSource":20,"canvas_ui/Label":75,"canvas_ui/TableView":95,"canvas_ui/TextView":99,"canvas_ui/fonts":103}],22:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _GridView = require('canvas_ui/GridView');

var _GridView2 = _interopRequireDefault(_GridView);

var _ScrollView = require('canvas_ui/ScrollView');

var _ScrollView2 = _interopRequireDefault(_ScrollView);

var _Button = require('canvas_ui/Button');

var _Button2 = _interopRequireDefault(_Button);

var _Size = require('canvas_ui/Size');

var _Size2 = _interopRequireDefault(_Size);

var _Point = require('canvas_ui/Point');

var _Point2 = _interopRequireDefault(_Point);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Shows how scrollTo works
 */

var GridDemoView = function (_DemoView) {
    _inherits(GridDemoView, _DemoView);

    function GridDemoView() {
        _classCallCheck(this, GridDemoView);

        var _this = _possibleConstructorReturn(this, (GridDemoView.__proto__ || Object.getPrototypeOf(GridDemoView)).call(this, 'Scrolling'));

        _this.scrollView = new _ScrollView2.default();
        _this.scrollView.backgroundColor = '#fee';
        _this.scrollView.borderWidth = 1;
        _this.scrollView.contentView.backgroundColor = '#def';
        _this.scrollView.contentView.borderWidth = 1;
        _this.scrollView.contentView.borderColor = 'rgba(0,0,255,0.5)';
        _this.addSubview(_this.scrollView);

        _this.gridView = new _GridView2.default();
        _this.gridView.backgroundColor = '#fff';
        _this.scrollView.contentView.addSubview(_this.gridView);

        _this.scrollTop = new _Button2.default('Scroll to Top Left');
        _this.addSubview(_this.scrollTop);

        _this.scrollBottom = new _Button2.default('Scroll to Bottom Right');
        _this.addSubview(_this.scrollBottom);

        _this.scrollMiddle = new _Button2.default('Scroll to Center');
        _this.addSubview(_this.scrollMiddle);

        _this.scrollTop.on('tap', function () {
            return _this.scrollView.scrollTo(0, 0);
        });

        _this.scrollMiddle.on('tap', function () {
            _this.scrollView.scrollTo(_this.scrollView.contentSize.width / 2 - _this.scrollView.halfWidth, _this.scrollView.contentSize.height / 2 - _this.scrollView.halfHeight);
        });

        _this.scrollBottom.on('tap', function () {
            _this.scrollView.scrollTo(_this.scrollView.contentSize.width, _this.scrollView.contentSize.height);
        });

        _this.testButton = new _Button2.default('Change Grid Color');
        _this.scrollView.contentView.addSubview(_this.testButton);
        _this.testButton.backgroundColor = 'orange';
        _this.testButton.textColor = 'white';
        var colors = ['#f44', '#fa4', '#880', '#4a4', '#44f', '#f4a'],
            colorIndex = 0;
        _this.testButton.on('tap', function () {
            _this.gridView.majorLineColor = colors[colorIndex++ % colors.length];
            _this.gridView.minorLineColor = colors[colorIndex++ % colors.length];
        });
        return _this;
    }

    _createClass(GridDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.gridView.frame = this.contentFrame;

            this.scrollView.frame = this.bounds;
            this.scrollView.contentSize = new _Size2.default(this.width * 2, this.height * 2);

            this.gridView.frame = this.scrollView.contentView.bounds;

            this.scrollTop.sizeToFit().moveToLeftTop(new _Point2.default(10, 10));
            this.scrollMiddle.sizeToFit().moveRightOf(this.scrollTop, 10).alignTop(this.scrollTop);
            this.scrollBottom.sizeToFit().moveRightOf(this.scrollMiddle, 10).alignTop(this.scrollTop);

            this.testButton.sizeToFit().moveToCenterMiddle();
        }
    }]);

    return GridDemoView;
}(_DemoView3.default);

exports.default = GridDemoView;

},{"./DemoView":14,"canvas_ui/Button":62,"canvas_ui/GridView":68,"canvas_ui/Point":85,"canvas_ui/ScrollView":87,"canvas_ui/Size":90}],23:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _View = require('canvas_ui/View');

var _View2 = _interopRequireDefault(_View);

var _Label = require('canvas_ui/Label');

var _Label2 = _interopRequireDefault(_Label);

var _Button = require('canvas_ui/Button');

var _Button2 = _interopRequireDefault(_Button);

var _Point = require('canvas_ui/Point');

var _Point2 = _interopRequireDefault(_Point);

var _magic = require('canvas_ui/magic');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HitTestDemoView = function (_DemoView) {
    _inherits(HitTestDemoView, _DemoView);

    function HitTestDemoView() {
        _classCallCheck(this, HitTestDemoView);

        var _this = _possibleConstructorReturn(this, (HitTestDemoView.__proto__ || Object.getPrototypeOf(HitTestDemoView)).call(this, 'Hit Testing and Hiding'));

        _this.outerView = new _View2.default();
        _this.outerView.backgroundColor = '#78aafd';
        _this.outerView.userInteractionEnabled = true;
        _this.outerView.on('tap', function () {
            _this.infoLabel.text = 'Tapped outer view';
            _this.selectedView = _this.outerView;
        });
        _this.addSubview(_this.outerView);

        _this._selectedView = null;

        _this.innerView = new _View2.default();
        _this.innerView.backgroundColor = '#0078fd';
        _this.outerView.addSubview(_this.innerView);
        _this.innerView.userInteractionEnabled = true;
        _this.innerView.on('tap', function () {
            _this.infoLabel.text = 'Tapped inner view 1';
            _this.selectedView = _this.innerView;
        });

        _this.innerView2 = new _View2.default();
        _this.innerView2.backgroundColor = '#78fd00';
        _this.outerView.addSubview(_this.innerView2);
        _this.innerView2.userInteractionEnabled = true;
        _this.innerView2.on('tap', function () {
            _this.infoLabel.text = 'Tapped inner view 2';
            _this.selectedView = _this.innerView2;
        });

        _this.infoLabel = new _Label2.default();
        _this.addSubview(_this.infoLabel);

        _this.hideSelectedButton = new _Button2.default('Toggle Hidden State');
        _this.addSubview(_this.hideSelectedButton);
        _this.hideSelectedButton.hidden = true;
        _this.hideSelectedButton.on('tap', function () {
            _this._selectedView.hidden = !_this._selectedView.hidden;
        });

        _this.resetButton = new _Button2.default('Reset');
        _this.addSubview(_this.resetButton);
        _this.resetButton.on('tap', function () {
            _this.outerView.hidden = _this.innerView.hidden = _this.innerView2.hidden = false;
            _this.infoLabel.text = null;
            _this.selectedView = null;
            _this.hideSelectedButton.hidden = true;
            _this.resetButton.hidden = true;
        });
        _this.resetButton.hidden = true;
        return _this;
    }

    _createClass(HitTestDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.outerView.frame.set(20, 20, this.width / 2, this.height / 4);

            this.innerView.size.set(100, 100);
            this.innerView.moveToLeftTop(new _Point2.default(20, 20));

            this.innerView2.size.set(100, 100);
            this.innerView2.moveBelow(this.innerView, -40).alignHorizontalCenter(this.innerView, 50);

            this.infoLabel.moveBelow(this.outerView).alignLeft(this.outerView).makeSameWidth(this.outerView);
            this.infoLabel.height = _magic.FingerSizePoints;

            this.hideSelectedButton.sizeToFit().moveBelow(this.infoLabel).alignLeft(this.infoLabel);

            this.resetButton.sizeToFit().moveBelow(this.hideSelectedButton, 10).alignLeft(this.infoLabel);
        }
    }, {
        key: 'selectedView',
        get: function get() {
            return this._selectedView;
        },
        set: function set(selectedView) {
            if (this._selectedView) {
                this._selectedView.borderWidth = 0;
            }

            this._selectedView = selectedView;

            if (this._selectedView) {
                this._selectedView.borderWidth = 1;
                this.hideSelectedButton.hidden = false;
                this.resetButton.hidden = false;
            }
        }
    }]);

    return HitTestDemoView;
}(_DemoView3.default);

exports.default = HitTestDemoView;

},{"./DemoView":14,"canvas_ui/Button":62,"canvas_ui/Label":75,"canvas_ui/Point":85,"canvas_ui/View":101,"canvas_ui/magic":105}],24:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _PagingDemoView2 = require('./PagingDemoView');

var _PagingDemoView3 = _interopRequireDefault(_PagingDemoView2);

var _Size = require('canvas_ui/Size');

var _Size2 = _interopRequireDefault(_Size);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HorizontalPagingDemoView = function (_PagingDemoView) {
    _inherits(HorizontalPagingDemoView, _PagingDemoView);

    function HorizontalPagingDemoView() {
        _classCallCheck(this, HorizontalPagingDemoView);

        return _possibleConstructorReturn(this, (HorizontalPagingDemoView.__proto__ || Object.getPrototypeOf(HorizontalPagingDemoView)).call(this, 'Horizontal Paging'));
    }

    _createClass(HorizontalPagingDemoView, [{
        key: 'layoutPages',
        value: function layoutPages() {
            var pageHeight = this.height,
                pageWidth = this.width;

            _lodash2.default.each(this.scrollView.contentView.subviews, function (page, index) {
                page.frame.set(pageWidth * index, 0, pageWidth, pageHeight);
            });

            this.scrollView.contentSize = new _Size2.default(pageWidth * this.scrollView.contentView.subviews.length, pageHeight);
        }
    }]);

    return HorizontalPagingDemoView;
}(_PagingDemoView3.default);

exports.default = HorizontalPagingDemoView;

},{"./PagingDemoView":35,"canvas_ui/Size":90,"lodash":53}],25:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _ImageStretchDemoView2 = require('./ImageStretchDemoView');

var _ImageStretchDemoView3 = _interopRequireDefault(_ImageStretchDemoView2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ImageScaleAspectFillDemoView = function (_ImageStretchDemoView) {
    _inherits(ImageScaleAspectFillDemoView, _ImageStretchDemoView);

    function ImageScaleAspectFillDemoView() {
        _classCallCheck(this, ImageScaleAspectFillDemoView);

        return _possibleConstructorReturn(this, (ImageScaleAspectFillDemoView.__proto__ || Object.getPrototypeOf(ImageScaleAspectFillDemoView)).call(this, 'scaleAspectFill', 'Images: Scale Aspect Fill'));
    }

    return ImageScaleAspectFillDemoView;
}(_ImageStretchDemoView3.default);

exports.default = ImageScaleAspectFillDemoView;

},{"./ImageStretchDemoView":27}],26:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _ImageStretchDemoView2 = require('./ImageStretchDemoView');

var _ImageStretchDemoView3 = _interopRequireDefault(_ImageStretchDemoView2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ImageScaleAspectFitDemoView = function (_ImageStretchDemoView) {
    _inherits(ImageScaleAspectFitDemoView, _ImageStretchDemoView);

    function ImageScaleAspectFitDemoView() {
        _classCallCheck(this, ImageScaleAspectFitDemoView);

        return _possibleConstructorReturn(this, (ImageScaleAspectFitDemoView.__proto__ || Object.getPrototypeOf(ImageScaleAspectFitDemoView)).call(this, 'scaleAspectFit', 'Images: Scale Aspect Fit'));
    }

    return ImageScaleAspectFitDemoView;
}(_ImageStretchDemoView3.default);

exports.default = ImageScaleAspectFitDemoView;

},{"./ImageStretchDemoView":27}],27:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _ImageView = require('canvas_ui/ImageView');

var _ImageView2 = _interopRequireDefault(_ImageView);

var _Button = require('canvas_ui/Button');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ImageStretchDemoView = function (_DemoView) {
    _inherits(ImageStretchDemoView, _DemoView);

    function ImageStretchDemoView() {
        var scalingMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'scaleToFill';
        var title = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Images: Scale to Fill';

        _classCallCheck(this, ImageStretchDemoView);

        var _this = _possibleConstructorReturn(this, (ImageStretchDemoView.__proto__ || Object.getPrototypeOf(ImageStretchDemoView)).call(this, title));

        _this.imageView = new _ImageView2.default('assets/smiley.png');
        _this.imageView.scalingMode = scalingMode;
        _this.imageView.backgroundColor = '#fff';
        _this.imageView.borderWidth = 2;
        _this.imageView.size.set(100, 100);
        _this.addSubview(_this.imageView);

        _this.button = new _Button2.default('Stretch Image');
        _this.addSubview(_this.button);
        _this.button.on('tap', function () {
            _this.userInteractionEnabled = false;

            _this.addAnimation({
                name: 'stretch',
                target: _this.imageView.size,
                endValues: { width: 200, height: 400 },
                duration: 2000,
                playCount: 2,
                autoReverse: true
            }).once('complete', function () {
                _this.userInteractionEnabled = true;
            });
        });
        return _this;
    }

    _createClass(ImageStretchDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.imageView.moveToCenterMiddle();

            this.button.sizeToFit().moveAbove(this.imageView, -10).alignHorizontalCenter(this.imageView);
        }
    }]);

    return ImageStretchDemoView;
}(_DemoView3.default);

exports.default = ImageStretchDemoView;

},{"./DemoView":14,"canvas_ui/Button":62,"canvas_ui/ImageView":69}],28:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _Label = require('canvas_ui/Label');

var _Label2 = _interopRequireDefault(_Label);

var _magic = require('canvas_ui/magic');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IntroDemoView = function (_DemoView) {
    _inherits(IntroDemoView, _DemoView);

    function IntroDemoView() {
        _classCallCheck(this, IntroDemoView);

        var _this = _possibleConstructorReturn(this, (IntroDemoView.__proto__ || Object.getPrototypeOf(IntroDemoView)).call(this, 'Welcome'));

        _this.label = new _Label2.default('A UI toolkit for the canvas API');
        _this.label.textAlign = 'center';
        _this.addSubview(_this.label);
        return _this;
    }

    _createClass(IntroDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            // or just .sizeToFit but this shows truncation on window resize

            this.label.size.set(this.width - 40, _magic.FingerSizePoints);
            this.label.moveToCenterMiddle();
        }
    }]);

    return IntroDemoView;
}(_DemoView3.default);

exports.default = IntroDemoView;

},{"./DemoView":14,"canvas_ui/Label":75,"canvas_ui/magic":105}],29:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _Label = require('canvas_ui/Label');

var _Label2 = _interopRequireDefault(_Label);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LabelAlignmentDemoView = function (_DemoView) {
    _inherits(LabelAlignmentDemoView, _DemoView);

    function LabelAlignmentDemoView() {
        _classCallCheck(this, LabelAlignmentDemoView);

        var _this = _possibleConstructorReturn(this, (LabelAlignmentDemoView.__proto__ || Object.getPrototypeOf(LabelAlignmentDemoView)).call(this, 'Label Text Alignment'));

        _this.labelTL = new _Label2.default('Top Left');
        _this.labelTL.textAlign = 'left';
        _this.labelTL.textBaseline = 'top';
        _this.addSubview(_this.labelTL);

        _this.labelTC = new _Label2.default('Top Center');
        _this.labelTC.textAlign = 'center';
        _this.labelTC.textBaseline = 'top';
        _this.addSubview(_this.labelTC);

        _this.labelTR = new _Label2.default('Top Right');
        _this.labelTR.textAlign = 'right';
        _this.labelTR.textBaseline = 'top';
        _this.addSubview(_this.labelTR);

        _this.labelMR = new _Label2.default('Middle Right');
        _this.labelMR.textAlign = 'right';
        _this.labelMR.textBaseline = 'middle';
        _this.addSubview(_this.labelMR);

        _this.labelBR = new _Label2.default('Bottom Right');
        _this.labelBR.textAlign = 'right';
        _this.labelBR.textBaseline = 'bottom';
        _this.addSubview(_this.labelBR);

        _this.labelBC = new _Label2.default('Bottom Center');
        _this.labelBC.textAlign = 'center';
        _this.labelBC.textBaseline = 'bottom';
        _this.addSubview(_this.labelBC);

        _this.labelBL = new _Label2.default('Bottom Left');
        _this.labelBL.textAlign = 'left';
        _this.labelBL.textBaseline = 'bottom';
        _this.addSubview(_this.labelBL);

        _this.labelML = new _Label2.default('Middle Left');
        _this.labelML.textAlign = 'left';
        _this.labelML.textBaseline = 'middle';
        _this.addSubview(_this.labelML);

        _lodash2.default.each(_this.subviews, function (lbl) {
            lbl.borderWidth = 1;
            lbl.borderColor = '#f00';
            lbl.insets.setAll(5);
        });
        return _this;
    }

    _createClass(LabelAlignmentDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            var labelW = this.width / 4,
                labelH = this.height / 4;

            _lodash2.default.each(this.subviews, function (lbl) {
                lbl.size.set(labelW, labelH);
            });

            var margin = 10;

            this.labelTL.moveToLeftTop({ x: margin, y: margin });
            this.labelTR.moveToRightTop({ x: -margin, y: margin });
            this.labelBR.moveToRightBottom({ x: -margin, y: -margin });
            this.labelBL.moveToLeftBottom({ x: margin, y: -margin });

            this.labelTC.moveToCenterMiddle().alignTop(this.labelTL);
            this.labelBC.moveToCenterMiddle().alignBottom(this.labelBL);
            this.labelML.moveToCenterMiddle().alignLeft(this.labelBL);
            this.labelMR.moveToCenterMiddle().alignRight(this.labelBR);
        }
    }]);

    return LabelAlignmentDemoView;
}(_DemoView3.default);

exports.default = LabelAlignmentDemoView;

},{"./DemoView":14,"canvas_ui/Label":75,"lodash":53}],30:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _Label = require('canvas_ui/Label');

var _Label2 = _interopRequireDefault(_Label);

var _fonts = require('canvas_ui/fonts');

var _core = require('canvas_ui/core');

var _BasicAnimations = require('canvas_ui/BasicAnimations');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LabelStylingDemoView = function (_DemoView) {
    _inherits(LabelStylingDemoView, _DemoView);

    function LabelStylingDemoView() {
        _classCallCheck(this, LabelStylingDemoView);

        var _this = _possibleConstructorReturn(this, (LabelStylingDemoView.__proto__ || Object.getPrototypeOf(LabelStylingDemoView)).call(this, 'Label Styling'));

        _this.label = new _Label2.default('COLORS!');
        _this.label.textAlign = 'center';
        _this.label.textOutlineColor = 'white';
        _this.label.textOutlineWidth = 2;
        _this.addSubview(_this.label);
        return _this;
    }

    _createClass(LabelStylingDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            _get(LabelStylingDemoView.prototype.__proto__ || Object.getPrototypeOf(LabelStylingDemoView.prototype), 'layoutSubviews', this).call(this);

            var label = this.label;

            this.label.font = (0, _fonts.BoldSystemFontOfSize)(Math.round(this.height / 15));
            this.label.sizeToFit().moveToCenterMiddle();

            var grad = (0, _core.getContext)().createLinearGradient(0, 0, label.contentWidth, label.contentHeight);
            grad.addColorStop(0, 'red');
            grad.addColorStop(0.2, 'orange');
            grad.addColorStop(0.4, 'yellow');
            grad.addColorStop(0.6, 'green');
            grad.addColorStop(0.8, 'blue');
            grad.addColorStop(1, 'purple');
            label.textColor = grad;
        }
    }, {
        key: 'wasAddedToView',
        value: function wasAddedToView() {
            var _this2 = this;

            _get(LabelStylingDemoView.prototype.__proto__ || Object.getPrototypeOf(LabelStylingDemoView.prototype), 'wasAddedToView', this).call(this);

            // artifacts during popIn with shadows enabled so add them afterwards

            this.label.addAnimation(new _BasicAnimations.PopIn(this.label)).once('complete', function () {
                _this2.label.shadowColor = 'rgba(128,0,0,0.5)';
                _this2.label.backgroundColor = '#fff';
                _this2.label.addAnimation({
                    name: 'shadow',
                    endValues: { shadowBlur: 10, shadowOffsetY: 6 }
                });
            });
        }
    }]);

    return LabelStylingDemoView;
}(_DemoView3.default);

exports.default = LabelStylingDemoView;

},{"./DemoView":14,"canvas_ui/BasicAnimations":60,"canvas_ui/Label":75,"canvas_ui/core":102,"canvas_ui/fonts":103}],31:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _View2 = require('canvas_ui/View');

var _View3 = _interopRequireDefault(_View2);

var _Label = require('canvas_ui/Label');

var _Label2 = _interopRequireDefault(_Label);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NavigationDemoLabelView = function (_View) {
    _inherits(NavigationDemoLabelView, _View);

    function NavigationDemoLabelView(text) {
        _classCallCheck(this, NavigationDemoLabelView);

        var _this = _possibleConstructorReturn(this, (NavigationDemoLabelView.__proto__ || Object.getPrototypeOf(NavigationDemoLabelView)).call(this));

        _this.label = new _Label2.default(text);
        _this.label.textAlign = 'center';
        _this.addSubview(_this.label);
        return _this;
    }

    _createClass(NavigationDemoLabelView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.label.frame = this.bounds;
        }
    }, {
        key: 'wasAddedToNavigationStack',
        value: function wasAddedToNavigationStack() {
            var navBar = this.navigationBar,
                viewNo = this.navigationStack.subviews.length; // 1-based

            var colors = ['#eee', '#def', '#fed', '#efd', '#88a'];
            this.label.backgroundColor = colors[viewNo % colors.length];

            navBar.title = 'View #' + viewNo;

            if (viewNo > 1) {
                navBar.leftView.text = 'Back';
                navBar.leftView.on('tap', this.popToPreviousView.bind(this));
            } else {
                navBar.leftView.text = null;
            }

            navBar.rightView.text = 'Push View';
            navBar.rightView.on('tap', this.pushAnotherView.bind(this));
        }
    }, {
        key: 'pushAnotherView',
        value: function pushAnotherView() {
            var navStack = this.navigationStack,
                viewNo = navStack.subviews.length + 1;

            navStack.push(new NavigationDemoLabelView('This is view #' + viewNo));
        }
    }, {
        key: 'popToPreviousView',
        value: function popToPreviousView() {
            var navStack = this.navigationStack;
            if (navStack) {
                navStack.pop();
            }
        }
    }]);

    return NavigationDemoLabelView;
}(_View3.default);

exports.default = NavigationDemoLabelView;

},{"canvas_ui/Label":75,"canvas_ui/View":101}],32:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _NavigationDemoLabelView = require('./NavigationDemoLabelView');

var _NavigationDemoLabelView2 = _interopRequireDefault(_NavigationDemoLabelView);

var _NavigationStack = require('canvas_ui/NavigationStack');

var _NavigationStack2 = _interopRequireDefault(_NavigationStack);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NavigationDemoView = function (_DemoView) {
    _inherits(NavigationDemoView, _DemoView);

    function NavigationDemoView() {
        _classCallCheck(this, NavigationDemoView);

        var _this = _possibleConstructorReturn(this, (NavigationDemoView.__proto__ || Object.getPrototypeOf(NavigationDemoView)).call(this, 'Navigation Demo'));

        _this.stack = new _NavigationStack2.default();
        _this.addSubview(_this.stack);

        _this.stack.push(new _NavigationDemoLabelView2.default('View 1'));
        return _this;
    }

    _createClass(NavigationDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.stack.frame = this.bounds;
        }
    }]);

    return NavigationDemoView;
}(_DemoView3.default);

exports.default = NavigationDemoView;

},{"./DemoView":14,"./NavigationDemoLabelView":31,"canvas_ui/NavigationStack":82}],33:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _Button = require('canvas_ui/Button');

var _Button2 = _interopRequireDefault(_Button);

var _NotificationView = require('canvas_ui/NotificationView');

var _NotificationView2 = _interopRequireDefault(_NotificationView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NotificationDemoView = function (_DemoView) {
    _inherits(NotificationDemoView, _DemoView);

    function NotificationDemoView() {
        _classCallCheck(this, NotificationDemoView);

        var _this = _possibleConstructorReturn(this, (NotificationDemoView.__proto__ || Object.getPrototypeOf(NotificationDemoView)).call(this, 'Notifications'));

        _this.infoButton = new _Button2.default('Info');
        _this.addSubview(_this.infoButton);
        _this.infoButton.on('tap', function () {
            var notification = new _NotificationView2.default('Something happened.');
            _this.rootView.addSubview(notification);
        });

        _this.warningButton = new _Button2.default('Warning');
        _this.addSubview(_this.warningButton);
        _this.warningButton.on('tap', function () {
            var notification = new _NotificationView2.default('Something is about to break.', 'warning');
            _this.rootView.addSubview(notification);
        });

        _this.errorButton = new _Button2.default('Error');
        _this.addSubview(_this.errorButton);
        _this.errorButton.on('tap', function () {
            var notification = new _NotificationView2.default('Something broke.', 'error');
            _this.rootView.addSubview(notification);
        });
        return _this;
    }

    _createClass(NotificationDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            _lodash2.default.each(this.subviews, function (subview) {
                return subview.sizeToFit();
            });
            var maxWidth = _lodash2.default.max(_lodash2.default.map(this.subviews, 'width'));
            _lodash2.default.each(this.subviews, function (subview) {
                subview.width = maxWidth;
            });

            this.warningButton.moveToCenterMiddle();

            this.infoButton.moveAbove(this.warningButton, -20).alignHorizontalCenter(this.warningButton);

            this.errorButton.moveBelow(this.warningButton, 20).alignHorizontalCenter(this.warningButton);
        }
    }]);

    return NotificationDemoView;
}(_DemoView3.default);

exports.default = NotificationDemoView;

},{"./DemoView":14,"canvas_ui/Button":62,"canvas_ui/NotificationView":83,"lodash":53}],34:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _PackedImageView = require('canvas_ui/PackedImageView');

var _PackedImageView2 = _interopRequireDefault(_PackedImageView);

var _ImageView = require('canvas_ui/ImageView');

var _ImageView2 = _interopRequireDefault(_ImageView);

var _Label = require('canvas_ui/Label');

var _Label2 = _interopRequireDefault(_Label);

var _Point = require('canvas_ui/Point');

var _Point2 = _interopRequireDefault(_Point);

var _fonts = require('canvas_ui/fonts');

var _BasicAnimations = require('canvas_ui/BasicAnimations');

var _magic = require('canvas_ui/magic');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A demo of a "packed image" which is an image that consists
 * of sub-images defined by rectangular bounds.
 *
 * One might use a tool like "Texture Packer" to create such
 * a packed image. The idea is that it's better for performance
 * than multiple separate images since only one image would need
 * to be downloaded/loaded and fewer context switches is less
 * overhead during rendering.
 *
 * We do not support rotation of sub-image frames in the packed
 * image at this time.
 */

var PackedImageDemoView = function (_DemoView) {
    _inherits(PackedImageDemoView, _DemoView);

    function PackedImageDemoView() {
        _classCallCheck(this, PackedImageDemoView);

        var _this = _possibleConstructorReturn(this, (PackedImageDemoView.__proto__ || Object.getPrototypeOf(PackedImageDemoView)).call(this, 'Packed Image'));

        var subImageInfo = {
            apple: { x: 2, y: 2, w: 574, h: 542 },
            banana: { x: 176, y: 546, w: 362, h: 349 },
            cherry: { x: 540, y: 546, w: 381, h: 324 },
            lemon: { x: 578, y: 2, w: 275, h: 210 },
            pineapple: { x: 2, y: 546, w: 172, h: 373 }
        };

        _this.imageView = new _PackedImageView2.default('assets/fruit.png', subImageInfo);
        _this.addSubview(_this.imageView);

        _this.infoLabel = new _Label2.default();
        _this.infoLabel.font = (0, _fonts.BoldSystemFontOfSize)(30);
        _this.infoLabel.backgroundColor = _magic.transparent;
        _this.infoLabel.textColor = 'orange';
        _this.infoLabel.drawMode = 'xor';
        _this.addSubview(_this.infoLabel);
        _this.imageView.on('imageChanged', function () {
            _this.infoLabel.text = _this.imageView.currentImageName;
            _this.needsLayout = true;
            _this.infoLabel.addAnimation(new _BasicAnimations.PopIn(_this.infoLabel));
        });

        // Tap current sub-image to advance to next image.

        _this.imageView.currentImageName = 'apple';
        var index = 0;
        _this.imageView.on('tap', function () {
            var imageNames = _lodash2.default.keys(subImageInfo).sort();
            index = (index + 1) % imageNames.length;
            _this.imageView.currentImageName = imageNames[index];
        });

        _this.wholeImageView = new _ImageView2.default('assets/fruit.png', 'scaleAspectFit');
        _this.addSubview(_this.wholeImageView);
        _this.wholeImageView.borderWidth = 1;
        _this.wholeImageView.borderColor = 'rgba(0,0,0,0.2)';
        return _this;
    }

    _createClass(PackedImageDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            _get(PackedImageDemoView.prototype.__proto__ || Object.getPrototypeOf(PackedImageDemoView.prototype), 'layoutSubviews', this).call(this);

            var imageSize = Math.min(this.halfWidth, this.halfHeight);
            this.imageView.size.set(imageSize, imageSize);
            this.imageView.moveToCenterMiddle();

            this.infoLabel.sizeToFit().moveToCenterMiddle();

            this.wholeImageView.size.set(Math.max(100, this.width / 4), Math.max(100, this.height / 10));
            this.wholeImageView.moveToLeftBottom(new _Point2.default(20, -20));
        }
    }]);

    return PackedImageDemoView;
}(_DemoView3.default);

exports.default = PackedImageDemoView;

},{"./DemoView":14,"canvas_ui/BasicAnimations":60,"canvas_ui/ImageView":69,"canvas_ui/Label":75,"canvas_ui/PackedImageView":84,"canvas_ui/Point":85,"canvas_ui/fonts":103,"canvas_ui/magic":105,"lodash":53}],35:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _DemoPageView = require('./DemoPageView');

var _DemoPageView2 = _interopRequireDefault(_DemoPageView);

var _ScrollView = require('canvas_ui/ScrollView');

var _ScrollView2 = _interopRequireDefault(_ScrollView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PagingDemoView = function (_DemoView) {
    _inherits(PagingDemoView, _DemoView);

    function PagingDemoView(title) {
        _classCallCheck(this, PagingDemoView);

        var _this = _possibleConstructorReturn(this, (PagingDemoView.__proto__ || Object.getPrototypeOf(PagingDemoView)).call(this, title));

        _this.scrollView = new _ScrollView2.default();
        _this.scrollView.pagingEnabled = true;
        _this.scrollView.autoPagingEnabled = true;
        _this.addSubview(_this.scrollView);

        _this.scrollView.contentView.addSubview(new _DemoPageView2.default('Page 1', 'red'));
        _this.scrollView.contentView.addSubview(new _DemoPageView2.default('Page 2', 'blue'));
        _this.scrollView.contentView.addSubview(new _DemoPageView2.default('Page 3', 'green'));
        return _this;
    }

    _createClass(PagingDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            _get(PagingDemoView.prototype.__proto__ || Object.getPrototypeOf(PagingDemoView.prototype), 'layoutSubviews', this).call(this);
            this.scrollView.frame = this.bounds;
            this.layoutPages();
        }
    }, {
        key: 'wasAddedToView',
        value: function wasAddedToView() {
            _get(PagingDemoView.prototype.__proto__ || Object.getPrototypeOf(PagingDemoView.prototype), 'wasAddedToView', this).call(this);
            this.scrollView.becomeFirstResponder();
        }
    }, {
        key: 'layoutPages',
        value: function layoutPages() {
            // Override me.
        }
    }]);

    return PagingDemoView;
}(_DemoView3.default);

exports.default = PagingDemoView;

},{"./DemoPageView":13,"./DemoView":14,"canvas_ui/ScrollView":87}],36:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _core = require('canvas_ui/core');

var _magic = require('canvas_ui/magic');

var _Button = require('canvas_ui/Button');

var _Button2 = _interopRequireDefault(_Button);

var _Slider = require('canvas_ui/Slider');

var _Slider2 = _interopRequireDefault(_Slider);

var _Point = require('canvas_ui/Point');

var _Point2 = _interopRequireDefault(_Point);

var _BasicLayouts = require('canvas_ui/BasicLayouts');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// TODO could use the color picker in a popup I suppose. Doesn't matter much.

/**
 * A very simple painting canvas.
 */

var PaintDemoView = function (_DemoView) {
    _inherits(PaintDemoView, _DemoView);

    function PaintDemoView() {
        _classCallCheck(this, PaintDemoView);

        var _this = _possibleConstructorReturn(this, (PaintDemoView.__proto__ || Object.getPrototypeOf(PaintDemoView)).call(this, 'Paint Demo'));

        var colors = [[64, 64, 64], [192, 192, 192], [255, 255, 255], [0, 0, 0], [255, 0, 0], [255, 200, 0], [255, 255, 0], [0, 255, 0], [0, 0, 255], [128, 0, 255], [128, 0, 0], [128, 100, 0], [128, 128, 0], [0, 128, 0], [0, 0, 128], [64, 0, 128]];

        _this._colorWells = _lodash2.default.map(colors, function (color, index) {
            var btn = new _Button2.default();
            btn.size.set(_magic.FingerSizePoints, _magic.FingerSizePoints);
            btn.backgroundColor = 'rgb(' + color[0] + ',' + color[1] + ',' + color[2] + ')';
            btn._brushColor = color;
            btn.cornerRadius = 0;
            btn.offsetsOnTouch = false;
            btn.borderColor = 'black';
            btn.on('tap', _this.selectColorWellAtIndex.bind(_this, index));
            _this.addSubview(btn);
            return btn;
        });

        _this.selectColorWellAtIndex(0);

        _this._brushSizeSlider = new _Slider2.default({
            horizontal: false,
            value: _magic.FingerSizePoints,
            minValue: 1,
            maxValue: _magic.FingerSizePoints * 3,
            step: 1
        });
        _this.addSubview(_this._brushSizeSlider);
        _this._brushSizeSlider.backgroundColor = _magic.transparent;

        _this.clearButton = new _Button2.default('Clear');
        _this.addSubview(_this.clearButton);
        _this.clearButton.on('tap', function () {
            _this.needsLayout = true;
        });
        return _this;
    }

    _createClass(PaintDemoView, [{
        key: 'selectColorWellAtIndex',
        value: function selectColorWellAtIndex(selectedIndex) {
            var _this2 = this;

            _lodash2.default.each(this._colorWells, function (btn, index) {
                if (selectedIndex === index) {
                    _this2._brushColor = btn._brushColor;
                    btn.borderWidth = 4;
                    btn.superview.bringToFront(btn);
                } else {
                    btn.borderWidth = 0;
                }
            });
        }
    }, {
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            _get(PaintDemoView.prototype.__proto__ || Object.getPrototypeOf(PaintDemoView.prototype), 'layoutSubviews', this).call(this);

            // Retina displays, etc.
            var ratio = window.devicePixelRatio || 1;

            this._imageData = (0, _core.getContext)().createImageData(this.width * ratio, this.height * ratio);

            (0, _BasicLayouts.layoutNaturalFlow)(this, this._colorWells, { hMargin: 0, vMargin: 0 });

            this.clearButton.sizeToFit().moveToLeftBottom(new _Point2.default(10, -10));

            this._brushSizeSlider.size.set(_magic.FingerSizePoints, _magic.FingerSizePoints * 5);
            this._brushSizeSlider.moveToRightBottom(new _Point2.default(-10, 0));
        }
    }, {
        key: 'touchStart',
        value: function touchStart(localPoint) {
            _get(PaintDemoView.prototype.__proto__ || Object.getPrototypeOf(PaintDemoView.prototype), 'touchStart', this).call(this, localPoint);
            this.paintAt(localPoint);
        }
    }, {
        key: 'touchMove',
        value: function touchMove(localPoint) {
            _get(PaintDemoView.prototype.__proto__ || Object.getPrototypeOf(PaintDemoView.prototype), 'touchMove', this).call(this, localPoint);
            this.paintAt(localPoint);
        }
    }, {
        key: 'paintAt',
        value: function paintAt(localPoint) {
            var ratio = window.devicePixelRatio || 1;
            if (ratio !== 1) {
                localPoint.scaleSelf(ratio, ratio);
            }

            // Just a simple circular "brush"

            var brushSize = this._brushSizeSlider.value,
                halfBrushSize = brushSize / 2,
                rr = halfBrushSize * halfBrushSize,
                // brush radius squared
            brushColor = this._brushColor,
                data = this._imageData.data,
                dataWidth = this._imageData.width,
                dataHeight = this._imageData.height,
                dataRowLength = this._imageData.width * 4; // RGBA

            for (var y = Math.max(0, Math.round(localPoint.y - halfBrushSize)); y < Math.min(dataHeight - 1, Math.round(localPoint.y + halfBrushSize)); ++y) {

                var dy = (y - localPoint.y) * (y - localPoint.y),
                    dataRowStart = y * dataRowLength;

                for (var x = Math.max(0, Math.round(localPoint.x - halfBrushSize)); x < Math.min(dataWidth - 1, Math.round(localPoint.x + halfBrushSize)); ++x) {

                    var dx = (x - localPoint.x) * (x - localPoint.x);

                    if (dx + dy <= rr) {
                        var dataIndex = dataRowStart + x * 4;
                        data[dataIndex + 0] = brushColor[0];
                        data[dataIndex + 1] = brushColor[1];
                        data[dataIndex + 2] = brushColor[2];
                        data[dataIndex + 3] = 255;
                    }
                }
            }
        }
    }, {
        key: 'draw',
        value: function draw(context) {
            _get(PaintDemoView.prototype.__proto__ || Object.getPrototypeOf(PaintDemoView.prototype), 'draw', this).call(this, context);

            var ratio = window.devicePixelRatio || 1;
            var originInRoot = this.convertLocalToRoot(_magic.PointZero);
            originInRoot.scaleSelf(ratio, ratio);

            var fn = context.webkitPutImageDataHD || context.putImageDataHD || context.putImageData;
            fn.call(context, this._imageData, Math.round(originInRoot.x), Math.round(originInRoot.y));
        }
    }]);

    return PaintDemoView;
}(_DemoView3.default);

exports.default = PaintDemoView;

},{"./DemoView":14,"canvas_ui/BasicLayouts":61,"canvas_ui/Button":62,"canvas_ui/Point":85,"canvas_ui/Slider":91,"canvas_ui/core":102,"canvas_ui/magic":105,"lodash":53}],37:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _ProgressBar = require('canvas_ui/ProgressBar');

var _ProgressBar2 = _interopRequireDefault(_ProgressBar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ProgressBarDemoView = function (_DemoView) {
    _inherits(ProgressBarDemoView, _DemoView);

    function ProgressBarDemoView() {
        _classCallCheck(this, ProgressBarDemoView);

        var _this = _possibleConstructorReturn(this, (ProgressBarDemoView.__proto__ || Object.getPrototypeOf(ProgressBarDemoView)).call(this, 'Progress Bars'));

        _this.progressBarH = new _ProgressBar2.default();
        _this.progressBarH.backgroundColor = '#eee';
        _this.progressBarH.cornerRadius = 3;
        _this.addSubview(_this.progressBarH);

        _this.progressBarV = new _ProgressBar2.default();
        _this.progressBarV.horizontal = false;
        _this.progressBarV.barColor = '#00f';
        _this.progressBarV.backgroundColor = '#eee';
        _this.progressBarV.cornerRadius = 3;
        _this.addSubview(_this.progressBarV);
        return _this;
    }

    _createClass(ProgressBarDemoView, [{
        key: 'wasAddedToView',
        value: function wasAddedToView() {
            _get(ProgressBarDemoView.prototype.__proto__ || Object.getPrototypeOf(ProgressBarDemoView.prototype), 'wasAddedToView', this).call(this);

            var self = this;

            this.progressBarH.addAnimation({
                name: 'progress',
                target: { progress: 0 },
                endValues: { progress: 1 },
                duration: 2000,
                playCount: Infinity,
                autoReverse: true
            }).on('update', function () {
                self.progressBarH.progress = self.progressBarV.progress = this.target.progress;
            });
        }
    }, {
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.progressBarH.size.set(this.width / 2, 8);
            this.progressBarV.size.set(8, this.height / 2);

            this.progressBarH.moveToLeftTop({ x: 20, y: 20 });
            this.progressBarV.moveToRightBottom({ x: -20, y: -20 });
        }
    }]);

    return ProgressBarDemoView;
}(_DemoView3.default);

exports.default = ProgressBarDemoView;

},{"./DemoView":14,"canvas_ui/ProgressBar":86}],38:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _Label = require('canvas_ui/Label');

var _Label2 = _interopRequireDefault(_Label);

var _TextEditView = require('canvas_ui/TextEditView');

var _TextEditView2 = _interopRequireDefault(_TextEditView);

var _Button = require('canvas_ui/Button');

var _Button2 = _interopRequireDefault(_Button);

var _NotificationView = require('canvas_ui/NotificationView');

var _NotificationView2 = _interopRequireDefault(_NotificationView);

var _ActivityIndicatorView = require('canvas_ui/ActivityIndicatorView');

var _ActivityIndicatorView2 = _interopRequireDefault(_ActivityIndicatorView);

var _MessageView = require('canvas_ui/MessageView');

var _MessageView2 = _interopRequireDefault(_MessageView);

var _magic = require('canvas_ui/magic');

var _fonts = require('canvas_ui/fonts');

var _View = require('canvas_ui/View');

var _View2 = _interopRequireDefault(_View);

var _KeyboardView = require('canvas_ui/KeyboardView');

var _KeyboardView2 = _interopRequireDefault(_KeyboardView);

var _util = require('canvas_ui/util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RegistrationDemoView = function (_DemoView) {
    _inherits(RegistrationDemoView, _DemoView);

    function RegistrationDemoView() {
        _classCallCheck(this, RegistrationDemoView);

        var _this = _possibleConstructorReturn(this, (RegistrationDemoView.__proto__ || Object.getPrototypeOf(RegistrationDemoView)).call(this, 'User Registration Demo'));

        _this.usernameLabel = new _Label2.default('Username');
        _this.addSubview(_this.usernameLabel);

        _this.passwordLabel = new _Label2.default('Password');
        _this.addSubview(_this.passwordLabel);

        _this.usernameView = new _TextEditView2.default();
        _this.usernameView.maxLength = 32;
        _this.addSubview(_this.usernameView);
        _this.usernameView.on('enter', function () {
            _this.passwordView.becomeFirstResponder();
        });

        _this.passwordView = new _TextEditView2.default();
        _this.passwordView.maxLength = 32;
        _this.passwordView.secureMode = true;
        _this.addSubview(_this.passwordView);
        _this.passwordView.on('enter', _this.handleSubmit.bind(_this));

        _this.submitButton = new _Button2.default('Sign Up');
        _this.addSubview(_this.submitButton);
        _this.submitButton.on('tap', function () {
            return _this.handleSubmit();
        });

        _this.usernameLabel.font = _this.passwordLabel.font = (0, _fonts.BoldSystemFontOfSize)(14);
        return _this;
    }

    _createClass(RegistrationDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            _get(RegistrationDemoView.prototype.__proto__ || Object.getPrototypeOf(RegistrationDemoView.prototype), 'layoutSubviews', this).call(this);

            this.passwordView.size.set(this.superview.width / 2, _magic.FingerSizePoints);
            this.passwordView.moveToCenterMiddle();

            this.passwordLabel.makeSameSize(this.passwordView).moveAbove(this.passwordView).alignLeft(this.passwordView);

            this.usernameView.makeSameSize(this.passwordView).moveAbove(this.passwordLabel).alignLeft(this.passwordView);

            this.usernameLabel.makeSameSize(this.passwordView).moveAbove(this.usernameView).alignLeft(this.passwordView);

            this.submitButton.sizeToFit().moveBelow(this.passwordView, 20).alignLeft(this.passwordView);
        }
    }, {
        key: 'handleSubmit',
        value: function handleSubmit() {
            var username = this.usernameView.text.trim();
            if (username.length < 3 || username.length > 32) {
                var notification = new _NotificationView2.default('Please enter a valid username of 3-32 characters.', 'error');
                this.rootView.addSubview(notification);
                this.usernameView.becomeFirstResponder();
                return;
            }

            var password = this.passwordView.text.trim();
            if (password.length < 3 || password.length > 32) {
                var _notification = new _NotificationView2.default('Please enter a valid password of 3-32 characters', 'error');
                this.rootView.addSubview(_notification);
                this.passwordView.becomeFirstResponder();
                return;
            }

            if (_View2.default.firstResponder) {
                _View2.default.firstResponder.resignFirstResponder();

                var kbd = _KeyboardView2.default.instance(false);
                if (kbd) {
                    kbd.hide();
                }
            }

            this.signupWith(username, password);
        }
    }, {
        key: 'signupWith',
        value: function signupWith() /*username, password*/{
            var _this2 = this;

            var messageView = new _MessageView2.default();

            var activityIndicatorView = new _ActivityIndicatorView2.default();
            activityIndicatorView.lineColor = '#ddd';
            messageView.addSubview(activityIndicatorView);
            messageView.on('didLayoutSubviews', function () {
                var size = Math.round(messageView.width / 8);
                activityIndicatorView.size.set(size, size);
                activityIndicatorView.moveToCenterMiddle().animating = true;
            });

            (0, _util.setPropertyRecursive)(messageView, 'backgroundColor', '#444');
            (0, _util.setPropertyRecursive)(messageView, 'borderWidth', 0);
            (0, _util.setPropertyRecursive)(messageView, 'textColor', '#ddd');

            this.rootView.addSubview(messageView);

            setTimeout(function () {
                messageView.removeFromSuperview();

                setTimeout(function () {
                    var notification = new _NotificationView2.default('Username taken.', 'error');
                    _this2.rootView.addSubview(notification);

                    _this2.usernameView.becomeFirstResponder();
                }, 500);
            }, 2000);
        }
    }]);

    return RegistrationDemoView;
}(_DemoView3.default);

exports.default = RegistrationDemoView;

},{"./DemoView":14,"canvas_ui/ActivityIndicatorView":54,"canvas_ui/Button":62,"canvas_ui/KeyboardView":74,"canvas_ui/Label":75,"canvas_ui/MessageView":76,"canvas_ui/NotificationView":83,"canvas_ui/TextEditView":98,"canvas_ui/View":101,"canvas_ui/fonts":103,"canvas_ui/magic":105,"canvas_ui/util":107}],39:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _View = require('canvas_ui/View');

var _View2 = _interopRequireDefault(_View);

var _Button = require('canvas_ui/Button');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ScaleDemoView = function (_DemoView) {
    _inherits(ScaleDemoView, _DemoView);

    function ScaleDemoView() {
        _classCallCheck(this, ScaleDemoView);

        var _this = _possibleConstructorReturn(this, (ScaleDemoView.__proto__ || Object.getPrototypeOf(ScaleDemoView)).call(this, 'Views can be scaled'));

        _this.orangeView = new _View2.default();
        _this.orangeView.backgroundColor = 'orange';
        _this.addSubview(_this.orangeView);

        _this.blueView = new _View2.default();
        _this.blueView.backgroundColor = 'blue';
        _this.blueView.size.set(50, 50);
        _this.orangeView.addSubview(_this.blueView);

        _this.button = new _Button2.default('Scale It');
        _this.button.insets.setAll(10);
        _this.addSubview(_this.button);
        _this.button.on('tap', function () {
            // blueView will be scaled as well without explicitly doing so
            var newScale = _this.orangeView.scale.x === 1 ? 0.5 : 1;
            _this.orangeView.scale.set(newScale, newScale);
        });
        return _this;
    }

    _createClass(ScaleDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.orangeView.size.set(100, 100);
            this.orangeView.moveToCenterMiddle();

            this.blueView.moveToCenterMiddle();

            this.button.sizeToFit().moveToCenterMiddle().moveAbove(this.orangeView, -20);
        }
    }]);

    return ScaleDemoView;
}(_DemoView3.default);

exports.default = ScaleDemoView;

},{"./DemoView":14,"canvas_ui/Button":62,"canvas_ui/View":101}],40:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _lorem = require('./lorem');

var _lorem2 = _interopRequireDefault(_lorem);

var _ScrollableTextView = require('canvas_ui/ScrollableTextView');

var _ScrollableTextView2 = _interopRequireDefault(_ScrollableTextView);

var _SegmentView = require('canvas_ui/SegmentView');

var _SegmentView2 = _interopRequireDefault(_SegmentView);

var _Label = require('canvas_ui/Label');

var _Label2 = _interopRequireDefault(_Label);

var _Size = require('canvas_ui/Size');

var _Size2 = _interopRequireDefault(_Size);

var _fonts = require('canvas_ui/fonts');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ScrollableTextDemoView = function (_DemoView) {
    _inherits(ScrollableTextDemoView, _DemoView);

    function ScrollableTextDemoView() {
        _classCallCheck(this, ScrollableTextDemoView);

        var _this = _possibleConstructorReturn(this, (ScrollableTextDemoView.__proto__ || Object.getPrototypeOf(ScrollableTextDemoView)).call(this, 'Grab Scrolling and Word Wrapping'));

        _this.textView = new _ScrollableTextView2.default(_lorem2.default);
        _this.textView.id = 'lorem';
        _this.textView.font = (0, _fonts.SystemFontOfSize)(14);
        _this.textView.textView.lineHeight = Math.round(parseInt(_this.textView.font, 10) * 1.8);
        _this.textView.textView.insets.setAll(20);
        _this.textView.borderColor = '#eee';
        _this.textView.borderWidth = 1;
        _this.addSubview(_this.textView);

        _this.alignmentView = new _SegmentView2.default();
        _this.alignmentView.id = 'Alignment Choices';
        _this.alignmentView.choices = ['Left', 'Center', 'Right'];
        _this.alignmentView.selectedIndex = 0;
        _this.alignmentView.on('selectionChanged', function (index, text) {
            _this.textView.textView.textAlign = text.toLowerCase();
        });
        _this.addSubview(_this.alignmentView);

        _this.instructionsLabel = new _Label2.default('Grab and drag text to scroll');
        _this.instructionsLabel.id = 'Instructions';
        _this.instructionsLabel.font = (0, _fonts.SystemFontOfSize)(9);
        _this.instructionsLabel.textColor = '#bbb';
        _this.addSubview(_this.instructionsLabel);
        return _this;
    }

    _createClass(ScrollableTextDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.textView.contentSize = new _Size2.default(this.contentWidth / 2, 0);
            this.textView.size.set(this.contentWidth / 2, this.contentHeight / 2);
            this.textView.moveToCenterMiddle();

            this.alignmentView.sizeChoicesUniformWidest().sizeToFit().moveAbove(this.textView, -20).alignHorizontalCenter(this.textView);

            this.instructionsLabel.sizeToFit().moveBelow(this.textView, 10).alignHorizontalCenter(this.textView);
        }
    }]);

    return ScrollableTextDemoView;
}(_DemoView3.default);

exports.default = ScrollableTextDemoView;

},{"./DemoView":14,"./lorem":52,"canvas_ui/Label":75,"canvas_ui/ScrollableTextView":88,"canvas_ui/SegmentView":89,"canvas_ui/Size":90,"canvas_ui/fonts":103}],41:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _TableViewBasicDemoDataSource = require('./TableViewBasicDemoDataSource');

var _TableViewBasicDemoDataSource2 = _interopRequireDefault(_TableViewBasicDemoDataSource);

var _TableView = require('canvas_ui/TableView');

var _TableView2 = _interopRequireDefault(_TableView);

var _TableSearchView = require('canvas_ui/TableSearchView');

var _TableSearchView2 = _interopRequireDefault(_TableSearchView);

var _NotificationView = require('canvas_ui/NotificationView');

var _NotificationView2 = _interopRequireDefault(_NotificationView);

var _magic = require('canvas_ui/magic');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SearchableTableViewDemoView = function (_DemoView) {
    _inherits(SearchableTableViewDemoView, _DemoView);

    function SearchableTableViewDemoView() {
        _classCallCheck(this, SearchableTableViewDemoView);

        var _this = _possibleConstructorReturn(this, (SearchableTableViewDemoView.__proto__ || Object.getPrototypeOf(SearchableTableViewDemoView)).call(this, 'Searchable Table'));

        _this.tableView = new _TableView2.default(new _TableViewBasicDemoDataSource2.default(), _this);
        _this.addSubview(_this.tableView);

        _this.searchView = new _TableSearchView2.default(_this.tableView);
        _this.addSubview(_this.searchView);

        _this.searchView.backgroundColor = '#ddd';

        _this.searchActive = false;

        _this.searchView.on('searchBegin', function () {
            _this.searchActive = true;
            _this.searchView.height = _this.height;
        });

        _this.shortSearchViewHeight = _magic.FingerSizePoints + _this.searchView.insets.top + _this.searchView.insets.bottom;

        _this.searchView.on('searchEnd', function () {
            _this.searchActive = false;
            _this.searchView.height = _this.shortSearchViewHeight;
        });

        _this.searchView.on('cellSelected', function (index, cell) {
            var notification = new _NotificationView2.default('You selected ' + cell.title, 'info');
            _this.rootView.addSubview(notification);
        });
        return _this;
    }

    _createClass(SearchableTableViewDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            _get(SearchableTableViewDemoView.prototype.__proto__ || Object.getPrototypeOf(SearchableTableViewDemoView.prototype), 'layoutSubviews', this).call(this);

            this.searchView.frame.set(this.contentLeft, this.contentTop, this.contentWidth, this.searchActive ? this.height : this.shortSearchViewHeight);

            this.tableView.frame.set(this.contentLeft, this.shortSearchViewHeight, this.contentWidth, this.height - this.shortSearchViewHeight);
        }
    }, {
        key: 'heightForCellAtIndex',
        value: function heightForCellAtIndex() /*tableView, index*/{
            return 60;
        }
    }]);

    return SearchableTableViewDemoView;
}(_DemoView3.default);

exports.default = SearchableTableViewDemoView;

},{"./DemoView":14,"./TableViewBasicDemoDataSource":45,"canvas_ui/NotificationView":83,"canvas_ui/TableSearchView":94,"canvas_ui/TableView":95,"canvas_ui/magic":105}],42:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _View = require('canvas_ui/View');

var _View2 = _interopRequireDefault(_View);

var _SegmentView = require('canvas_ui/SegmentView');

var _SegmentView2 = _interopRequireDefault(_SegmentView);

var _Button = require('canvas_ui/Button');

var _Button2 = _interopRequireDefault(_Button);

var _Point = require('canvas_ui/Point');

var _Point2 = _interopRequireDefault(_Point);

var _Label = require('canvas_ui/Label');

var _Label2 = _interopRequireDefault(_Label);

var _magic = require('canvas_ui/magic');

var _Animation = require('canvas_ui/Animation');

var _Animation2 = _interopRequireDefault(_Animation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SegmentDemoView = function (_DemoView) {
    _inherits(SegmentDemoView, _DemoView);

    function SegmentDemoView() {
        _classCallCheck(this, SegmentDemoView);

        var _this = _possibleConstructorReturn(this, (SegmentDemoView.__proto__ || Object.getPrototypeOf(SegmentDemoView)).call(this, 'Segment/Choices'));

        _this.aView = new _View2.default();
        _this.aView.borderWidth = 1;
        _this.addSubview(_this.aView);

        _this.segmentView = new _SegmentView2.default();
        _this.segmentView.textColor = '#00f';
        _this.segmentView.borderWidth = 2;
        _this.segmentView.cornerRadius = 10;
        _this.segmentView.backgroundColor = '#fff';
        _this.segmentView.choices = ['White', 'Black', 'Red', 'Green', 'Blue', 'Cyan'];
        _this.segmentView.selectedIndex = 0;
        _this.segmentView.on('selectionChanged', function (index, text) {
            _this.segmentView.userInteractionEnabled = false;

            _this.aView.backgroundColor = text.toLowerCase();

            _this.aView.addAnimation({
                name: 'attention',
                target: _this.aView,
                endValues: { angle: Math.PI / 8 },
                startDelay: 100,
                autoReverse: true,
                playCount: 2,
                easing: _Animation2.default.easing.backEnd
            }).once('complete', function () {
                _this.segmentView.userInteractionEnabled = true;
            });
        });
        _this.addSubview(_this.segmentView);

        _this.choiceSizeMethod = 'uniform';

        _this.uniformButton = new _Button2.default('Uniform');
        _this.addSubview(_this.uniformButton);
        _this.uniformButton.on('tap', function () {
            _this.choiceSizeMethod = 'uniform';
            _this.needsLayout = true;
        });

        _this.uniformWidestButton = new _Button2.default('Uniform Widest');
        _this.addSubview(_this.uniformWidestButton);
        _this.uniformWidestButton.on('tap', function () {
            _this.choiceSizeMethod = 'uniformWidest';
            _this.needsLayout = true;
        });

        _this.varyingButton = new _Button2.default('Varying');
        _this.addSubview(_this.varyingButton);
        _this.varyingButton.on('tap', function () {
            _this.choiceSizeMethod = 'varying';
            _this.needsLayout = true;
        });

        _this.infoLabel = new _Label2.default();
        _this.addSubview(_this.infoLabel);
        return _this;
    }

    _createClass(SegmentDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            // Try resizing the container view (or test in a browser and resize its window)
            // to shrink the segment view and see what happens to the text of each choice.

            switch (this.choiceSizeMethod) {
                case 'uniform':
                    this.segmentView.size.set(Math.max(100, this.width - 100), _magic.FingerSizePoints);
                    this.segmentView.sizeChoicesUniform();

                    this.infoLabel.text = 'Choice width = segment width / N. Try resizing window...';
                    break;

                case 'uniformWidest':
                    this.segmentView.sizeChoicesUniformWidest().sizeToFit();
                    this.infoLabel.text = 'Choice width = width of widest choice';
                    break;

                case 'varying':
                    this.segmentView.sizeChoicesVarying().sizeToFit();
                    this.infoLabel.text = 'Choice width = own width';
                    break;
            }

            this.segmentView.moveToCenterMiddle();

            this.uniformButton.sizeToFit().moveToLeftBottom(new _Point2.default(10, -10));

            this.uniformWidestButton.sizeToFit().moveRightOf(this.uniformButton, 10).alignTop(this.uniformButton);

            this.varyingButton.sizeToFit().moveRightOf(this.uniformWidestButton, 10).alignTop(this.uniformButton);

            this.infoLabel.sizeToFit().moveAbove(this.uniformButton, -10).alignLeft(this.uniformButton);

            this.infoLabel.width = Math.min(this.contentWidth, this.infoLabel.width);

            this.aView.size.set(_magic.FingerSizePoints, _magic.FingerSizePoints);

            this.aView.moveBelow(this.segmentView, _magic.FingerSizePoints).alignHorizontalCenter(this.segmentView);
        }
    }]);

    return SegmentDemoView;
}(_DemoView3.default);

exports.default = SegmentDemoView;

},{"./DemoView":14,"canvas_ui/Animation":57,"canvas_ui/Button":62,"canvas_ui/Label":75,"canvas_ui/Point":85,"canvas_ui/SegmentView":89,"canvas_ui/View":101,"canvas_ui/magic":105}],43:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _Slider = require('canvas_ui/Slider');

var _Slider2 = _interopRequireDefault(_Slider);

var _magic = require('canvas_ui/magic');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SliderDemoView = function (_DemoView) {
    _inherits(SliderDemoView, _DemoView);

    function SliderDemoView() {
        _classCallCheck(this, SliderDemoView);

        var _this = _possibleConstructorReturn(this, (SliderDemoView.__proto__ || Object.getPrototypeOf(SliderDemoView)).call(this, 'Sliders'));

        _this.slider = new _Slider2.default({
            horizontal: true,
            value: 50,
            minValue: 0,
            maxValue: 100
        });
        _this.addSubview(_this.slider);

        _this.sliderV = new _Slider2.default({
            horizontal: false,
            value: 25,
            minValue: 0,
            maxValue: 100
        });
        _this.addSubview(_this.sliderV);
        return _this;
    }

    _createClass(SliderDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.slider.size.set(200, _magic.FingerSizePoints);
            this.sliderV.size.set(_magic.FingerSizePoints, 200);

            this.slider.moveToCenterMiddle();
            this.sliderV.moveToCenterMiddle().moveRightOf(this.slider, 20);
        }
    }]);

    return SliderDemoView;
}(_DemoView3.default);

exports.default = SliderDemoView;

},{"./DemoView":14,"canvas_ui/Slider":91,"canvas_ui/magic":105}],44:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _SliderDemoView = require('./SliderDemoView');

var _SliderDemoView2 = _interopRequireDefault(_SliderDemoView);

var _BorderDemoView = require('./BorderDemoView');

var _BorderDemoView2 = _interopRequireDefault(_BorderDemoView);

var _ScrollableTextDemoView = require('./ScrollableTextDemoView');

var _ScrollableTextDemoView2 = _interopRequireDefault(_ScrollableTextDemoView);

var _TabView = require('canvas_ui/TabView');

var _TabView2 = _interopRequireDefault(_TabView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TabDemoView = function (_DemoView) {
    _inherits(TabDemoView, _DemoView);

    function TabDemoView() {
        _classCallCheck(this, TabDemoView);

        var _this = _possibleConstructorReturn(this, (TabDemoView.__proto__ || Object.getPrototypeOf(TabDemoView)).call(this, 'Tabs'));

        _this.tabView = new _TabView2.default();
        _this.addSubview(_this.tabView); // add before adding tabs
        _this.tabView.addTab('Sliders', new _SliderDemoView2.default());
        _this.tabView.addTab('Borders', new _BorderDemoView2.default());
        _this.tabView.addTab('Word Wrapping', new _ScrollableTextDemoView2.default());
        _this.tabView.activeIndex = 0;
        return _this;
    }

    _createClass(TabDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.tabView.frame = this.bounds;
        }
    }]);

    return TabDemoView;
}(_DemoView3.default);

exports.default = TabDemoView;

},{"./BorderDemoView":7,"./DemoView":14,"./ScrollableTextDemoView":40,"./SliderDemoView":43,"canvas_ui/TabView":93}],45:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _TableViewCell = require('canvas_ui/TableViewCell');

var _TableViewCell2 = _interopRequireDefault(_TableViewCell);

var _TableViewDataSource2 = require('canvas_ui/TableViewDataSource');

var _TableViewDataSource3 = _interopRequireDefault(_TableViewDataSource2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TableViewBasicDemoDataSource = function (_TableViewDataSource) {
    _inherits(TableViewBasicDemoDataSource, _TableViewDataSource);

    function TableViewBasicDemoDataSource() {
        _classCallCheck(this, TableViewBasicDemoDataSource);

        var _this = _possibleConstructorReturn(this, (TableViewBasicDemoDataSource.__proto__ || Object.getPrototypeOf(TableViewBasicDemoDataSource)).call(this));

        _this.cellImage = new Image();
        _this.cellImage.src = 'assets/smiley.png';
        return _this;
    }

    _createClass(TableViewBasicDemoDataSource, [{
        key: 'numberOfItems',
        value: function numberOfItems() /*tableView*/{
            return 40;
        }
    }, {
        key: 'cellForItemAtIndex',
        value: function cellForItemAtIndex(tableView, index) {
            var cell = new _TableViewCell2.default(tableView, index);
            cell.title = 'Title # ' + index;
            cell.subtitle = 'Subtitle # ' + index;
            cell.image = this.cellImage;
            return cell;
        }
    }]);

    return TableViewBasicDemoDataSource;
}(_TableViewDataSource3.default);

exports.default = TableViewBasicDemoDataSource;

},{"canvas_ui/TableViewCell":96,"canvas_ui/TableViewDataSource":97}],46:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _TableViewBasicDemoDataSource = require('./TableViewBasicDemoDataSource');

var _TableViewBasicDemoDataSource2 = _interopRequireDefault(_TableViewBasicDemoDataSource);

var _TableView = require('canvas_ui/TableView');

var _TableView2 = _interopRequireDefault(_TableView);

var _TableViewCell = require('canvas_ui/TableViewCell');

var _TableViewCell2 = _interopRequireDefault(_TableViewCell);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TableViewBasicDemoView = function (_DemoView) {
    _inherits(TableViewBasicDemoView, _DemoView);

    function TableViewBasicDemoView() {
        _classCallCheck(this, TableViewBasicDemoView);

        var _this = _possibleConstructorReturn(this, (TableViewBasicDemoView.__proto__ || Object.getPrototypeOf(TableViewBasicDemoView)).call(this, 'Table View'));

        _this.tableView = new _TableView2.default(new _TableViewBasicDemoDataSource2.default(), _this);
        _this.addSubview(_this.tableView);
        return _this;
    }

    _createClass(TableViewBasicDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.tableView.frame = this.bounds;
        }
    }, {
        key: 'heightForCellAtIndex',
        value: function heightForCellAtIndex() /*tableView, index*/{
            return 80;
        }
    }, {
        key: 'didSelectItemAtIndex',
        value: function didSelectItemAtIndex(tableView, index, cell) {
            cell.accessoryType = cell.accessoryType === _TableViewCell2.default.AccessoryTypeCheck ? _TableViewCell2.default.AccessoryTypeNone : _TableViewCell2.default.AccessoryTypeCheck;
        }
    }]);

    return TableViewBasicDemoView;
}(_DemoView3.default);

exports.default = TableViewBasicDemoView;

},{"./DemoView":14,"./TableViewBasicDemoDataSource":45,"canvas_ui/TableView":95,"canvas_ui/TableViewCell":96}],47:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _Label = require('canvas_ui/Label');

var _Label2 = _interopRequireDefault(_Label);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TailTruncationDemoView = function (_DemoView) {
    _inherits(TailTruncationDemoView, _DemoView);

    function TailTruncationDemoView() {
        _classCallCheck(this, TailTruncationDemoView);

        var _this = _possibleConstructorReturn(this, (TailTruncationDemoView.__proto__ || Object.getPrototypeOf(TailTruncationDemoView)).call(this, 'Label Tail Truncation'));

        _this.label = new _Label2.default('Ellipsis added when text extends past insets.');
        _this.label.insets.setAll(10);
        _this.label.id = 'truncatedLabel';
        _this.addSubview(_this.label);
        _this.label._debugMode = true;
        return _this;
    }

    _createClass(TailTruncationDemoView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.label.sizeToFit();
            this.label.width = Math.min(this.width - 40, this.label.width);
            this.label.moveToCenterMiddle();
        }
    }, {
        key: 'wasAddedToView',
        value: function wasAddedToView() {
            _get(TailTruncationDemoView.prototype.__proto__ || Object.getPrototypeOf(TailTruncationDemoView.prototype), 'wasAddedToView', this).call(this);

            this.label.addAnimation({
                name: 'insets',
                target: this.label.insets,
                endValues: { right: 50 },
                duration: 1500,
                autoReverse: true,
                playCount: Infinity
            });
        }
    }]);

    return TailTruncationDemoView;
}(_DemoView3.default);

exports.default = TailTruncationDemoView;

},{"./DemoView":14,"canvas_ui/Label":75}],48:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _Label = require('canvas_ui/Label');

var _Label2 = _interopRequireDefault(_Label);

var _TextEditView = require('canvas_ui/TextEditView');

var _TextEditView2 = _interopRequireDefault(_TextEditView);

var _Button = require('canvas_ui/Button');

var _Button2 = _interopRequireDefault(_Button);

var _ScrollableTextView = require('canvas_ui/ScrollableTextView');

var _ScrollableTextView2 = _interopRequireDefault(_ScrollableTextView);

var _KeyboardView = require('canvas_ui/KeyboardView');

var KeyboardView = _interopRequireWildcard(_KeyboardView);

var _NotificationView = require('canvas_ui/NotificationView');

var _NotificationView2 = _interopRequireDefault(_NotificationView);

var _AlertView = require('canvas_ui/AlertView');

var _AlertView2 = _interopRequireDefault(_AlertView);

var _fonts = require('canvas_ui/fonts');

var _magic = require('canvas_ui/magic');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TextEditDemoView = function (_DemoView) {
    _inherits(TextEditDemoView, _DemoView);

    function TextEditDemoView() {
        _classCallCheck(this, TextEditDemoView);

        var _this = _possibleConstructorReturn(this, (TextEditDemoView.__proto__ || Object.getPrototypeOf(TextEditDemoView)).call(this, 'Edit text and soft keyboard'));

        _this.lengthLabel = new _Label2.default('');
        _this.lengthLabel.textColor = '#ddd';
        _this.addSubview(_this.lengthLabel);

        _this.textEdit = new _TextEditView2.default();
        _this.textEdit.placeholder = 'Your name here';
        _this.textEdit.maxLength = 128;
        _this.textEdit.on('enter', _this.handleSubmit.bind(_this));
        _this.textEdit.on('textChanged', function () {
            if (_this.textEdit.maxLength > 0) {
                _this.lengthLabel.text = '' + (_this.textEdit.maxLength - _this.textEdit.text.length);
                _this.needsLayout = true;
            }
        });
        _this.addSubview(_this.textEdit);

        _this.helloButton = new _Button2.default('Greet');
        _this.addSubview(_this.helloButton);
        _this.helloButton.on('tap', _this.handleSubmit.bind(_this));

        _this.shortcutsButton = new _Button2.default('?');
        _this.addSubview(_this.shortcutsButton);
        _this.shortcutsButton.on('tap', function () {
            _this.messageView.hidden = !_this.messageView.hidden;
        });

        var shortcuts = _lodash2.default.map(_TextEditView2.default.keyBindings, function (operation, shortcut) {
            return shortcut + ': ' + _lodash2.default.snakeCase(operation.name).replace(/_/g, ' ');
        }).join('\n');
        _this.messageView = new _ScrollableTextView2.default(shortcuts);
        _this.messageView.textView.font = (0, _fonts.SystemFontOfSize)(9);
        _this.messageView.hidden = true;
        _this.addSubview(_this.messageView);
        return _this;
    }

    _createClass(TextEditDemoView, [{
        key: 'handleSubmit',
        value: function handleSubmit() {
            var kbd = KeyboardView.instance(false);
            if (kbd) {
                kbd.hide(true, this.greet.bind(this));
            } else {
                this.greet();
            }
        }
    }, {
        key: 'greet',
        value: function greet() {
            var _this2 = this;

            var name = this.textEdit.text.trim();
            if (name.length === 0) {
                var notification = new _NotificationView2.default('Please enter your name', 'error');
                this.rootView.addSubview(notification);
            } else {
                var alertView = new _AlertView2.default('Greetings', 'Hello, ' + name + '!');
                alertView.on('removedFromSuperview', function () {
                    _this2.textEdit.becomeFirstResponder();
                });
                this.rootView.addSubview(alertView);
            }
        }
    }, {
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            _get(TextEditDemoView.prototype.__proto__ || Object.getPrototypeOf(TextEditDemoView.prototype), 'layoutSubviews', this).call(this);

            this.textEdit.size.set(this.width / 2, _magic.FingerSizePoints);
            this.textEdit.moveToCenterMiddle().bottom = this.height - 100;

            this.lengthLabel.sizeToFit().moveRightOf(this.textEdit, 10).alignVerticalCenter(this.textEdit);

            this.helloButton.sizeToFit().moveBelow(this.textEdit, 10).alignLeft(this.textEdit);

            this.shortcutsButton.sizeToFit().moveBelow(this.textEdit, 10).moveRightOf(this.helloButton, 10);

            this.messageView.contentSize.set(this.textEdit.width, 0);
            this.messageView.size.set(this.textEdit.width, this.height / 2);
            this.messageView.moveAbove(this.textEdit, -20).alignLeft(this.helloButton);
        }
    }]);

    return TextEditDemoView;
}(_DemoView3.default);

exports.default = TextEditDemoView;

},{"./DemoView":14,"canvas_ui/AlertView":55,"canvas_ui/Button":62,"canvas_ui/KeyboardView":74,"canvas_ui/Label":75,"canvas_ui/NotificationView":83,"canvas_ui/ScrollableTextView":88,"canvas_ui/TextEditView":98,"canvas_ui/fonts":103,"canvas_ui/magic":105,"lodash":53}],49:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _DemoView2 = require('./DemoView');

var _DemoView3 = _interopRequireDefault(_DemoView2);

var _TableView = require('canvas_ui/TableView');

var _TableView2 = _interopRequireDefault(_TableView);

var _TableViewCell2 = require('canvas_ui/TableViewCell');

var _TableViewCell3 = _interopRequireDefault(_TableViewCell2);

var _Button = require('canvas_ui/Button');

var _Button2 = _interopRequireDefault(_Button);

var _magic = require('canvas_ui/magic');

var _TextEditView2 = require('canvas_ui/TextEditView');

var _TextEditView3 = _interopRequireDefault(_TextEditView2);

var _KeyboardView = require('canvas_ui/KeyboardView');

var KeyboardView = _interopRequireWildcard(_KeyboardView);

var _fonts = require('canvas_ui/fonts');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TextEditInTableViewCell = function (_TextEditView) {
    _inherits(TextEditInTableViewCell, _TextEditView);

    function TextEditInTableViewCell() {
        _classCallCheck(this, TextEditInTableViewCell);

        return _possibleConstructorReturn(this, (TextEditInTableViewCell.__proto__ || Object.getPrototypeOf(TextEditInTableViewCell)).apply(this, arguments));
    }

    _createClass(TextEditInTableViewCell, [{
        key: 'stylizeAsNormal',
        value: function stylizeAsNormal() {
            this.borderWidth = 0;
            this.insets.setAll(0);
        }
    }]);

    return TextEditInTableViewCell;
}(_TextEditView3.default);

var TodoTableViewCell = function (_TableViewCell) {
    _inherits(TodoTableViewCell, _TableViewCell);

    function TodoTableViewCell(tableView, index) {
        _classCallCheck(this, TodoTableViewCell);

        var _this2 = _possibleConstructorReturn(this, (TodoTableViewCell.__proto__ || Object.getPrototypeOf(TodoTableViewCell)).call(this, tableView, index));

        _this2._titleLabel.hidden = true;
        _this2._subtitleLabel.hidden = true;

        _this2.textEdit = new TextEditInTableViewCell();
        _this2.textEdit.userInteractionEnabled = false;
        _this2.textEdit.on('textChanged', function () {
            _this2.emit('itemUpdated', _this2._index, _this2.textEdit.text);
        });
        _this2.textEdit.on('enter', function () {
            _this2.textEdit.resignFirstResponder();
            _this2.emit('itemEditCompleted', _this2._index);
        });
        _this2.textEdit.on('didBecomeFirstResponder', function () {
            _this2._accessoryView.hidden = true;
        });
        _this2.textEdit.on('didResignFirstResponder', function () {
            _this2.textEdit.userInteractionEnabled = false;
            KeyboardView.instance().hide();
            if (_this2.textEdit.text.trim().length === 0) {
                _this2.emit('itemCompleted', _this2._index);
            } else {
                _this2._accessoryView.hidden = false;
                _this2.emit('itemEditCompleted', _this2._index);
            }
        });
        _this2.addSubview(_this2.textEdit);

        _this2._accessoryView.removeFromSuperview();
        _this2._accessoryView = new _Button2.default('✓');
        _this2._accessoryView.font = (0, _fonts.BoldSystemFontOfSize)(22);
        _this2._accessoryView.borderWidth = 0;
        _this2._accessoryView.backgroundColor = 'red';
        _this2._accessoryView.textColor = 'white';
        _this2._accessoryView.id = 'accessory';
        _this2._accessoryView.size.set(_magic.FingerSizePoints, _magic.FingerSizePoints);
        _this2.addSubview(_this2._accessoryView);
        _this2._accessoryView.on('tap', function () {
            _this2.emit('itemCompleted', _this2._index);
        });
        return _this2;
    }

    _createClass(TodoTableViewCell, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            _get(TodoTableViewCell.prototype.__proto__ || Object.getPrototypeOf(TodoTableViewCell.prototype), 'layoutSubviews', this).call(this);
            this._accessoryView.size.set(_magic.FingerSizePoints, _magic.FingerSizePoints);
            this.textEdit.frame = this._titleLabel.frame;
        }
    }]);

    return TodoTableViewCell;
}(_TableViewCell3.default);

var TodoDemoView = function (_DemoView) {
    _inherits(TodoDemoView, _DemoView);

    function TodoDemoView() {
        _classCallCheck(this, TodoDemoView);

        var _this3 = _possibleConstructorReturn(this, (TodoDemoView.__proto__ || Object.getPrototypeOf(TodoDemoView)).call(this, 'To Do List'));

        _this3.items = ['Get eggs', 'Wash the car', 'Take trash out'];
        _this3.loadItems();

        _this3.tableView = new _TableView2.default(_this3, _this3);
        _this3.addSubview(_this3.tableView);
        _this3.tableView.on('tap', function () {
            // Take focus away from an item being edited.
            _this3.tableView.becomeFirstResponder();
        });

        _this3.tableView.on('keyPressed', function (key) {
            if (key === 'Enter') {
                _this3.addNewItem();
            }
        });

        var addButton = new _Button2.default('+ Add Item');
        addButton.textColor = '#333';
        addButton.cornerRadius = 0;
        addButton.borderWidth = 0;
        addButton.on('tap', _this3.addNewItem.bind(_this3));
        _this3.tableView.headerView = addButton;
        return _this3;
    }

    _createClass(TodoDemoView, [{
        key: 'wasAddedToView',
        value: function wasAddedToView() {
            _get(TodoDemoView.prototype.__proto__ || Object.getPrototypeOf(TodoDemoView.prototype), 'wasAddedToView', this).call(this);
            this.tableView.becomeFirstResponder();
        }
    }, {
        key: 'loadItems',
        value: function loadItems() {
            if (localStorage) {
                try {
                    if (localStorage.todoItems) {
                        this.items = JSON.parse(localStorage.todoItems);
                    }
                } catch (e) {
                    console.error('stored todo items are invalid:', e);
                }
            }
        }
    }, {
        key: 'saveItems',
        value: function saveItems() {
            if (localStorage) {
                localStorage.todoItems = JSON.stringify(this.items);
            }
        }
    }, {
        key: 'addNewItem',
        value: function addNewItem() {
            var _this4 = this;

            this.items.push('');
            this.saveItems();
            this.tableView.reload(false, function () {
                var textEdit = _lodash2.default.last(_this4.tableView.contentView.subviews).textEdit;
                textEdit.userInteractionEnabled = true;
                textEdit.becomeFirstResponder();
                textEdit.moveToEnd();
            });
        }
    }, {
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            _get(TodoDemoView.prototype.__proto__ || Object.getPrototypeOf(TodoDemoView.prototype), 'layoutSubviews', this).call(this);
            this.tableView.headerView.height = _magic.FingerSizePoints;
            this.tableView.frame = this.bounds;
        }

        // Table view data source

    }, {
        key: 'load',
        value: function load(tableView, complete) {
            complete();
        }
    }, {
        key: 'numberOfItems',
        value: function numberOfItems() /*tableView*/{
            return this.items.length;
        }
    }, {
        key: 'cellForItemAtIndex',
        value: function cellForItemAtIndex(tableView, index) {
            var _this5 = this;

            var item = this.items[index];

            var cell = new TodoTableViewCell(tableView, index);
            cell.textEdit.text = item;

            cell.on('itemUpdated', function (index, item) {
                _this5.items[index] = item;
                _this5.saveItems();
            });

            cell.on('itemCompleted', function (index) {
                _this5.removeItemAtIndex(tableView, index);
                tableView.reload(false);
            });

            cell.on('itemEditCompleted', function () /*index*/{
                _this5.addNewItem();
            });

            return cell;
        }
    }, {
        key: 'moveItem',
        value: function moveItem(tableView, fromIndex, toIndex) {
            if (fromIndex === toIndex) {
                return;
            }

            this.items.splice(toIndex, 0, this.items.splice(fromIndex, 1)[0]);
            this.saveItems();
        }
    }, {
        key: 'removeItemAtIndex',
        value: function removeItemAtIndex(tableView, index) {
            this.items.splice(index, 1);
            this.saveItems();
        }

        // Table view delegate

    }, {
        key: 'heightForCellAtIndex',
        value: function heightForCellAtIndex() /*tableView, index*/{
            return Math.round(_magic.FingerSizePoints * 1.5);
        }
    }, {
        key: 'didSelectItemAtIndex',
        value: function didSelectItemAtIndex(tableView, index, cell) {
            cell.textEdit.userInteractionEnabled = true;
            cell.textEdit.becomeFirstResponder();
            cell.textEdit.moveToEnd();
        }
    }, {
        key: 'canMoveItem',
        value: function canMoveItem() /*tableView, fromIndex, toIndex*/{
            return true;
        }
    }, {
        key: 'canRemoveItem',
        value: function canRemoveItem() /*tableView, atIndex*/{
            return true;
        }
    }]);

    return TodoDemoView;
}(_DemoView3.default);

exports.default = TodoDemoView;

},{"./DemoView":14,"canvas_ui/Button":62,"canvas_ui/KeyboardView":74,"canvas_ui/TableView":95,"canvas_ui/TableViewCell":96,"canvas_ui/TextEditView":98,"canvas_ui/fonts":103,"canvas_ui/magic":105,"lodash":53}],50:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _PagingDemoView2 = require('./PagingDemoView');

var _PagingDemoView3 = _interopRequireDefault(_PagingDemoView2);

var _Size = require('canvas_ui/Size');

var _Size2 = _interopRequireDefault(_Size);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var VerticalPagingDemoView = function (_PagingDemoView) {
    _inherits(VerticalPagingDemoView, _PagingDemoView);

    function VerticalPagingDemoView() {
        _classCallCheck(this, VerticalPagingDemoView);

        return _possibleConstructorReturn(this, (VerticalPagingDemoView.__proto__ || Object.getPrototypeOf(VerticalPagingDemoView)).call(this, 'Vertical Paging'));
    }

    _createClass(VerticalPagingDemoView, [{
        key: 'layoutPages',
        value: function layoutPages() {
            var pageHeight = this.height,
                pageWidth = this.width;

            _lodash2.default.each(this.scrollView.contentView.subviews, function (page, index) {
                page.frame.set(0, pageHeight * index, pageWidth, pageHeight);
            });

            this.scrollView.contentSize = new _Size2.default(pageWidth, pageHeight * this.scrollView.contentView.subviews.length);
        }
    }]);

    return VerticalPagingDemoView;
}(_PagingDemoView3.default);

exports.default = VerticalPagingDemoView;

},{"./PagingDemoView":35,"canvas_ui/Size":90,"lodash":53}],51:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _View2 = require('canvas_ui/View');

var _View3 = _interopRequireDefault(_View2);

var _Label = require('canvas_ui/Label');

var _Label2 = _interopRequireDefault(_Label);

var _Button = require('canvas_ui/Button');

var _Button2 = _interopRequireDefault(_Button);

var _KeyboardView = require('canvas_ui/KeyboardView');

var KeyboardView = _interopRequireWildcard(_KeyboardView);

var _ModalView = require('canvas_ui/ModalView');

var _ModalView2 = _interopRequireDefault(_ModalView);

var _fonts = require('canvas_ui/fonts');

var _core = require('canvas_ui/core');

var _IntroDemoView = require('./IntroDemoView');

var _IntroDemoView2 = _interopRequireDefault(_IntroDemoView);

var _BasicViewDemoView = require('./BasicViewDemoView');

var _BasicViewDemoView2 = _interopRequireDefault(_BasicViewDemoView);

var _BorderDemoView = require('./BorderDemoView');

var _BorderDemoView2 = _interopRequireDefault(_BorderDemoView);

var _CornerRadiusDemoView = require('./CornerRadiusDemoView');

var _CornerRadiusDemoView2 = _interopRequireDefault(_CornerRadiusDemoView);

var _ScaleDemoView = require('./ScaleDemoView');

var _ScaleDemoView2 = _interopRequireDefault(_ScaleDemoView);

var _AngleDemoView = require('./AngleDemoView');

var _AngleDemoView2 = _interopRequireDefault(_AngleDemoView);

var _AlphaDemoView = require('./AlphaDemoView');

var _AlphaDemoView2 = _interopRequireDefault(_AlphaDemoView);

var _AnimationDemoView = require('./AnimationDemoView');

var _AnimationDemoView2 = _interopRequireDefault(_AnimationDemoView);

var _LabelAlignmentDemoView = require('./LabelAlignmentDemoView');

var _LabelAlignmentDemoView2 = _interopRequireDefault(_LabelAlignmentDemoView);

var _LabelStylingDemoView = require('./LabelStylingDemoView');

var _LabelStylingDemoView2 = _interopRequireDefault(_LabelStylingDemoView);

var _TailTruncationDemoView = require('./TailTruncationDemoView');

var _TailTruncationDemoView2 = _interopRequireDefault(_TailTruncationDemoView);

var _ButtonDemoView = require('./ButtonDemoView');

var _ButtonDemoView2 = _interopRequireDefault(_ButtonDemoView);

var _HitTestDemoView = require('./HitTestDemoView');

var _HitTestDemoView2 = _interopRequireDefault(_HitTestDemoView);

var _ScrollableTextDemoView = require('./ScrollableTextDemoView');

var _ScrollableTextDemoView2 = _interopRequireDefault(_ScrollableTextDemoView);

var _GridDemoView = require('./GridDemoView');

var _GridDemoView2 = _interopRequireDefault(_GridDemoView);

var _ProgressBarDemoView = require('./ProgressBarDemoView');

var _ProgressBarDemoView2 = _interopRequireDefault(_ProgressBarDemoView);

var _SliderDemoView = require('./SliderDemoView');

var _SliderDemoView2 = _interopRequireDefault(_SliderDemoView);

var _SegmentDemoView = require('./SegmentDemoView');

var _SegmentDemoView2 = _interopRequireDefault(_SegmentDemoView);

var _TextEditDemoView = require('./TextEditDemoView');

var _TextEditDemoView2 = _interopRequireDefault(_TextEditDemoView);

var _RegistrationDemoView = require('./RegistrationDemoView');

var _RegistrationDemoView2 = _interopRequireDefault(_RegistrationDemoView);

var _ImageStretchDemoView = require('./ImageStretchDemoView');

var _ImageStretchDemoView2 = _interopRequireDefault(_ImageStretchDemoView);

var _ImageScaleAspectFitDemoView = require('./ImageScaleAspectFitDemoView');

var _ImageScaleAspectFitDemoView2 = _interopRequireDefault(_ImageScaleAspectFitDemoView);

var _ImageScaleAspectFillDemoView = require('./ImageScaleAspectFillDemoView');

var _ImageScaleAspectFillDemoView2 = _interopRequireDefault(_ImageScaleAspectFillDemoView);

var _ActivityIndicatorDemoView = require('./ActivityIndicatorDemoView');

var _ActivityIndicatorDemoView2 = _interopRequireDefault(_ActivityIndicatorDemoView);

var _AlertDemoView = require('./AlertDemoView');

var _AlertDemoView2 = _interopRequireDefault(_AlertDemoView);

var _NotificationDemoView = require('./NotificationDemoView');

var _NotificationDemoView2 = _interopRequireDefault(_NotificationDemoView);

var _CandyButtonDemoView = require('./CandyButtonDemoView');

var _CandyButtonDemoView2 = _interopRequireDefault(_CandyButtonDemoView);

var _TabDemoView = require('./TabDemoView');

var _TabDemoView2 = _interopRequireDefault(_TabDemoView);

var _NavigationDemoView = require('./NavigationDemoView');

var _NavigationDemoView2 = _interopRequireDefault(_NavigationDemoView);

var _DragAndDropBaseDemoView = require('./DragAndDropBaseDemoView');

var _DragAndDropBaseDemoView2 = _interopRequireDefault(_DragAndDropBaseDemoView);

var _DragAndDropConstraintDemoView = require('./DragAndDropConstraintDemoView');

var _DragAndDropConstraintDemoView2 = _interopRequireDefault(_DragAndDropConstraintDemoView);

var _DragAndDropDemoView = require('./DragAndDropDemoView');

var _DragAndDropDemoView2 = _interopRequireDefault(_DragAndDropDemoView);

var _HorizontalPagingDemoView = require('./HorizontalPagingDemoView');

var _HorizontalPagingDemoView2 = _interopRequireDefault(_HorizontalPagingDemoView);

var _VerticalPagingDemoView = require('./VerticalPagingDemoView');

var _VerticalPagingDemoView2 = _interopRequireDefault(_VerticalPagingDemoView);

var _TableViewBasicDemoView = require('./TableViewBasicDemoView');

var _TableViewBasicDemoView2 = _interopRequireDefault(_TableViewBasicDemoView);

var _EditableTableViewDemoView = require('./EditableTableViewDemoView');

var _EditableTableViewDemoView2 = _interopRequireDefault(_EditableTableViewDemoView);

var _SearchableTableViewDemoView = require('./SearchableTableViewDemoView');

var _SearchableTableViewDemoView2 = _interopRequireDefault(_SearchableTableViewDemoView);

var _TodoDemoView = require('./TodoDemoView');

var _TodoDemoView2 = _interopRequireDefault(_TodoDemoView);

var _PaintDemoView = require('./PaintDemoView');

var _PaintDemoView2 = _interopRequireDefault(_PaintDemoView);

var _CountryFlagsDemoView = require('./CountryFlagsDemoView');

var _CountryFlagsDemoView2 = _interopRequireDefault(_CountryFlagsDemoView);

var _PackedImageDemoView = require('./PackedImageDemoView');

var _PackedImageDemoView2 = _interopRequireDefault(_PackedImageDemoView);

var _ColorPickerDemoView = require('./ColorPickerDemoView');

var _ColorPickerDemoView2 = _interopRequireDefault(_ColorPickerDemoView);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var demoClassList = [_IntroDemoView2.default, _BasicViewDemoView2.default, _BorderDemoView2.default, _CornerRadiusDemoView2.default, _ScaleDemoView2.default, _AngleDemoView2.default, _AlphaDemoView2.default, _AnimationDemoView2.default, _LabelAlignmentDemoView2.default, _LabelStylingDemoView2.default, _TailTruncationDemoView2.default, _ButtonDemoView2.default, _HitTestDemoView2.default, _ScrollableTextDemoView2.default, _GridDemoView2.default, _ProgressBarDemoView2.default, _SliderDemoView2.default, _SegmentDemoView2.default, _TextEditDemoView2.default, _RegistrationDemoView2.default, _ImageStretchDemoView2.default, _ImageScaleAspectFitDemoView2.default, _ImageScaleAspectFillDemoView2.default, _ActivityIndicatorDemoView2.default, _AlertDemoView2.default, _NotificationDemoView2.default, _CandyButtonDemoView2.default, _TabDemoView2.default, _NavigationDemoView2.default, _DragAndDropBaseDemoView2.default, _DragAndDropConstraintDemoView2.default, _DragAndDropDemoView2.default, _HorizontalPagingDemoView2.default, _VerticalPagingDemoView2.default, _TableViewBasicDemoView2.default, _EditableTableViewDemoView2.default, _SearchableTableViewDemoView2.default, _TodoDemoView2.default, _PaintDemoView2.default, _CountryFlagsDemoView2.default, _PackedImageDemoView2.default, _ColorPickerDemoView2.default];

/**
 * A view that shows a demo contained in a centered view
 * with navigational buttons to show other demos.
 */

var DemoContainerView = function (_View) {
    _inherits(DemoContainerView, _View);

    function DemoContainerView() {
        _classCallCheck(this, DemoContainerView);

        var _this = _possibleConstructorReturn(this, (DemoContainerView.__proto__ || Object.getPrototypeOf(DemoContainerView)).call(this));

        _this.commonMargin = 20;

        _this.titleLabel = new _Label2.default('Demo Title');
        _this.titleLabel.id = 'titleLabel';
        _this.titleLabel.font = (0, _fonts.BoldSystemFontOfSize)(14);
        _this.titleLabel.textAlign = 'center';
        _this.titleLabel.insets.left = 10;
        _this.titleLabel.insets.right = 10;
        _this.addSubview(_this.titleLabel);

        _this.prevButton = new _Button2.default('Previous');
        _this.prevButton.id = 'prevButton';
        _this.addSubview(_this.prevButton);

        _this.nextButton = new _Button2.default('Next');
        _this.nextButton.id = 'nextButton';
        _this.addSubview(_this.nextButton);

        _this.container = new _View3.default();
        _this.container.id = 'demoContainer';
        _this.container.borderWidth = 1;
        _this.container.borderColor = '#aaa';
        _this.container.backgroundColor = '#eee';
        _this.addSubview(_this.container);

        _this.prevButton.on('tap', function () {
            return _this.prevDemo();
        });
        _this.nextButton.on('tap', function () {
            return _this.nextDemo();
        });

        if (localStorage) {
            _this.demoIndex = parseInt(localStorage.lastDemoIndex, 10) || 0;
        } else {
            _this.demoIndex = 0;
        }

        _this.demoIndex = _this.demoIndex % demoClassList.length;

        _this.setDemoFromCurrentState();
        return _this;
    }

    _createClass(DemoContainerView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.prevButton.sizeToFit().moveToLeftTop({ x: this.commonMargin, y: this.commonMargin });

            this.nextButton.makeSameSize(this.prevButton).moveToRightTop({ x: -this.commonMargin, y: this.commonMargin });

            this.titleLabel.frame.set(this.prevButton.right, this.prevButton.top, this.nextButton.left - this.prevButton.right, this.prevButton.height);

            this.container.frame.set(this.commonMargin, this.titleLabel.bottom + this.commonMargin, this.width - this.commonMargin * 2, this.height - this.titleLabel.bottom - this.commonMargin * 2);

            this.currentDemoInstance.frame = this.container.contentFrame;

            _lodash2.default.each(this.subviews, function (subview) {
                if (subview instanceof _ModalView2.default) {
                    subview.needsLayout = true;
                }
            });
        }
    }, {
        key: 'prevDemo',
        value: function prevDemo() {
            if (--this.demoIndex === -1) {
                this.demoIndex = demoClassList.length - 1;
            }

            this.setDemoFromCurrentState();
        }
    }, {
        key: 'nextDemo',
        value: function nextDemo() {
            this.demoIndex = (this.demoIndex + 1) % demoClassList.length;
            this.setDemoFromCurrentState();
        }
    }, {
        key: 'setDemoFromCurrentState',
        value: function setDemoFromCurrentState() {
            if (localStorage) {
                localStorage.lastDemoIndex = this.demoIndex;
            }

            if (this.currentDemoInstance) {
                this.currentDemoInstance.removeFromSuperview();

                var kbd = KeyboardView.instance(false);
                if (kbd) {
                    kbd.hide();
                }
            }

            this.currentDemoInstance = new demoClassList[this.demoIndex]();
            this.container.addSubview(this.currentDemoInstance);

            this.titleLabel.text = this.currentDemoInstance.title;

            this.currentDemoInstance.needsLayout = true;
            this.needsLayout = true;
        }
    }]);

    return DemoContainerView;
}(_View3.default);

document.addEventListener('DOMContentLoaded', function () {
    setTimeout(function () {
        (0, _core.initCanvasUI)(DemoContainerView);
    }, 0);
}, false);

},{"./ActivityIndicatorDemoView":1,"./AlertDemoView":2,"./AlphaDemoView":3,"./AngleDemoView":4,"./AnimationDemoView":5,"./BasicViewDemoView":6,"./BorderDemoView":7,"./ButtonDemoView":8,"./CandyButtonDemoView":9,"./ColorPickerDemoView":10,"./CornerRadiusDemoView":11,"./CountryFlagsDemoView":12,"./DragAndDropBaseDemoView":15,"./DragAndDropConstraintDemoView":16,"./DragAndDropDemoView":17,"./EditableTableViewDemoView":21,"./GridDemoView":22,"./HitTestDemoView":23,"./HorizontalPagingDemoView":24,"./ImageScaleAspectFillDemoView":25,"./ImageScaleAspectFitDemoView":26,"./ImageStretchDemoView":27,"./IntroDemoView":28,"./LabelAlignmentDemoView":29,"./LabelStylingDemoView":30,"./NavigationDemoView":32,"./NotificationDemoView":33,"./PackedImageDemoView":34,"./PaintDemoView":36,"./ProgressBarDemoView":37,"./RegistrationDemoView":38,"./ScaleDemoView":39,"./ScrollableTextDemoView":40,"./SearchableTableViewDemoView":41,"./SegmentDemoView":42,"./SliderDemoView":43,"./TabDemoView":44,"./TableViewBasicDemoView":46,"./TailTruncationDemoView":47,"./TextEditDemoView":48,"./TodoDemoView":49,"./VerticalPagingDemoView":50,"canvas_ui/Button":62,"canvas_ui/KeyboardView":74,"canvas_ui/Label":75,"canvas_ui/ModalView":77,"canvas_ui/View":101,"canvas_ui/core":102,"canvas_ui/fonts":103,"lodash":53}],52:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var loremIpsumText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor. Praesent et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt congue enim, ut porta lorem lacinia consectetur. Donec ut libero sed arcu vehicula ultricies a non tortor. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ut gravida lorem. Ut turpis felis, pulvinar a semper sed, adipiscing id dolor. Pellentesque auctor nisi id magna consequat sagittis. Curabitur dapibus enim sit amet elit pharetra tincidunt feugiat nisl imperdiet. Ut convallis libero in urna ultrices accumsan. Donec sed odio eros. Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In rutrum accumsan ultricies. Mauris vitae nisi at sem facilisis semper ac in est.\n\nVivamus fermentum semper porta. Nunc diam velit, adipiscing ut tristique vitae, sagittis vel odio. Maecenas convallis ullamcorper ultricies. Curabitur ornare, ligula semper consectetur sagittis, nisi diam iaculis velit, id fringilla sem nunc vel mi. Nam dictum, odio nec pretium volutpat, arcu ante moverat erat, non tristique elit urna et turpis. Quisque mi metus, ornare sit amet fermentum et, tincidunt et orci. Fusce eget orci a orci congue vestibulum. Ut dolor diam, elementum et vestibulum eu, porttitor vel elit. Curabitur venenatis pulvinar tellus gravida ornare. Sed et erat faucibus nunc euismod ultricies ut id justo. Nullam cursus suscipit nisi, et ultrices justo sodales nec. Fusce venenatis facilisis lectus ac semper. Aliquam at massa ipsum. Quisque bibendum purus convallis nulla ultrices ultricies. Nullam aliquam, mi eu aliquam tincidunt, purus velit laoreet tortor, viverra pretium nisi quam vitae mi. Fusce vel volutpat elit. Nam sagittis nisi dui.\n\nSuspendisse lectus leo, consectetur in tempor sit amet, moverat quis neque. Etiam luctus porttitor lorem, sed suscipit est rutrum non. Curabitur lobortis nisl a enim congue semper. Aenean commodo ultrices imperdiet. Vestibulum ut justo vel sapien venenatis tincidunt. Phasellus eget dolor sit amet ipsum dapibus condimentum vitae quis lectus. Aliquam ut massa in turpis dapibus convallis. Praesent elit lacus, vestibulum at malesuada et, ornare et est. Ut augue nunc, sodales ut euismod non, adipiscing vitae orci. Mauris ut moverat justo. Mauris in ultricies enim. Quisque nec est eleifend nulla ultrices egestas quis ut quam. Donec sollicitudin lectus a mauris pulvinar id aliquam urna cursus. Cras quis ligula sem, vel elementum mi. Phasellus non ullamcorper urna.";

exports.default = loremIpsumText;

},{}],53:[function(require,module,exports){
(function (global){(function (){
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],54:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if ("value" in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A view which shows an animated set of lines to indicate
 * to the user that "something is happening, please wait".
 *
 * Initially is not animated; set `animating` to true when
 * ready to animate.
 */

var ActivityIndicatorView = function (_View) {
    _inherits(ActivityIndicatorView, _View);

    function ActivityIndicatorView() {
        _classCallCheck(this, ActivityIndicatorView);

        var _this = _possibleConstructorReturn(this, (ActivityIndicatorView.__proto__ || Object.getPrototypeOf(ActivityIndicatorView)).call(this));

        _this.userInteractionEnabled = false;

        _this._lineCount = 360 / 24;
        _this._lineColor = '#333';
        _this._lineLengthPercent = 0.5;
        _this._lineWidth = 2;
        _this._startAngle = 0;
        _this._animating = false;
        return _this;
    }

    _createClass(ActivityIndicatorView, [{
        key: 'draw',
        value: function draw(context) {
            _get(ActivityIndicatorView.prototype.__proto__ || Object.getPrototypeOf(ActivityIndicatorView.prototype), 'draw', this).call(this, context);

            var center = this.center,
                r = Math.min(this.contentWidth, this.contentHeight) / 2,
                angleStep = 2 * Math.PI / this.lineCount,
                len = Math.min(1, Math.max(0, this.lineLengthPercent));

            context.beginPath();

            for (var i = 0, angle = this.startAngle; i < this.lineCount; angle += angleStep, ++i) {

                var s = Math.sin(angle),
                    c = Math.cos(angle);

                context.moveTo(center.x + c * r * len, center.y - s * r * len);

                context.lineTo(center.x + c * r, center.y - s * r);
            }

            context.closePath();
            context.lineWidth = Math.max(1, this.lineWidth);
            context.strokeStyle = this.lineColor;
            context.stroke();
        }
    }, {
        key: 'lineCount',
        get: function get() {
            return this._lineCount;
        },
        set: function set(n) {
            if (_lodash2.default.isFinite(n) && n > 0 && n !== this._lineCount) {
                this._lineCount = n;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'lineColor',
        get: function get() {
            return this._lineColor;
        },
        set: function set(color) {
            if (_lodash2.default.isString(color) && this._lineColor !== color) {
                this._lineColor = color;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'lineLengthPercent',
        get: function get() {
            return this._lineLengthPercent;
        },
        set: function set(p) {
            if (_lodash2.default.isFinite(p)) {
                p = Math.max(0, Math.min(1, p));
                this._lineLengthPercent = p;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'lineWidth',
        get: function get() {
            return this._lineWidth;
        },
        set: function set(width) {
            if (_lodash2.default.isFinite(width) && width > 0 && this._lineWidth !== width) {
                this._lineWidth = width;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'animating',
        get: function get() {
            return this._animating;
        },
        set: function set(onOff) {
            this._animating = onOff;

            if (onOff) {
                this.addAnimation({
                    name: 'startAngle',
                    endValues: { startAngle: -2 * Math.PI },
                    duration: 1200,
                    playCount: Infinity
                });
            }
        }
    }, {
        key: 'hidden',
        get: function get() {
            return _get(ActivityIndicatorView.prototype.__proto__ || Object.getPrototypeOf(ActivityIndicatorView.prototype), 'hidden', this);
        },
        set: function set(hidden) {
            _set(ActivityIndicatorView.prototype.__proto__ || Object.getPrototypeOf(ActivityIndicatorView.prototype), 'hidden', hidden, this);
            if (hidden) {
                this.animating = false;
            }
        }
    }, {
        key: 'startAngle',
        get: function get() {
            return this._startAngle;
        },
        set: function set(a) {
            this._startAngle = a;
            this.needsDisplay = true;
        }
    }]);

    return ActivityIndicatorView;
}(_View3.default);

exports.default = ActivityIndicatorView;

},{"./View":101,"lodash":53}],55:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MessageView2 = require('./MessageView');

var _MessageView3 = _interopRequireDefault(_MessageView2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A modal view that shows a title, a message, and an OK button
 * which dismisses the view when tapped.
 */

var AlertView = function (_MessageView) {
    _inherits(AlertView, _MessageView);

    function AlertView(title, message) {
        var dismissText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'OK';

        _classCallCheck(this, AlertView);

        var _this = _possibleConstructorReturn(this, (AlertView.__proto__ || Object.getPrototypeOf(AlertView)).call(this, title, message));

        _this.addButtonWithHandler(dismissText, _this.removeFromSuperview.bind(_this));
        return _this;
    }

    return AlertView;
}(_MessageView3.default);

exports.default = AlertView;

},{"./MessageView":76}],56:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

var _KeyButton = require('./KeyButton');

var _KeyButton2 = _interopRequireDefault(_KeyButton);

var _magic = require('./magic');

var _KeyboardView = require('./KeyboardView');

var KeyboardView = _interopRequireWildcard(_KeyboardView);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Long press a key that has alternate letters and it will show a AlternateKeysView
 * which allows the user to select similar but different letters.
 *
 * For instance, long press on 'e' to show an AlternateKeysView with 'è', 'é', 'ê', etc.
 *
 * Unlike iOS, the user must perform a separate tap to select one of the alternate letters.
 * In iOS, the user can long press and then drag over the alternate letter then lift his finger.
 */

var AlternateKeysView = function (_View) {
    _inherits(AlternateKeysView, _View);

    function AlternateKeysView(alternateLetters) {
        _classCallCheck(this, AlternateKeysView);

        var _this = _possibleConstructorReturn(this, (AlternateKeysView.__proto__ || Object.getPrototypeOf(AlternateKeysView)).call(this));

        _lodash2.default.each(alternateLetters, function (letter) {
            var btn = new _KeyButton2.default(letter);
            _this.addSubview(btn);
            btn.on('tap', function () {
                return _this.removeFromSuperview();
            });
        });

        _this.insets.setAll(5);
        return _this;
    }

    _createClass(AlternateKeysView, [{
        key: 'wasAddedToView',
        value: function wasAddedToView() {
            _get(AlternateKeysView.prototype.__proto__ || Object.getPrototypeOf(AlternateKeysView.prototype), 'wasAddedToView', this).call(this);

            this.height = Math.round(_magic.FingerSizePoints + 5 * 2); // top + bottom margin

            var kbd = KeyboardView.instance();

            this.moveAbove(kbd).makeSameWidth(kbd).alignLeft(kbd);

            this.backgroundColor = kbd.layout.backgroundColor;

            this.superview.needsLayout = false;
        }
    }, {
        key: 'willBeRemovedFromView',
        value: function willBeRemovedFromView() {
            _get(AlternateKeysView.prototype.__proto__ || Object.getPrototypeOf(AlternateKeysView.prototype), 'willBeRemovedFromView', this).call(this);
            this.superview.needsLayout = false;
        }
    }, {
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            var _this2 = this;

            var margin = 5,
                keyCount = this.subviews.length,
                marginWidth = (keyCount - 1) * margin,
                keyWidth = Math.min(_magic.FingerSizePoints, (this.contentWidth - marginWidth) / keyCount),
                totalWidth = keyWidth * keyCount + marginWidth;

            var x = this.contentCenterX - totalWidth / 2;

            _lodash2.default.each(this.subviews, function (subview) {
                subview.frame.set(x, _this2.contentTop, keyWidth, _this2.contentHeight);
                x += keyWidth + margin;
            });
        }
    }]);

    return AlternateKeysView;
}(_View3.default);

exports.default = AlternateKeysView;

},{"./KeyButton":71,"./KeyboardView":74,"./View":101,"./magic":105,"lodash":53}],57:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Docs {{{
/**
 * An animation changes a number of properties on a target object
 * over time using easing and interpolation.
 *
 * ## Usage:
 *
 *     new Animation({
 *       name: string,          // name for the animation
 *       target: object,        // object whose properties will be animated
 *       startValues: object,   // {$prop: $value} (optional)
 *       endValues: object,     // {$prop: $value}
 *       duration: number,      // default 400 ms
 *       startDelay: number,    // default 0
 *       endDelay: number,      // default 0
 *       easing: function,      // default Animation.easing.linear
 *       playCount: number,     // default 1; >= 0; Infinity OK
 *       autoReverse: boolean,  // default false
 *     });
 *
 * ## Parameters:
 *
 * `name` is a string naming the animation (e.g. "fadeOut").
 *
 * `target` is the object whose properties are to be animated.
 *
 * `startValues` are the initial or start values of the target to be applied
 * before the animation begins.  By default, the values of the animated
 * properties with keys of `endValues` are copied out of `target` before the
 * animation begins.
 *
 * `endValues` are the final or end values for the corresponding properties
 * of `target` after the animation plays in the forward direction one time.
 *
 * `startDelay` is the amount of time (ms) to wait before target property values
 * are animated.
 *
 * `duration` is the duration over which target properties are animated; this does;
 * not include `startDelay` nor `endDelay`.
 *
 * `endDelay` is the amount of time (ms) to wait after target property values
 * are animated before continuing with additional plays.
 *
 * `easing` is an easing function (see `Animation.easing`);
 *
 * `playCount` is the number of times the animation should be repeated.  The default is 1.
 *
 * `autoReverse` is a boolean indicating whether or not the animated properties
 * are swapped between start and end values when playing the animation additional
 * times (`playCount > 0`).  On even-numbered plays, the target values are animated from
 * `startValues` to `endValues`. On odd-numbered plays, the target values are animated
 * from `endValues` to `startValues`.
 *
 * ## Notes:
 *
 * The animations are driven `requestAnimationFrame`.  You do **not** need to
 * call `Animation._update` or `Animation._updateAll` yourself.
 *
 * `playTime` is the current time within the scope of a single "play" of the animation,
 * regardless of whether it is in the forward or reverse direction and includes the `startDelay`
 * and `outDelay`.
 *
 * `animTime` is the current time within the scope of a single "play" of the animation,
 * regardless of whether it is in the forward or reverse direction and does not include the
 * `startDelay` and `outDelay`.  When the current real time is within `startDelay` and `outDelay`,
 * `animTime` is `-1`. Thus, `animTime` takes on values from the range `[0, duration)`.
 *
 * `elapsedTime` is the time since the animation started, regardless of the play number.
 *
 * ## Events:
 *
 * `update`: emitted when values of animated properties are updated on the target object
 *
 * `complete(finished)`: emitted when when the animation plays to completion
 * and is passed true if the animation ran to completion or false if it was
 * stopped prematurely.
 *
 * `playStart`: emitted when a new play has started.;
 *
 * `playEnd`: emitted when a play of the animation has ended.
 *
 * ## Example Timelines
 *
 * Note: total running time (T) = playCount * (startDelay + duration + endDelay)
 *
 * Simple one-timer:
 *
 *     real time    =====================================================================================>
 *     playCount    1
 *     playNumber   0........................................0
 *     elapsedTime  0........................................T
 *     animTime     -1..........-1 0....duration -1.........-1
 *     playTime     0...startDelay 0....duration 0....endDelay
 *     target       startValues......................endValues
 *
 * With autoReverse disabled:
 *
 *     real time    =====================================================================================>
 *     playCount    2
 *     autoReverse  false
 *     playNumber   0........................................0  1........................................1
 *     elapsedTime  0....................................................................................T
 *     animTime     -1..........-1 0....duration -1.........-1  -1..........-1 0....duration -1.........-1
 *     playTime     0...startDelay 0....duration 0....endDelay  0...startDelay 0....duration 0....endDelay
 *     isReversed   false................................false  false................................false
 *     target       startValues......................endValues  startValues......................endValues
 *
 * With autoReverse enabled:
 *
 *     real time    =====================================================================================>
 *     playCount    2
 *     autoReverse  true
 *     playNumber   0........................................0  1........................................1
 *     elapsedTime  0....................................................................................T
 *     animTime     -1..........-1 0....duration -1.........-1  -1..........-1 0....duration -1.........-1
 *     playTime     0...startDelay 0....duration 0....endDelay  0...startDelay 0....duration 0....endDelay
 *     isReversed   false................................false  true..................................true
 *     target       startValues......................endValues  endValues......................startValues
 */
// }}}

var Animation = function (_EventEmitter) {
    _inherits(Animation, _EventEmitter);

    // constructor {{{

    function Animation(opts) {
        _classCallCheck(this, Animation);

        var _this = _possibleConstructorReturn(this, (Animation.__proto__ || Object.getPrototypeOf(Animation)).call(this));

        if (!_lodash2.default.isObject(opts)) {
            throw new Error('object expected');
        }

        _this._target = opts.target;

        _this.easing = opts.easing || Animation.easing.linear;

        if (_lodash2.default.isFunction(opts.endValues)) {
            _this._endValues = opts.endValues;
        } else if (_lodash2.default.isObject(opts.endValues)) {
            _this._endValues = _lodash2.default.clone(opts.endValues);
            _this._animatedPropertyNames = _lodash2.default.keys(_this._endValues);
        } else {
            throw new Error('endValues required');
        }

        if (_lodash2.default.isFunction(opts.startValues)) {
            _this._startValues = opts.startValues;
        } else if (_lodash2.default.isObject(opts.startValues)) {
            _this._startValues = _lodash2.default.clone(opts.startValues);
        }

        _this._startDelay = Math.max(parseInt(opts.startDelay, 10) || 0, 0);
        _this._endDelay = Math.max(parseInt(opts.reverseDelay, 10) || 0, 0);
        _this._duration = parseInt(opts.duration, 10);
        if (isNaN(_this._duration) || _this._duration < 0) {
            _this._duration = 400;
        }

        _this._playCount = opts.playCount === Infinity ? Infinity : Math.max(parseInt(opts.playCount, 10) || 1, 1);

        _this._autoReverse = _this._playCount > 1 && opts.autoReverse !== undefined && !!opts.autoReverse;
        _this._explicitReverse = !!opts.reverse;

        _this._name = opts.name;

        // Don't wait until `start` before creating the properties

        _this._isStopped = false;
        _this._startTime = -1;
        _this._stopTime = -1;
        _this._elapsedTime = -1;
        _this._animTime = -1;
        _this._playTime = -1;
        _this._playStartTime = -1;
        _this._playNumber = 0;
        return _this;
    }

    // }}}
    // start {{{

    _createClass(Animation, [{
        key: 'start',
        value: function start() {
            if (!_lodash2.default.isObject(this.target)) {
                throw new Error('target required');
            }

            if (this._startTime !== undefined) {
                this.stop();
            }

            this._loadEndValues();
            this._loadStartValues();

            this._copyStartValues();

            this._isStopped = false;
            this._startTime = -1;
            this._stopTime = -1;
            this._elapsedTime = -1;
            this._animTime = -1;
            this._playTime = -1;
            this._playStartTime = -1;
            this._playNumber = 0;

            Animation._all.push(this);
            requestAnimationFrame(Animation._updateAll);

            return this;
        }
    }, {
        key: '_loadEndValues',
        value: function _loadEndValues() {
            if (_lodash2.default.isFunction(this._endValues)) {
                this._endValues = this._endValues.call(this);
                if (!_lodash2.default.isObject(this._endValues)) {
                    throw new Error('object required for endValues');
                }
                this._animatedPropertyNames = _lodash2.default.keys(this._endValues);
            }
        }
    }, {
        key: '_loadStartValues',
        value: function _loadStartValues() {
            if (_lodash2.default.isFunction(this._startValues)) {
                this._startValues = this._startValues.call(this);
                if (!_lodash2.default.isObject(this._startValues)) {
                    throw new Error('object required for startValues');
                }
            }
        }
    }, {
        key: '_copyStartValues',
        value: function _copyStartValues() {
            var _this2 = this;

            // Collect start values from current values in

            var vals = {};

            _lodash2.default.each(this._animatedPropertyNames, function (p) {
                vals[p] = _this2._target[p];
            });

            // If we are given start values, those take precedence
            // over current values on the target.

            if (_lodash2.default.isObject(this._startValues)) {
                vals = _lodash2.default.merge(vals, this._startValues);
            }

            _lodash2.default.merge(this._target, this._startValues);

            this._startValues = vals;
        }

        // }}}
        // stop {{{

        /**
         * Stop the animation.
         *
         * If you have a more accurate stop time than "right now"
         * (i.e. when `stop()` is called), provide it in `stopTime`.
         * The animation will be updated once more using the stop
         * time as the current time for easing animated properties.
         *
         * The expected format for `stopTime` is DOMHighResTimeStamp
         * as returned by `window.performance.now`.
         *
         * The animation may be restarted with a subsequent call
         * to `start()`.
         */

    }, {
        key: 'stop',
        value: function stop() {
            var stopTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            this._isStopped = true;
            this._stopTime = stopTime === null ? window.performance.now() : stopTime;
        }

        // }}}
        // reverse {{{

        /**
         * Play the animation in reverse which always animates from
         * end values to start values.  Forces a playCount of 1.
         */

    }, {
        key: 'reverse',
        value: function reverse() {
            var yesNo = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            this._explicitReverse = yesNo;

            if (yesNo) {
                this._playCount = 1;
            }
        }

        // }}}
        // update/stop active animations {{{

    }, {
        key: '_update',


        // }}}
        // update {{{

        // Returns true if the animation has completed.

        value: function _update(currentTime) {
            var _this3 = this;

            if (this._isStopped) {
                // Let the update occur but at the stop time
                // which might be a frame behind (say 1000/60 = ~17 ms)
                // or more due to input -> animation processing lag.

                if (this._stopTime !== -1) {
                    currentTime = this._stopTime;
                }
            }

            if (this._startTime === -1) {
                this._startTime = currentTime;
                this._playStartTime = currentTime;
                this.emit('playStart');
            }

            this._elapsedTime = currentTime - this._startTime;
            this._playTime = currentTime - this._playStartTime;

            if (this._startDelay > 0 && this._playTime < this._startDelay || this._endDelay > 0 && this._playTime > this._startDelay + this._duration) {

                this._animTime = -1;
                this.emit('update');
                return false;
            }

            this._animTime = currentTime - this._playStartTime - this._startDelay;

            var effectiveStartValues, effectiveEndValues;

            if (this._explicitReverse || this._autoReverse && this._playNumber & 1) {
                effectiveStartValues = this._endValues;
                effectiveEndValues = this._startValues;
            } else {
                effectiveStartValues = this._startValues;
                effectiveEndValues = this._endValues;
            }

            _lodash2.default.each(this._animatedPropertyNames, function (p) {
                _this3._target[p] = _this3._easing(_this3._animTime, effectiveStartValues[p], effectiveEndValues[p] - effectiveStartValues[p], _this3._duration);
            });

            this.emit('update');

            if (this._isStopped) {
                this.emit('stopped');
                return true;
            }

            if (this._playTime >= this.playDuration) {
                this.emit('playEnd');

                if (this._playCount > 1 && ++this._playNumber < this._playCount) {

                    this._playTime = 0;
                    this._animTime = -1;
                    this._playStartTime = currentTime;
                    this.emit('playStart');

                    return false;
                }

                _lodash2.default.merge(this._target, effectiveEndValues);
                return true;
            }

            return false;
        }

        // }}}
        // getters {{{

        /**
         * The name of the animation
         */

    }, {
        key: 'name',
        get: function get() {
            return this._name;
        }

        /**
         * The target object being animated.
         */

    }, {
        key: 'target',
        get: function get() {
            return this._target;
        },
        set: function set(t) {
            this._target = t;
        }

        /**
         * Play count
         */

    }, {
        key: 'playCount',


        /**
         * Returns the total number of plays that will be played.
         */

        get: function get() {
            return this._playCount;
        }

        /**
         * Returns true if start and end values are swapped after each
         * play of the animation.
         */

        ,
        set: function set(n) {
            this._playCount = n;
        }

        /**
         * The easing function in use.
         */

    }, {
        key: 'easing',
        get: function get() {
            return this._easing;
        },
        set: function set(fn) {
            if (!_lodash2.default.isFunction(fn)) {
                throw new Error('function required for easing');
            }

            this._easing = fn;
        }

        /**
         * The wall clock time when the animation started.
         */

    }, {
        key: 'startTime',
        get: function get() {
            return this._startTime;
        }

        /**
         * The wall clock time when the current play started.
         */

    }, {
        key: 'playStartTime',
        get: function get() {
            return this._playStartTime;
        }

        /**
         * The elapsed time since the current play of the animation started.
         * Includes the start and end delays.
         *
         * Returns a value within range [0, duration)
         */

    }, {
        key: 'playTime',
        get: function get() {
            return this._playTime;
        }

        /**
         * The elapsed time since the current play of the animation started.
         * Does not include the start or end delays.
         *
         * Returns:
         * - -1 when in the start or end delays.
         * - Otherwise, a value within range [0, duration)
         */

    }, {
        key: 'animTime',
        get: function get() {
            return this._animTime;
        }

        /**
         * Returns the total time the animation will play for across all
         * plays and including their start and end delays.
         */

    }, {
        key: 'totalElapsedTime',
        get: function get() {
            return this._playCount * this.playDuration;
        }

        /**
         * Returns the elapsed time in range [0,1] since the animation
         * started.
         */

    }, {
        key: 'elapsedTimeUnit',
        get: function get() {
            return this._elapsedTime / this.totalElapsedTime;
        }

        /**
         * Returns the elapsed time since the animation started in ms.
         */

    }, {
        key: 'elapsedTime',
        get: function get() {
            return this._elapsedTime;
        }

        /**
         * Returns the delay duration (ms) before each play of the animation begins.
         */

    }, {
        key: 'startDelay',
        get: function get() {
            return this._startDelay;
        }

        /**
         * Returns the delay duration (ms) after each play of the animation ends
         * and before the next play begins (assuming `playNumber < playCount`)
         */

    }, {
        key: 'endDelay',
        get: function get() {
            return this._endDelay;
        }

        /**
         * Returns the duration in ms over which target properties are animated.
         */

    }, {
        key: 'animDuration',
        get: function get() {
            return this._duration;
        }

        /**
         * Returns the duration in ms of each play of the animation.
         */

    }, {
        key: 'playDuration',
        get: function get() {
            return this._playDuration = this._startDelay + this._duration + this._endDelay;
        }

        /**
         * Returns the current play number in range [0, playCount)
         */

    }, {
        key: 'playNumber',
        get: function get() {
            return this._playNumber;
        }
    }, {
        key: 'autoReverses',
        get: function get() {
            return this._autoReverse;
        }

        /**
         * True if animating from end to start values due to `autoReverse`.
         */

    }, {
        key: 'isReversed',
        get: function get() {
            return this._autoReverse && this._playNumber & 1;
        }

        /**
         * True if stopped.
         */

    }, {
        key: 'isStopped',
        get: function get() {
            return this._isStopped;
        }

        // }}}

    }], [{
        key: '_updateAll',
        value: function _updateAll(currentTime) {
            var completed = _lodash2.default.remove(Animation._all, function (anim) {
                return anim._update(currentTime);
            });
            _lodash2.default.each(completed, function (c) {
                return c.emit('complete', !c._isStopped);
            });

            var n = Animation._all.length;
            if (n > 0) {
                requestAnimationFrame(Animation._updateAll);
            }
            return n;
        }
    }]);

    return Animation;
}(_events2.default);

// Active animations {{{

// Active animations; on stop, the animation is removed.

exports.default = Animation;
Animation._all = [];

// }}}
// Easing Functions {{{

// Thanks to Robert Penner for these equations.
// Parameters:
//   t: current time
//   b: start value
//   c: change in value (delta)
//   d: duration for change

// More traditional naming conventions for "Start" and "End" are "In" and "Out"
// respectively.  I found these confusing initially as "In" to me meant "coming
// back in" but it really meant "on the way in"... "Start" and "End" are
// unambiguous.  Furthermore, given that we have "bounceStart" and "bounceEnd",
// "bounce" seems pretty obvious that it means "bounce at start and end".
// Naming things is difficult.

Animation.easing = {
    // linear {{{

    linear: function linear(t, b, c, d) {
        return c * t / d + b;
    },

    // }}}
    // quad {{{

    quadStart: function quadStart(t, b, c, d) {
        t /= d;

        return c * t * t + b;
    },

    quadEnd: function quadEnd(t, b, c, d) {
        t /= d;

        return -c * t * (t - 2) + b;
    },

    quad: function quad(t, b, c, d) {
        t /= d / 2;

        if (t < 1) {
            return c / 2 * t * t + b;
        }

        t--;

        return -c / 2 * (t * (t - 2) - 1) + b;
    },

    // }}}
    // cubic {{{

    cubicStart: function cubicStart(t, b, c, d) {
        t /= d;

        return c * t * t * t + b;
    },

    cubicEnd: function cubicEnd(t, b, c, d) {
        t /= d;

        t--;

        return c * (t * t * t + 1) + b;
    },

    cubic: function cubic(t, b, c, d) {
        t /= d / 2;

        if (t < 1) {
            return c / 2 * t * t * t + b;
        }

        t -= 2;

        return c / 2 * (t * t * t + 2) + b;
    },

    // }}}
    // quartic {{{

    quartStart: function quartStart(t, b, c, d) {
        t /= d;

        return c * t * t * t * t + b;
    },

    quartEnd: function quartEnd(t, b, c, d) {
        t /= d;

        t--;

        return -c * (t * t * t * t - 1) + b;
    },

    quart: function quart(t, b, c, d) {
        t /= d / 2;

        if (t < 1) {
            return c / 2 * t * t * t * t + b;
        }

        t -= 2;

        return -c / 2 * (t * t * t * t - 2) + b;
    },

    // }}}
    // quintic {{{

    quintStart: function quintStart(t, b, c, d) {
        t /= d;

        return c * t * t * t * t * t + b;
    },

    quintEnd: function quintEnd(t, b, c, d) {
        t /= d;

        t--;

        return c * (t * t * t * t * t + 1) + b;
    },

    quint: function quint(t, b, c, d) {
        t /= d / 2;

        if (t < 1) {
            return c / 2 * t * t * t * t * t + b;
        }

        t -= 2;

        return c / 2 * (t * t * t * t * t + 2) + b;
    },

    // }}}
    // sine {{{

    sineStart: function sineStart(t, b, c, d) {
        return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
    },

    sineEnd: function sineEnd(t, b, c, d) {
        return c * Math.sin(t / d * (Math.PI / 2)) + b;
    },

    sine: function sine(t, b, c, d) {
        return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
    },

    // }}}
    // exponential {{{

    exponentialStart: function exponentialStart(t, b, c, d) {
        return c * Math.pow(2, 10 * (t / d - 1)) + b;
    },

    exponentialEnd: function exponentialEnd(t, b, c, d) {
        return c * (-Math.pow(2, -10 * t / d) + 1) + b;
    },

    exponential: function exponential(t, b, c, d) {
        t /= d / 2;

        if (t < 1) {
            return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
        }

        t--;

        return c / 2 * (-Math.pow(2, -10 * t) + 2) + b;
    },

    // }}}
    // circular {{{

    circularStart: function circularStart(t, b, c, d) {
        t /= d;

        return -c * (Math.sqrt(1 - t * t) - 1) + b;
    },

    circularEnd: function circularEnd(t, b, c, d) {
        t /= d;

        t--;

        return c * Math.sqrt(1 - t * t) + b;
    },

    circular: function circular(t, b, c, d) {
        t /= d / 2;

        if (t < 1) {
            return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
        }

        t -= 2;

        return c / 2 * (Math.sqrt(1 - t * t) + 1) + b;
    },

    // }}}
    // elastic {{{

    elasticStart: function elasticStart(t, b, c, d) {
        var s = 1.70158,
            p = 0,
            a = c;

        if (t == 0) {
            return b;
        }

        if ((t /= d) == 1) {
            return b + c;
        }

        if (!p) {
            p = d * .3;
        }

        if (a < Math.abs(c)) {
            a = c;
            s = p / 4;
        } else {
            s = p / (2 * Math.PI) * Math.asin(c / a);
        }

        return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
    },

    elasticEnd: function elasticEnd(t, b, c, d) {
        var s = 1.70158,
            p = 0,
            a = c;

        if (t == 0) {
            return b;
        }

        if ((t /= d) == 1) {
            return b + c;
        }

        if (!p) {
            p = d * .3;
        }

        if (a < Math.abs(c)) {
            a = c;
            s = p / 4;
        } else {
            s = p / (2 * Math.PI) * Math.asin(c / a);
        }

        return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
    },

    elastic: function elastic(t, b, c, d) {
        var s = 1.70158,
            p = 0,
            a = c;

        if (t == 0) {
            return b;
        }

        if ((t /= d / 2) == 2) {
            return b + c;
        }

        if (!p) {
            p = d * (.3 * 1.5);
        }

        if (a < Math.abs(c)) {
            a = c;
            s = p / 4;
        } else {
            s = p / (2 * Math.PI) * Math.asin(c / a);
        }

        if (t < 1) {
            return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
        }

        return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;
    },

    // }}}
    // back {{{

    backStart: function backStart(t, b, c, d, s) {
        if (s == undefined) {
            s = 1.70158;
        }

        return c * (t /= d) * t * ((s + 1) * t - s) + b;
    },

    backEnd: function backEnd(t, b, c, d, s) {
        if (s == undefined) {
            s = 1.70158;
        }

        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
    },

    back: function back(t, b, c, d, s) {
        if (s == undefined) {
            s = 1.70158;
        }

        if ((t /= d / 2) < 1) {
            return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
        }

        return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
    },

    // }}}
    // bounce {{{

    bounceStart: function bounceStart(t, b, c, d) {
        return c - Animation.easing.bounceEnd(d - t, 0, c, d) + b;
    },

    bounceEnd: function bounceEnd(t, b, c, d) {
        if ((t /= d) < 1 / 2.75) {
            return c * (7.5625 * t * t) + b;
        }

        if (t < 2 / 2.75) {
            return c * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + b;
        }

        if (t < 2.5 / 2.75) {
            return c * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + b;
        }

        return c * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + b;
    },

    bounce: function bounce(t, b, c, d) {
        if (t < d / 2) {
            return Animation.easing.bounceStart(t * 2, 0, c, d) * .5 + b;
        }
        return Animation.easing.bounceEnd(t * 2 - d, 0, c, d) * .5 + c * .5 + b;
    }

    // }}}
};

// }}}

},{"events":109,"lodash":53}],58:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _AnimationSequence2 = require('./AnimationSequence');

var _AnimationSequence3 = _interopRequireDefault(_AnimationSequence2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A composite animation that runs multiple Animations concurrently.
 *
 * Events:
 *
 * - `complete`: emitted when all composed animations;
 *   have completed; thus, they don't have to have the same;
 *   durations.
 */

var AnimationParallel = function (_AnimationSequence) {
    _inherits(AnimationParallel, _AnimationSequence);

    function AnimationParallel() {
        _classCallCheck(this, AnimationParallel);

        return _possibleConstructorReturn(this, (AnimationParallel.__proto__ || Object.getPrototypeOf(AnimationParallel)).apply(this, arguments));
    }

    _createClass(AnimationParallel, [{
        key: 'start',
        value: function start() {
            var _this2 = this;

            var complete = 0;

            _lodash2.default.each(this._animations, function (a) {
                a.once('complete', function () {
                    if (++complete === _this2._animations.length) {
                        _this2.emit('complete');
                    }
                });

                a.start();
            });

            return this;
        }
    }]);

    return AnimationParallel;
}(_AnimationSequence3.default);

exports.default = AnimationParallel;

},{"./AnimationSequence":59,"lodash":53}],59:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A sequence of animations. The first animation is played.
 * When it completes, the next animation in the sequence is played.
 * This repeats until the last animation in the sequence is played.
 * Then the 'complete' event is emitted.;
 *
 * Note that such a sequence can be played in reverse.
 * Before calling `start`, call `reverse`.
 *
 * ## Events
 *
 * - `complete`: the end of the sequence has been reached.
 * - `repeat(playNo)`: the end of the sequence has been reached
 *   but it will start over (as per `playCount`).
 */

var AnimationSequence = function (_EventEmitter) {
    _inherits(AnimationSequence, _EventEmitter);

    function AnimationSequence(name, animations) {
        _classCallCheck(this, AnimationSequence);

        var _this = _possibleConstructorReturn(this, (AnimationSequence.__proto__ || Object.getPrototypeOf(AnimationSequence)).call(this));

        if (!_lodash2.default.isString(name) && _lodash2.default.isArray(name)) {
            _this._animations = name;
            _this._name = _lodash2.default.uniqueId(_this.constructor.name);
        } else {
            _this._name = name;
            _this._animations = animations || [];
        }

        _this._playCount = 0;
        _this._plays = 0;
        return _this;
    }

    _createClass(AnimationSequence, [{
        key: 'push',
        value: function push(anim) {
            this._animations.push(anim);
            return this;
        }
    }, {
        key: 'start',
        value: function start() {
            if (this.startDelay > 0) {
                setTimeout(this._playAnimationAtIndex.bind(this, 0), this.startDelay);
            } else {
                this._playAnimationAtIndex(0);
            }
        }
    }, {
        key: '_playAnimationAtIndex',
        value: function _playAnimationAtIndex(index) {
            if (index >= this._animations.length) {
                if (++this._plays >= this._playCount) {
                    this.emit('complete');
                } else {
                    this.emit('repeat', this._plays);
                    if (this.autoReverse) {
                        this.reverse();
                    }
                    this._playAnimationAtIndex(0);
                }
            } else {
                var anim = this._animations[index];
                anim.once('complete', this._playAnimationAtIndex.bind(this, index + 1));
                anim.start();
            }
        }
    }, {
        key: 'stop',
        value: function stop() {
            _lodash2.default.each(this._animations, function (a) {
                return a.stop();
            });
            return this;
        }
    }, {
        key: 'reverse',
        value: function reverse() {
            this._animations.reverse();
            _lodash2.default.each(this._animations, function (anim) {
                return anim.reverse();
            });
            return this;
        }
    }, {
        key: 'playCount',
        get: function get() {
            return this._playCount;
        },
        set: function set(n) {
            this._playCount = n;
        }
    }, {
        key: 'plays',
        get: function get() {
            return this._plays;
        }
    }, {
        key: 'target',
        get: function get() {
            var anim = _lodash2.default.first(this._animations);
            return anim ? anim.target : null;
        },
        set: function set(t) {
            _lodash2.default.each(this._animations, function (a) {
                a.target = t;
            });
        }
    }, {
        key: 'name',
        get: function get() {
            return this._name;
        }
    }]);

    return AnimationSequence;
}(_events2.default);

exports.default = AnimationSequence;

},{"events":109,"lodash":53}],60:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ResetAnimation = exports.Wobble = exports.Shake = exports.GrabAttention = exports.Blink = exports.SlideOut = exports.SlideIn = exports.Translate = exports.MoveTo = exports.CenterTo = exports.Rotate = exports.Spin = exports.PopOut = exports.PopIn = exports.Scale = exports.FadeOut = exports.FadeIn = undefined;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _Animation16 = require('./Animation');

var _Animation17 = _interopRequireDefault(_Animation16);

var _AnimationSequence3 = require('./AnimationSequence');

var _AnimationSequence4 = _interopRequireDefault(_AnimationSequence3);

var _magic = require('./magic');

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Off-the-shelf basic animations.
// Note: these can be composed to run in series or parallel.
// See AnimationParallel and AnimationSequence.

// alpha/transparency {{{

/**
 * An animation that fades its target in over time.
 */

var FadeIn = exports.FadeIn = function (_Animation) {
    _inherits(FadeIn, _Animation);

    function FadeIn() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, FadeIn);

        opts = opts || {};

        return _possibleConstructorReturn(this, (FadeIn.__proto__ || Object.getPrototypeOf(FadeIn)).call(this, _lodash2.default.merge(opts, {
            name: 'fadeIn',
            startValues: { hidden: false, alpha: 0 },
            endValues: { alpha: 1 }
        })));
    }

    return FadeIn;
}(_Animation17.default);

/**
 * An animation that fades its target out using alpha.
 */

var FadeOut = exports.FadeOut = function (_Animation2) {
    _inherits(FadeOut, _Animation2);

    /**
     * Additional options:
     *
     * - `removeOnComplete`: if true, the target will be removed;
     *   from its superview when the fade-out animation completes.;
     *   The default is false.
     *
     * - `hideOnComplete`: if true, the target will be hidden;
     *   when the fade-out animation completes. The default is false.;
     */
    function FadeOut() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, FadeOut);

        opts = opts || {};

        var _this2 = _possibleConstructorReturn(this, (FadeOut.__proto__ || Object.getPrototypeOf(FadeOut)).call(this, _lodash2.default.merge(opts, {
            name: 'fadeOut',
            endValues: { alpha: 0 }
        })));

        if (opts.removeOnComplete) {
            _this2.once('complete', function () {
                _this2.target.removeFromSuperview();
            });
        } else if (opts.hideOnComplete) {
            _this2.once('complete', function () {
                _this2.target.hidden = true;
            });
        }
        return _this2;
    }

    return FadeOut;
}(_Animation17.default);

// }}}
// scale {{{

/**
 * Scales the target view to an absolute scale.
 *
 * NB: scaling occurs around the view's local center point.
 */

var Scale = exports.Scale = function (_Animation3) {
    _inherits(Scale, _Animation3);

    /**
     * Additional options:
     *
     * - `scale`: the target scale for both X and Y (default: 1.0);
     * - `scaleX`: the target scale for X (default: `scale`);
     * - `scaleY`: the target scale for Y (default: `scale`).
     */
    function Scale() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, Scale);

        opts = opts || {};

        var defaultScale = _lodash2.default.isFinite(opts.scale) ? opts.scale : 1.0,
            scaleX = _lodash2.default.has(opts, 'scaleX') ? opts.scaleX : defaultScale,
            scaleY = _lodash2.default.has(opts, 'scaleY') ? opts.scaleY : defaultScale;

        return _possibleConstructorReturn(this, (Scale.__proto__ || Object.getPrototypeOf(Scale)).call(this, _lodash2.default.merge(opts, {
            name: 'scaleTo',
            endValues: { x: scaleX, y: scaleY }
        })));
    }

    return Scale;
}(_Animation17.default);

/**
 * An animation that pops in its target using scaling.
 */

var PopIn = exports.PopIn = function (_Animation4) {
    _inherits(PopIn, _Animation4);

    function PopIn() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, PopIn);

        opts = opts || {};

        return _possibleConstructorReturn(this, (PopIn.__proto__ || Object.getPrototypeOf(PopIn)).call(this, _lodash2.default.merge(opts, {
            name: 'popIn',
            startValues: { hidden: false, scaleX: 0, scaleY: 0 },
            endValues: { scaleX: 1, scaleY: 1 },
            easing: _Animation17.default.easing.backEnd
        })));
    }

    return PopIn;
}(_Animation17.default);

/**
 * An animation that pops out its target using scaling.
 */

var PopOut = exports.PopOut = function (_Animation5) {
    _inherits(PopOut, _Animation5);

    /**
     * Additional options:
     *
     * - `removeOnComplete`: if true, the target will be removed;
     *   from its superview when the fade-out animation completes.;
     *   The default is false.
     *
     * - `hideOnComplete`: if true, the target will be hidden;
     *   when the fade-out animation completes. The default is false.;
     */
    function PopOut() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, PopOut);

        opts = opts || {};

        var _this5 = _possibleConstructorReturn(this, (PopOut.__proto__ || Object.getPrototypeOf(PopOut)).call(this, _lodash2.default.merge(opts, {
            name: 'popOut',
            startValues: { scaleX: 1, scaleY: 1 },
            endValues: { scaleX: 0, scaleY: 0 },
            easing: _Animation17.default.easing.backStart
        })));

        if (opts.removeOnComplete) {
            _this5.once('complete', function () {
                _this5.target.removeFromSuperview();
            });
        } else if (opts.hideOnComplete) {
            _this5.once('complete', function () {
                _this5.target.hidden = true;
            });
        }
        return _this5;
    }

    return PopOut;
}(_Animation17.default);

// }}}
// rotation/angle {{{

/**
 * Spins the target view a number of times about its center.
 */

var Spin = exports.Spin = function (_Animation6) {
    _inherits(Spin, _Animation6);

    /**
     * Additional options:
     *
     * - `times`: the number of times to spin the target view.
     *   The default is 1.
     * - `clockwise`: if true, the target view spins
     *   in the clockwise direction.  The default is false.
     */
    function Spin() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, Spin);

        opts = opts || {};

        var times = Math.max(1, opts.times || 1),
            clockwise = !!opts.clockwise,
            angle = 2 * Math.PI * times * (clockwise && -1 || 1);

        return _possibleConstructorReturn(this, (Spin.__proto__ || Object.getPrototypeOf(Spin)).call(this, _lodash2.default.merge(opts, {
            name: 'spin',
            endValues: { angle: angle }
        })));
    }

    return Spin;
}(_Animation17.default);

/**
 * Rotates the target view to the given angle.
 */

var Rotate = exports.Rotate = function (_Animation7) {
    _inherits(Rotate, _Animation7);

    /**
     * Additional options:
     *
     * - `radians`: the target angle (default: 0);
     * - `degrees`: the target angle in degrees (default: 0).
     *   Takes precendence over `radians`.
     */
    function Rotate() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, Rotate);

        opts = opts || {};

        var angle = (_lodash2.default.has(opts, 'degrees') ? (0, _util.degreesToRadians)(opts.degrees) : opts.radians) || 0.0;

        return _possibleConstructorReturn(this, (Rotate.__proto__ || Object.getPrototypeOf(Rotate)).call(this, _lodash2.default.merge(opts, {
            name: 'rotateTo',
            endValues: { angle: angle }
        })));
    }

    return Rotate;
}(_Animation17.default);

// }}}
// position {{{

/**
 * Moves or translates the target view such that its center is
 * at the given point in the coordinate system of its superview.;
 */

var CenterTo = exports.CenterTo = function (_Animation8) {
    _inherits(CenterTo, _Animation8);

    /**
     * Additional options:
     *
     * `point`: location in superview to which the center of the
     * target view will be located when the animation completes.
     */
    function CenterTo() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, CenterTo);

        opts = opts || {};

        return _possibleConstructorReturn(this, (CenterTo.__proto__ || Object.getPrototypeOf(CenterTo)).call(this, _lodash2.default.merge(opts, {
            name: 'centerTo',
            endValues: {
                centerX: opts.point.x,
                centerY: opts.point.y
            },
            easing: _Animation17.default.easing.cubic
        })));
    }

    return CenterTo;
}(_Animation17.default);

/**
 * Moves or translates the target view such that its top left origin
 * is at the given point in the coordinate system of its superview.;
 */

var MoveTo = exports.MoveTo = function (_Animation9) {
    _inherits(MoveTo, _Animation9);

    /**
     * Additional options:
     *
     * - `point`
     */
    function MoveTo() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, MoveTo);

        opts = opts || {};

        return _possibleConstructorReturn(this, (MoveTo.__proto__ || Object.getPrototypeOf(MoveTo)).call(this, _lodash2.default.merge(opts, {
            name: 'moveTo',
            endValues: {
                x: opts.point.x,
                y: opts.point.y
            },
            easing: _Animation17.default.easing.cubic
        })));
    }

    return MoveTo;
}(_Animation17.default);

/**
 * Translates the target view by the given delta.
 */

var Translate = exports.Translate = function (_Animation10) {
    _inherits(Translate, _Animation10);

    /**
     * Additional options:
     *
     * - `delta`: a `Point` indicating how much the
     *   target view should be translated by.  The
     *   default is `PointZero`.
     */
    function Translate() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, Translate);

        opts = opts || {};

        var delta = opts.delta || _magic.PointZero;

        return _possibleConstructorReturn(this, (Translate.__proto__ || Object.getPrototypeOf(Translate)).call(this, _lodash2.default.merge(opts, {
            name: 'translate',
            endValues: function endValues() {
                return {
                    x: this.target.position.x + delta.x,
                    y: this.target.position.y + delta.y
                };
            }
        })));
    }

    return Translate;
}(_Animation17.default);

function slideParams(targetView) {
    var dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'N';

    var sv = targetView.superview;

    if (!sv && (dir === 'E' || dir === 'S')) {
        throw new Error('cannot slide in/out detached view');
    }

    switch (dir) {
        case 'N':
            return { bottom: 0 };
        case 'E':
            return { left: sv.width };
        case 'S':
            return { top: sv.height };
        case 'W':
            return { right: 0 };
    }
}

/**
 * Slides in the target view from outside the bounds of its
 * superview to its position at the time the animation is created.;
 */

var SlideIn = exports.SlideIn = function (_Animation11) {
    _inherits(SlideIn, _Animation11);

    /**
     * `fromDirection` can be any of "N", "E", "W", or "S".
     */
    function SlideIn(targetView, fromDirection) {
        var targetPoint = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

        _classCallCheck(this, SlideIn);

        opts = opts || {};

        return _possibleConstructorReturn(this, (SlideIn.__proto__ || Object.getPrototypeOf(SlideIn)).call(this, _lodash2.default.merge(opts, {
            name: 'slideIn',
            target: targetView,
            startValues: function startValues() {
                return slideParams(this.target, fromDirection);
            },
            endValues: function endValues() {
                return this.target.position.clone();
            }
        })));
    }

    return SlideIn;
}(_Animation17.default);

/**
 * Slides in the target view from its position at the time the animation
 * is created to outside the bounds of its superview.;
 */

var SlideOut = exports.SlideOut = function (_Animation12) {
    _inherits(SlideOut, _Animation12);

    /**
     * `toDirection` can be any of "N", "E", "W", or "S".
     */
    function SlideOut(targetView, toDirection) {
        var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        _classCallCheck(this, SlideOut);

        opts = opts || {};

        return _possibleConstructorReturn(this, (SlideOut.__proto__ || Object.getPrototypeOf(SlideOut)).call(this, _lodash2.default.merge(opts, {
            name: 'slideOut',
            endValues: function endValues() {
                return slideParams(this.target, toDirection);
            }
        })));
    }

    return SlideOut;
}(_Animation17.default);

// }}}
// misc {{{

/**
 * Blinks the target view a number of times.
 */

var Blink = exports.Blink = function (_Animation13) {
    _inherits(Blink, _Animation13);

    /**
     * Additional options:
     *
     * `times`: the number of times to blink the target view.
     * The default is 3 times.
     */
    function Blink(targetView) {
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { times: 3 };

        _classCallCheck(this, Blink);

        opts = opts || {};

        var times = Math.max(1, opts.times || 3);

        return _possibleConstructorReturn(this, (Blink.__proto__ || Object.getPrototypeOf(Blink)).call(this, _lodash2.default.merge(opts, {
            name: 'blink',
            target: targetView,
            endValues: { alpha: 0 },
            playCount: times * 2, // forwards is 1 play as is reverse.
            autoReverse: true
        })));
    }

    return Blink;
}(_Animation17.default);

/**
 * Flashes border of target view a few times to grab the user's attention.
 */

var GrabAttention = exports.GrabAttention = function (_Animation14) {
    _inherits(GrabAttention, _Animation14);

    /**
     * Additional options:
     *
     * - `borderColor`: the color of the border; default 'red'.
     * - `borderWidth`: the width of the border; default 10.
     */
    function GrabAttention() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, GrabAttention);

        opts = _lodash2.default.merge(opts || {}, {
            name: 'grabAttention',
            startValues: { borderColor: 'red' },
            endValues: { borderWidth: 10 },
            playCount: 3,
            autoReverse: true,
            duration: 500
        });

        var _this14 = _possibleConstructorReturn(this, (GrabAttention.__proto__ || Object.getPrototypeOf(GrabAttention)).call(this, opts));

        _this14.on('beforeStart', function () {
            _this14._valuesBefore = {
                borderColor: _this14.target.borderColor,
                borderWidth: _this14.target.borderWidth
            };
        });

        _this14.once('complete', function () {
            _lodash2.default.merge(_this14.target, _this14._valuesBefore);
        });
        return _this14;
    }

    return GrabAttention;
}(_Animation17.default);

/**
 * Shakes the target view as if to say "nope, try again".
 */

var Shake = exports.Shake = function (_AnimationSequence) {
    _inherits(Shake, _AnimationSequence);

    /**
     * Additional options:
     *
     * - `dx': amount to shake the target view its the
     *   left and right (default: 10).
     * - `playCount`: number of times to shake (default: 5).
     */
    function Shake() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, Shake);

        opts = _lodash2.default.merge(opts || {}, {
            name: 'shake it',
            easing: _Animation17.default.easing.linear,
            duration: 100
        });

        var playCount = opts.playCount;
        delete opts.playCount;

        var dx = opts.dx || 10;

        var _this15 = _possibleConstructorReturn(this, (Shake.__proto__ || Object.getPrototypeOf(Shake)).call(this, 'shake', [new _Animation17.default(_lodash2.default.merge(opts, {
            endValues: function endValues() {
                return { left: this.target.left + dx };
            }
        })), new _Animation17.default(_lodash2.default.merge(opts, {
            endValues: function endValues() {
                return { left: this.target.left - dx };
            }
        }))]));

        _this15.playCount = playCount || 5;
        return _this15;
    }

    return Shake;
}(_AnimationSequence4.default);

/**
 * Wobbles the target view like that of the iOS home screen.
 */

var Wobble = exports.Wobble = function (_AnimationSequence2) {
    _inherits(Wobble, _AnimationSequence2);

    /**
     * Additional options:
     *
     * - `deltaRadians`: delta angle in radians.
     * - `deltaDegrees`: delta angle in degrees (default: 10).
     *   Takes precendence over `deltaRadians`.
     * - `playCount`: number of times to wobble (default: Infinity).
     */
    function Wobble() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, Wobble);

        opts = _lodash2.default.merge(opts || {}, {
            name: 'wobble',
            duration: 200
        });

        var playCount = opts.playCount;
        delete opts.playCount;

        var startDelay = opts.startDelay;
        delete opts.startDelay;

        var deltaRadians = _lodash2.default.has(opts, 'deltaDegrees') ? (0, _util.degreesToRadians)(opts.deltaDegrees) : opts.deltaRadians;

        if (_lodash2.default.isEmpty(deltaRadians)) {
            deltaRadians = (0, _util.degreesToRadians)(5);
        }

        var _this16 = _possibleConstructorReturn(this, (Wobble.__proto__ || Object.getPrototypeOf(Wobble)).call(this, 'wobble', [new _Animation17.default(_lodash2.default.merge(opts, {
            endValues: function endValues() {
                return { angle: this.target.angle - deltaRadians };
            }
        })), new _Animation17.default(_lodash2.default.merge(opts, {
            endValues: function endValues() {
                return { angle: this.target.angle + deltaRadians };
            }
        }))]));

        _this16.autoReverse = true;
        _this16.playCount = playCount || Infinity;
        _this16.startDelay = startDelay || 0;
        return _this16;
    }

    return Wobble;
}(_AnimationSequence4.default);

/**
 * An animation that resets its target view to a default state:
 *
 * - alpha: 1 (fully opaque);
 * - angle: 0
 * - scale: (1,1);
 * - position: center of superview at time of animation creation;
 * - borderWidth: 0
 * - hidden: false
 */

var ResetAnimation = exports.ResetAnimation = function (_Animation15) {
    _inherits(ResetAnimation, _Animation15);

    function ResetAnimation() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, ResetAnimation);

        opts = _lodash2.default.merge(opts || {}, {
            name: 'reset',
            startValues: { hidden: false }
        });

        opts.endValues = function () {
            var sc = this.target.superview.center;

            return {
                alpha: 1,
                angle: 0,
                scaleX: 1,
                scaleY: 1,
                centerX: sc.x,
                centerY: sc.y,
                borderWidth: 0
            };
        };

        return _possibleConstructorReturn(this, (ResetAnimation.__proto__ || Object.getPrototypeOf(ResetAnimation)).call(this, opts));
    }

    return ResetAnimation;
}(_Animation17.default);

// }}}

},{"./Animation":57,"./AnimationSequence":59,"./magic":105,"./util":107,"lodash":53}],61:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.layoutNaturalFlow = layoutNaturalFlow;
exports.layoutAsVerticalStack = layoutAsVerticalStack;
exports.layoutAsGrid = layoutAsGrid;
exports.layoutCenteredGrid = layoutCenteredGrid;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _Frame = require('./Frame');

var _Frame2 = _interopRequireDefault(_Frame);

var _Point = require('./Point');

var _Point2 = _interopRequireDefault(_Point);

var _Size = require('./Size');

var _Size2 = _interopRequireDefault(_Size);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Lays out the given subviews of a the given view
 * with a top-to-bottom left-to-right natural flow.
 *
 * By "natural" we mean to say that each subview is asked
 * to `sizeToFit` to determine its frame size before
 * determining its position.
 *
 * `opts` is an object containing:
 * - `hMargin`: horizontal margin between views of the same "line"
 * - `vMargin`: vertical margin between lines
 *
 * Notes:
 *
 * - subviews are laid out within the content rect of the view.
 * - the tallest subview per line determines the height of that line.
 * - all subviews on the same line have their _tops_ aligned.
 */

function layoutNaturalFlow(view, subviews) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { hMargin: 10, vMargin: 10 };

    var hMargin = _lodash2.default.isFinite(opts.hMargin) ? opts.hMargin : 10,
        vMargin = _lodash2.default.isFinite(opts.vMargin) ? opts.vMargin : 10,
        contentLeft = view.contentLeft,
        contentRight = view.contentRight;

    var x = contentLeft,
        y = view.contentTop,
        maxHeightCurrentLine = 0;

    _lodash2.default.each(subviews, function (subview) {
        subview.sizeToFit(); // hence "natural"
        maxHeightCurrentLine = Math.max(maxHeightCurrentLine, subview.height);

        subview.position.set(x, y);
        if (subview.right + hMargin >= contentRight) {
            // Doesn't fit, flow to next "line"

            x = contentLeft;
            y += maxHeightCurrentLine + vMargin;
            subview.position.set(x, y);
            maxHeightCurrentLine = 0;
        }

        x += subview.width + hMargin;
    });
}

/**
 * Lays out subviews as a centered vertical stack inside view.
 * Each subview is asked to size itself first.
 *
 * opts:
 *
 * - `vMargin`: vertical space between each subview. default: 10.
 * - `minWidth`: min allowed width of each subview. default: 0.
 * - `maxWidth`: max allowed width of each subview. default: 0.
 * - `equalWidths`: if true, all subviews take on width of widest subview. default false.
 * - `gravity`: 'top', 'bottom', or 'middle'. Where to vertically move the
 *   stack of subviews relative to the given (super)view. default: 'middle'.
 */

function layoutAsVerticalStack(view, subviews, opts) {
    opts = opts || {};

    var vMargin = _lodash2.default.isFinite(opts.vMargin) ? opts.vMargin : 10,
        maxWidth = opts.maxWidth || 0,
        minWidth = opts.minWidth || 0,
        equalWidths = !!opts.equalWidths;

    var y = 0,
        widestWidth = 0;

    _lodash2.default.each(subviews, function (sv) {
        sv.sizeToFit();
        if (sv.width > widestWidth) widestWidth = sv.width;
        y += sv.marginTop || 0;
        sv.top = y;
        y += sv.height + (sv.marginBottom || vMargin);
    });

    if (maxWidth > 0) widestWidth = Math.min(maxWidth, widestWidth);

    var gravity = opts.gravity || 'middle',
        cx = view.halfWidth,
        stackHeight = y;

    var topOffset;
    switch (gravity) {
        case 'top':
            topOffset = view.contentTop;
            break;

        case 'middle':
            topOffset = view.contentTop + (view.contentHeight - stackHeight) / 2;
            break;

        case 'bottom':
            topOffset = view.contentTop + view.contentBottom - stackHeight;
            break;
    }

    _lodash2.default.each(subviews, function (subview) {
        subview.top += topOffset;
        if (equalWidths) subview.width = widestWidth;
        if (minWidth > 0) subview.width = Math.max(subview.width, minWidth);
        subview.centerX = cx;
    });
}

/**
 * Layout subviews in a row-major top-left-to-bottom-right grid with fixed size cells.
 *
 * Cell size is determined from the number of columns requested, the current size
 * of the given container view, and the number of subviews.
 *
 * To be clear, all subviews will have the same size frame.
 *
 * options:
 * - `columns`: number of columns; defaults to 1.
 */

function layoutAsGrid(view, subviews, opts) {
    var columns = opts.columns || 1,
        cellWidth = view.contentWidth / columns,
        rows = Math.ceil(subviews.length / columns),
        cellHeight = view.contentHeight / rows,
        cellFrame = new _Frame2.default(new _Point2.default(view.contentLeft, view.contentTop), new _Size2.default(cellWidth, cellHeight));

    _lodash2.default.each(subviews, function (subview, index) {
        subview.frame.copy(cellFrame);
        if (index % columns === 0) {
            cellFrame.origin.set(0, cellFrame.origin.y + cellHeight);
        } else {
            cellFrame.origin.x += cellWidth;
        }
    });
}

/**
 * Layout the given subviews in the center of a grid of cells.
 *
 * Each subview is asked to size itself and is moved in the center
 * of each cell.
 *
 * options:
 * - `columns`: number of columns; defaults to 1.
 */

function layoutCenteredGrid(view, subviews, opts) {
    var columns = opts.columns || 1,
        cellWidth = view.contentWidth / columns,
        rows = Math.ceil(subviews.length / columns),
        cellHeight = view.contentHeight / rows,
        startCenterX = view.contentLeft + cellWidth / 2,
        center = new _Point2.default(startCenterX, view.contentTop + cellHeight / 2),
        noSizeToFit = !!opts.noSizeToFit;

    _lodash2.default.each(subviews, function (subview, index) {
        if (!noSizeToFit) {
            subview.sizeToFit();
        }

        subview.center = center;

        if ((index + 1) % columns === 0) {
            center.x = startCenterX;
            center.y += cellHeight;
        } else {
            center.x += cellWidth;
        }
    });
}

},{"./Frame":67,"./Point":85,"./Size":90,"lodash":53}],62:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if ("value" in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Label2 = require('./Label');

var _Label3 = _interopRequireDefault(_Label2);

var _Point = require('./Point');

var _Point2 = _interopRequireDefault(_Point);

var _magic = require('./magic');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Use `onTap` slot for handling.
 */

var Button = function (_Label) {
    _inherits(Button, _Label);

    function Button(text) {
        _classCallCheck(this, Button);

        var _this = _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).call(this, text));

        _this.userInteractionEnabled = true;
        _this.backgroundColor = '#fff';
        _this.textColor = '#555';
        _this._highlightedTextColor = '#333';
        _this.textBaseline = 'middle';
        _this.textAlign = 'center';
        _this.insets.setAll(12);
        _this.highlightsOnTouch = true;
        _this._offsetsOnTouch = true;
        return _this;
    }

    _createClass(Button, [{
        key: 'sizeToFit',
        value: function sizeToFit() {
            _get(Button.prototype.__proto__ || Object.getPrototypeOf(Button.prototype), 'sizeToFit', this).call(this);
            this.height = Math.max(this.height, _magic.FingerSizePoints);
            return this;
        }
    }, {
        key: 'touchStart',
        value: function touchStart(localPoint) {
            _set(Button.prototype.__proto__ || Object.getPrototypeOf(Button.prototype), 'textColor', this.highlightedTextColor, this);

            if (this.offsetsOnTouch) {
                this.position.addSelf(new _Point2.default(0, 2));
            }

            _get(Button.prototype.__proto__ || Object.getPrototypeOf(Button.prototype), 'touchStart', this).call(this, localPoint);
        }
    }, {
        key: 'touchEnd',
        value: function touchEnd(localPoint) {
            _set(Button.prototype.__proto__ || Object.getPrototypeOf(Button.prototype), 'textColor', this._normalTextColor, this);

            if (this.offsetsOnTouch) {
                this.position.subSelf(new _Point2.default(0, 2));
            }

            _get(Button.prototype.__proto__ || Object.getPrototypeOf(Button.prototype), 'touchEnd', this).call(this, localPoint);
        }
    }, {
        key: 'keyPressed',
        value: function keyPressed(key) {
            if (key === 'Enter') {
                this.emit('tap');
            }
        }
    }, {
        key: 'textColor',
        get: function get() {
            return _get(Button.prototype.__proto__ || Object.getPrototypeOf(Button.prototype), 'textColor', this);
        },
        set: function set(color) {
            _set(Button.prototype.__proto__ || Object.getPrototypeOf(Button.prototype), 'textColor', color, this);
            this._normalTextColor = color;
        }
    }, {
        key: 'highlightedTextColor',
        get: function get() {
            return this._highlightedTextColor;
        },
        set: function set(color) {
            this._highlightedTextColor = color;
        }
    }, {
        key: 'offsetsOnTouch',
        get: function get() {
            return this._offsetsOnTouch;
        },
        set: function set(yesNo) {
            this._offsetsOnTouch = yesNo;
            this.needsDisplay = true;
        }
    }]);

    return Button;
}(_Label3.default);

exports.default = Button;

},{"./Label":75,"./Point":85,"./magic":105}],63:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

var _core = require('./core');

var _Point = require('./Point');

var _Point2 = _interopRequireDefault(_Point);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

//import {transparent} from './magic';

/**
 * A color picker.
 *
 * Lets the user touch the view to select a color.
 *
 * FYI, this looks like the "Spectrum" color picker as part of OS X.;
 *
 * Events:
 * - colorPicked("rgb($r, $g, $b)");
 */

var ColorPickerView = function (_View) {
    _inherits(ColorPickerView, _View);

    function ColorPickerView() {
        _classCallCheck(this, ColorPickerView);

        return _possibleConstructorReturn(this, (ColorPickerView.__proto__ || Object.getPrototypeOf(ColorPickerView)).apply(this, arguments));
    }

    _createClass(ColorPickerView, [{
        key: 'didLayoutSubviews',
        value: function didLayoutSubviews() {
            var _this2 = this;

            _get(ColorPickerView.prototype.__proto__ || Object.getPrototypeOf(ColorPickerView.prototype), 'didLayoutSubviews', this).call(this);

            // This works by drawing 2 gradients atop each other, a color one
            // and a partially transparent grayscale one. The user touches the
            // view and we read the color on the drawn canvas at that point.

            this._colorGradient = (0, _core.getContext)().createLinearGradient(0, 0, 0, this.height);
            var colors = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'magenta'];
            _lodash2.default.each(colors, function (color, index) {
                _this2._colorGradient.addColorStop(index / (colors.length - 1), color);
            });

            this._bwGradient = (0, _core.getContext)().createLinearGradient(0, 0, this.width, 0);
            this._bwGradient.addColorStop(0, 'white');
            this._bwGradient.addColorStop(0.15, 'rgba(255,255,255,0)');
            this._bwGradient.addColorStop(0.85, 'rgba(255,255,255,0)');
            this._bwGradient.addColorStop(1, 'black');

            this.userInteractionEnabled = true;

            this._pickedColor = null;
            this._pickedPoint = null;
            this._showPickedPoint = false;
        }
    }, {
        key: 'draw',
        value: function draw(context) {
            _get(ColorPickerView.prototype.__proto__ || Object.getPrototypeOf(ColorPickerView.prototype), 'draw', this).call(this, context);

            // Draw color gradient

            context.fillStyle = this._colorGradient;
            context.fillRect(0, 0, this.width, this.height);

            // Overlay with grayscale gradient

            context.fillStyle = this._bwGradient;
            context.fillRect(-1, 0, this.width + 1, this.height + 1);

            // Draw a little target

            if (this._pickedPoint && this._showPickedPoint) {
                var size = 5,
                    targetExtents = 2;

                context.beginPath();
                context.arc(this._pickedPoint.x, this._pickedPoint.y, size, 0, 2 * Math.PI, false);
                context.moveTo(this._pickedPoint.x - size - targetExtents, this._pickedPoint.y);
                context.lineTo(this._pickedPoint.x + size + targetExtents, this._pickedPoint.y);
                context.moveTo(this._pickedPoint.x, this._pickedPoint.y - size - targetExtents);
                context.lineTo(this._pickedPoint.x, this._pickedPoint.y + size + targetExtents);
                context.closePath();

                context.strokeStyle = 'rgba(0,0,0,0.5)';
                context.stroke();
            }
        }
    }, {
        key: '_getColorAtPoint',
        value: function _getColorAtPoint(localPoint) {
            if (!this._pickedPoint) {
                this._pickedPoint = new _Point2.default();
            }

            this._pickedPoint.set(Math.max(0, Math.min(this.width - 1, localPoint.x)), Math.max(0, Math.min(this.height - 1, localPoint.y)));

            var canvasPoint = this.rootView.convertLocalToSuperview(this.convertLocalToRoot(this._pickedPoint)),
                touchedColor = (0, _core.getContext)().getImageData(window.devicePixelRatio * canvasPoint.x, window.devicePixelRatio * canvasPoint.y, 1, 1).data;
            return touchedColor.slice(0, 3);
        }
    }, {
        key: '_didPickColorAtPoint',
        value: function _didPickColorAtPoint(localPoint) {
            var rgb = this._getColorAtPoint(localPoint),
                colorSpec = 'rgb(' + rgb[0] + ', ' + rgb[1] + ', ' + rgb[2] + ')';
            this._pickedColor = rgb;
            this.emit('colorPicked', colorSpec);
        }
    }, {
        key: 'touchStart',
        value: function touchStart(localPoint) {
            _get(ColorPickerView.prototype.__proto__ || Object.getPrototypeOf(ColorPickerView.prototype), 'touchStart', this).call(this, localPoint);

            this._didPickColorAtPoint(localPoint);

            // Hide since if there's a delay in rendering the picked color
            // might see the target itself!
            this._showPickedPoint = false;
        }
    }, {
        key: 'touchMove',
        value: function touchMove(localPoint) {
            _get(ColorPickerView.prototype.__proto__ || Object.getPrototypeOf(ColorPickerView.prototype), 'touchMove', this).call(this, localPoint);

            this._didPickColorAtPoint(localPoint);
            this._showPickedPoint = false;
        }
    }, {
        key: 'touchEnd',
        value: function touchEnd(localPoint) {
            _get(ColorPickerView.prototype.__proto__ || Object.getPrototypeOf(ColorPickerView.prototype), 'touchEnd', this).call(this, localPoint);
            this._showPickedPoint = true;
        }
    }, {
        key: 'pickedColor',
        get: function get() {
            return this._pickedColor;
        }
    }]);

    return ColorPickerView;
}(_View3.default);

exports.default = ColorPickerView;

},{"./Point":85,"./View":101,"./core":102,"lodash":53}],64:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _ImageView2 = require('./ImageView');

var _ImageView3 = _interopRequireDefault(_ImageView2);

var _Size = require('./Size');

var _Size2 = _interopRequireDefault(_Size);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * An image comprised of sub-images, one of which is drawn
 * when the view is redrawn.
 *
 * Here's an example composite image with 3 columns, 4 rows,
 * and 10 total sub-images.  The number represents the sub-image's
 * "index".  Note that this example has 2 blank/unused;
 * sub-images in its last row.
 *
 *     +---+---+---+
 *     | 0 | 1 | 2 |
 *     +---+---+---+
 *     | 3 | 4 | 5 |
 *     +---+---+---+
 *     | 6 | 7 | 8 |
 *     +---+---+---+
 *     | 9 |   |   |
 *     +---+---+---+
 */

var CompositeImageView = function (_ImageView) {
    _inherits(CompositeImageView, _ImageView);

    /**
     * The given image is comprised of same-sized sub-images
     * arranged in a 2-D grid from top-left to bottom-right.
     * The grid has `columns` columns and `rows` rows.  The
     * number of sub-images is by default `rows x columns`
     * but if the last row is not full, specify `subimageCount`
     */

    function CompositeImageView(image, columns, rows) {
        var subimageCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

        _classCallCheck(this, CompositeImageView);

        var _this = _possibleConstructorReturn(this, (CompositeImageView.__proto__ || Object.getPrototypeOf(CompositeImageView)).call(this, image, 'scaleToFill'));

        if (!_lodash2.default.isFinite(columns) || columns <= 0 || !_lodash2.default.isFinite(rows) || rows <= 0) {
            throw new Error('invalid geometry for composite image');
        }

        _this._columns = columns | 0;
        _this._rows = rows | 0;

        if (_lodash2.default.isFinite(subimageCount) && subimageCount > 0 && subimageCount < _this._columns * _this._rows) {
            _this._subimageCount = subimageCount | 0;
        } else {
            _this._subimageCount = _this._columns * _this._rows;
        }

        _this._index = 0;

        if (image.complete) {
            _this._imageLoaded();
        } else {
            _this.on('loaded', _this._imageLoaded.bind(_this));
        }
        return _this;
    }

    _createClass(CompositeImageView, [{
        key: '_imageLoaded',
        value: function _imageLoaded() {
            var image = this._image;

            this._subimageSize = new _Size2.default(Math.floor(image.width / this._columns), Math.floor(image.height / this._rows));

            this.needsDisplay = true;
        }
    }, {
        key: 'sizeToFit',
        value: function sizeToFit() {
            if (this._subimageSize) {
                this.size.copy(this._subimageSize);
            }
        }

        /**
         * Make the next sub-image current.
         *
         * If `wrapAround` is true then wrap around to the first sub-image
         * if advancing to the next would extend past the last sub-image.
         */

    }, {
        key: 'makeNextCurrent',
        value: function makeNextCurrent() {
            var wrapAround = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            var N = this._subimageCount,
                index = this.index;

            if (index + 1 === N) {
                if (wrapAround) {
                    this.index = 0;
                    this.needsDisplay = true;
                }
            } else {
                this.index = index + 1;
                this.needsDisplay = true;
            }
        }

        /**
         * Make the previous sub-image current.
         *
         * If `wrapAround` is true then wrap around to the last sub-image
         * if moving to the previous sub-image would extend before the
         * first sub-image.
         */

    }, {
        key: 'makePreviousCurrent',
        value: function makePreviousCurrent() {
            var wrapAround = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            var N = this._subimageCount,
                index = this.index;

            if (index - 1 < 0) {
                if (wrapAround) {
                    this.index = N - 1;
                    this.needsDisplay = true;
                }
            } else {
                this.index = index - 1;
                this.needsDisplay = true;
            }
        }

        // Draw the current sub-image.

    }, {
        key: 'drawImage',
        value: function drawImage(context, image, x, y, w, h) {
            var subimageSize = this._subimageSize;
            if (!subimageSize) {
                // Wait for image to load.
                return;
            }

            var index = this.index,
                cols = this._columns,
                subimageRow = Math.floor(index / cols),
                subimageCol = index % cols,
                subimageLeft = Math.round(subimageCol * subimageSize.width),
                subimageTop = Math.round(subimageRow * subimageSize.height);

            context.drawImage(image, subimageLeft, subimageTop, subimageSize.width, subimageSize.height, x, y, w, h);
        }
    }, {
        key: 'imageWidth',
        get: function get() {
            return this._subimageSize ? this._subimageSize.width : 0;
        }
    }, {
        key: 'imageHeight',
        get: function get() {
            return this._subimageSize ? this._subimageSize.height : 0;
        }

        /**
         * Explicitly get/set the index of the currently displayed sub-image.
         */

    }, {
        key: 'index',
        get: function get() {
            return this._index;
        },
        set: function set(index) {
            if (_lodash2.default.isFinite(index) && this._index !== index && index >= 0 && index < this._subimageCount) {

                this._index = index;
                this.needsDisplay = true;
            }
        }
    }]);

    return CompositeImageView;
}(_ImageView3.default);

exports.default = CompositeImageView;

},{"./ImageView":69,"./Size":90,"lodash":53}],65:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MessageView2 = require('./MessageView');

var _MessageView3 = _interopRequireDefault(_MessageView2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A view that confirms that the user wishes to continue with
 * some action.  Does not auto-remove itself on button taps; that's
 * up to you.
 *
 * Events:
 * - canceled()
 * - confirmed()
 */

var ConfirmView = function (_MessageView) {
    _inherits(ConfirmView, _MessageView);

    function ConfirmView(title, message) {
        var negativeText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'No';
        var affirmativeText = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'Yes';

        _classCallCheck(this, ConfirmView);

        var _this = _possibleConstructorReturn(this, (ConfirmView.__proto__ || Object.getPrototypeOf(ConfirmView)).call(this, title, message));

        _this.addButtonWithHandler(negativeText, _this.emit.bind(_this, 'canceled'));
        _this.addButtonWithHandler(affirmativeText, _this.emit.bind(_this, 'confirmed'));
        return _this;
    }

    return ConfirmView;
}(_MessageView3.default);

exports.default = ConfirmView;

},{"./MessageView":76}],66:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Padding along each edge of a rectangle.
 *
 * Events:
 * - valueChanged();
 */

var EdgeInsets = function (_EventEmitter) {
    _inherits(EdgeInsets, _EventEmitter);

    function EdgeInsets() {
        var top = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var left = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var bottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var right = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

        _classCallCheck(this, EdgeInsets);

        if (!_lodash2.default.isFinite(top) || !_lodash2.default.isFinite(left) || !_lodash2.default.isFinite(bottom) || !_lodash2.default.isFinite(right)) {
            throw new Error('number required');
        }

        var _this = _possibleConstructorReturn(this, (EdgeInsets.__proto__ || Object.getPrototypeOf(EdgeInsets)).call(this));

        _this._top = Math.abs(top);
        _this._left = Math.abs(left);
        _this._bottom = Math.abs(bottom);
        _this._right = Math.abs(right);
        return _this;
    }

    _createClass(EdgeInsets, [{
        key: 'didChange',
        value: function didChange() {
            this.emit('valueChanged');
        }
    }, {
        key: 'setAll',
        value: function setAll(v) {
            if (!_lodash2.default.isFinite(v)) {
                throw new Error('number required');
            }

            var value = Math.max(0, v);

            return this.set(value, value, value, value);
        }
    }, {
        key: 'setHorizontal',
        value: function setHorizontal(l, r) {
            this.left = l;
            this.right = r !== undefined ? r : l;
            return this;
        }
    }, {
        key: 'setVertical',
        value: function setVertical(t, b) {
            this.top = t;
            this.bottom = b !== undefined ? b : t;
            return this;
        }
    }, {
        key: 'set',
        value: function set(t, l, b, r) {
            if (!_lodash2.default.isFinite(t) || !_lodash2.default.isFinite(l) || !_lodash2.default.isFinite(b) || !_lodash2.default.isFinite(r)) {
                throw new Error('number required');
            }

            var changed = false;

            t = Math.abs(t);
            if (this._top !== t) {
                this._top = t;
                changed = true;
            }

            l = Math.abs(l);
            if (this._left !== l) {
                this._left = l;
                changed = true;
            }

            b = Math.abs(b);
            if (this._bottom !== b) {
                this._bottom = b;
                changed = true;
            }

            r = Math.abs(r);
            if (this._right !== r) {
                this._right = r;
                changed = true;
            }

            if (changed) {
                this.didChange();
            }

            return this;
        }
    }, {
        key: 'top',
        get: function get() {
            return this._top;
        },
        set: function set(t) {
            if (!_lodash2.default.isFinite(t)) {
                throw new Error('number required');
            }

            t = Math.abs(t);

            if (this._top !== t) {
                this._top = t;
                this.didChange();
            }
        }
    }, {
        key: 'left',
        get: function get() {
            return this._left;
        },
        set: function set(l) {
            if (!_lodash2.default.isFinite(l)) {
                throw new Error('number required');
            }

            l = Math.abs(l);

            if (this._left !== l) {
                this._left = l;
                this.didChange();
            }
        }
    }, {
        key: 'bottom',
        get: function get() {
            return this._bottom;
        },
        set: function set(b) {
            if (!_lodash2.default.isFinite(b)) {
                throw new Error('number required');
            }

            b = Math.abs(b);

            if (this._bottom !== b) {
                this._bottom = b;
                this.didChange();
            }
        }
    }, {
        key: 'right',
        get: function get() {
            return this._right;
        },
        set: function set(r) {
            if (!_lodash2.default.isFinite(r)) {
                throw new Error('number required');
            }

            r = Math.abs(r);

            if (this._right !== r) {
                this._right = r;
                this.didChange();
            }
        }
    }]);

    return EdgeInsets;
}(_events2.default);

exports.default = EdgeInsets;

},{"events":109,"lodash":53}],67:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Point = require('./Point');

var _Point2 = _interopRequireDefault(_Point);

var _Size = require('./Size');

var _Size2 = _interopRequireDefault(_Size);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * A frame is a 2-D rectangular coordinate system with its origin in
 * its top-left corner, X axis extending rightwards, and Y axis extending downwards.
 *
 * Use `setOrigin`, `setSize`, or `set` to alter values as these
 * trigger events that notify listeners that the frame has changed.
 * Failing that, manually trigger the change event via `didChange`
 * when altering the frame's origin and/or size manually.
 */

var Frame = function () {
    function Frame(origin, size) {
        _classCallCheck(this, Frame);

        this.origin = origin || new _Point2.default();
        this.size = size || new _Size2.default();
    }

    _createClass(Frame, [{
        key: 'setOrigin',
        value: function setOrigin(x, y) {
            this.origin.set(x, y);
        }
    }, {
        key: 'setSize',
        value: function setSize(width, height) {
            this.size.set(width, height);
        }
    }, {
        key: 'set',
        value: function set(x, y, width, height) {
            this.origin.set(x, y);
            this.size.set(width, height);
            return this;
        }
    }, {
        key: 'copy',
        value: function copy(otherFrame) {
            this.origin.copy(otherFrame.origin);
            this.size.copy(otherFrame.size);
            return this;
        }
    }, {
        key: 'clone',
        value: function clone() {
            return new Frame(this.origin.clone(), this.size.clone());
        }
    }, {
        key: 'toString',
        value: function toString() {
            return '{' + this.origin.x + ',' + this.origin.y + ',' + this.size.width + ',' + this.size.height + '}';
        }
    }], [{
        key: 'makeFrame',
        value: function makeFrame(x, y, width, height) {
            return new Frame(new _Point2.default(x, y), new _Size2.default(width, height));
        }
    }]);

    return Frame;
}();

exports.default = Frame;

},{"./Point":85,"./Size":90}],68:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

var _fonts = require('./fonts');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Just draws a grid with major (thicker) and minor lines.
 *
 * Think graph paper.
 */

var GridView = function (_View) {
    _inherits(GridView, _View);

    function GridView() {
        var minorLineSpacing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
        var majorLineSpacing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;

        _classCallCheck(this, GridView);

        var _this = _possibleConstructorReturn(this, (GridView.__proto__ || Object.getPrototypeOf(GridView)).call(this));

        _this._minorLineSpacing = minorLineSpacing;
        _this._majorLineSpacing = majorLineSpacing;

        _this._minorLineColor = '#eee';
        _this._majorLineColor = '#aaa';

        _this._minorLineWidth = 1;
        _this._majorLineWidth = 2;

        _this._showMajorLabels = true;
        _this._font = (0, _fonts.SystemFontOfSize)(9);
        _this._textColor = '#aaa';
        return _this;
    }

    _createClass(GridView, [{
        key: 'draw',
        value: function draw(context) {
            _get(GridView.prototype.__proto__ || Object.getPrototypeOf(GridView.prototype), 'draw', this).call(this, context);

            this.drawGrid(context, this.minorLineWidth, this.minorLineSpacing, this.minorLineColor, false);

            this.drawGrid(context, this.majorLineWidth, this.majorLineSpacing, this.majorLineColor, this.showMajorLabels);
        }
    }, {
        key: 'drawGrid',
        value: function drawGrid(context, lineWidth, spacing, color, showLabels) {
            if (showLabels) {
                context.fillStyle = this.textColor;
            }

            context.beginPath();

            var width = this.width,
                height = this.height,
                cl = this.contentLeft,
                cr = this.contentRight,
                ct = this.contentTop,
                cb = this.contentBottom;

            // Horizontal

            for (var y = 0; y < height; y += spacing) {
                context.moveTo(0, y);
                context.lineTo(width, y);

                if (showLabels && y > 0) {
                    context.textBaseline = 'top';
                    context.textAlign = 'left';
                    context.fillText(y, cl, y + lineWidth);

                    context.textAlign = 'right';
                    context.fillText(y, cr, y + lineWidth);
                }
            }

            // Vertical

            for (var x = 0; x < width; x += spacing) {
                context.moveTo(x, 0);
                context.lineTo(x, height);

                if (showLabels && x > 0) {
                    context.textAlign = 'left';
                    context.textBaseline = 'top';
                    context.fillText(x, x + lineWidth, ct);

                    context.textBaseline = 'bottom';
                    context.fillText(x, x + lineWidth, cb);
                }
            }

            context.closePath();

            context.strokeStyle = color;
            context.lineWidth = lineWidth;
            context.stroke();
        }
    }, {
        key: 'minorLineSpacing',
        get: function get() {
            return this._minorLineSpacing;
        },
        set: function set(value) {
            if (this._minorLineSpacing !== value) {
                this._minorLineSpacing = value;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'majorLineSpacing',
        get: function get() {
            return this._majorLineSpacing;
        },
        set: function set(value) {
            if (this._majorLineSpacing !== value) {
                this._majorLineSpacing = value;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'minorLineColor',
        get: function get() {
            return this._minorLineColor;
        },
        set: function set(value) {
            if (this._minorLineColor !== value) {
                this._minorLineColor = value;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'majorLineColor',
        get: function get() {
            return this._majorLineColor;
        },
        set: function set(value) {
            if (this._majorLineColor !== value) {
                this._majorLineColor = value;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'minorLineWidth',
        get: function get() {
            return this._minorLineWidth;
        },
        set: function set(value) {
            if (this._minorLineWidth !== value) {
                this._minorLineWidth = value;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'majorLineWidth',
        get: function get() {
            return this._majorLineWidth;
        },
        set: function set(value) {
            if (this._majorLineWidth !== value) {
                this._majorLineWidth = value;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'showMajorLabels',
        get: function get() {
            return this._showMajorLabels;
        },
        set: function set(value) {
            if (this._showMajorLabels !== value) {
                this._showMajorLabels = value;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'font',
        get: function get() {
            return this._font;
        },
        set: function set(value) {
            if (this._font !== value) {
                this._font = value;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'textColor',
        get: function get() {
            return this._textColor;
        },
        set: function set(value) {
            if (this._textColor !== value) {
                this._textColor = value;
                this.needsDisplay = true;
            }
        }
    }]);

    return GridView;
}(_View3.default);

exports.default = GridView;

},{"./View":101,"./fonts":103}],69:[function(require,module,exports){
(function (process){(function (){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A view of an raster image.
 *
 * If `image` is actually a string, it is considered a URL from
 * which the image is loaded.
 *
 * Set `.scalingMode` to one of `"scaleToFill"`, `"scaleAspectFit"`, or
 * `"scaleAspectFill"`.
 *
 * The image is always drawn with its center at the view's content center.
 *
 * `"scaleToFill"` means the image is drawn to fit the content frame of the image view,
 * scaling/stretching as needed.
 *
 * `"scaleAspectFit"` means the image is drawn to fit the content frame of the image view,
 * scaling as needed but preserving aspect ratio and never extending beyond the content
 * frame.
 *
 * `"scaleAspectFill"` means the image is drawn to fit the content frame of the image view,
 * scaling as needed but preserving aspect ratio and allow the image to extend beyond the content
 * frame.
 */

var ImageView = function (_View) {
    _inherits(ImageView, _View);

    function ImageView(image) {
        var scalingMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'scaleAspectFit';

        _classCallCheck(this, ImageView);

        var _this = _possibleConstructorReturn(this, (ImageView.__proto__ || Object.getPrototypeOf(ImageView)).call(this));

        _this.image = image;
        _this._scalingMode = scalingMode;

        _this.userInteractionEnabled = false;
        return _this;
    }

    _createClass(ImageView, [{
        key: 'sizeToFit',
        value: function sizeToFit() {
            this.size.set(this._image.width, this._image.height);
            return this;
        }
    }, {
        key: 'draw',
        value: function draw(context) {
            var image = this._image;

            if (!image || !image.complete) {
                return;
            }

            var wImage = this.imageWidth,
                hImage = this.imageHeight,
                rImage = wImage / hImage,
                wView = this.contentWidth,
                hView = this.contentHeight,
                rView = wView / hView;

            var x, y, w, h;

            switch (this._scalingMode) {
                case 'scaleToFill':
                    x = this.contentLeft;
                    y = this.contentTop;
                    w = wView;
                    h = hView;
                    break;

                case 'scaleAspectFit':
                    // AKA contain
                    if (rImage <= rView) {
                        w = hView * rImage;
                        h = hView;
                    } else {
                        w = wView;
                        h = wView / rImage;
                    }
                    x = this.halfWidth - w / 2;
                    y = this.halfHeight - h / 2;
                    break;

                case 'scaleAspectFill':
                    // AKA cover
                    if (rImage <= rView) {
                        w = wView;
                        h = wView / rImage;
                    } else {
                        w = hView * rImage;
                        h = hView;
                    }
                    x = this.halfWidth - w / 2;
                    y = this.halfHeight - h / 2;
                    break;

                case 'center':
                    w = wImage;
                    h = hImage;
                    break;
            }

            if (this.shadowColor) {
                context.shadowColor = this.shadowColor;
                context.shadowBlur = this.shadowBlur;
                context.shadowOffsetX = this.shadowOffsetX;
                context.shadowOffsetY = this.shadowOffsetY;
            }

            this.drawImage(context, this._image, x, y, w, h);
        }
    }, {
        key: 'drawImage',
        value: function drawImage(context, image, x, y, width, height) {
            context.drawImage(image, x, y, width, height);
        }
    }, {
        key: 'image',
        get: function get() {
            return this._image;
        },
        set: function set(image) {
            var _this2 = this;

            var imageDidLoad = function imageDidLoad() {
                _this2.emit('loaded');

                if (_this2.superview) {
                    _this2.superview.needsLayout = true;
                }

                _this2.needsDisplay = true;
            };

            if (!image) {
                this._image = null;
                imageDidLoad();
                return;
            }

            if (_lodash2.default.isString(image)) {
                var url = image;
                image = new Image();
                image.src = url;
            }

            this._image = image;

            if (this._image.complete) {
                process.nextTick(imageDidLoad);
            } else {
                this._image.addEventListener('load', imageDidLoad, false);
            }
        }
    }, {
        key: 'scalingMode',
        get: function get() {
            return this._scalingMode;
        },
        set: function set(scalingMode) {
            this._scalingMode = scalingMode;

            this.needsDisplay = true;
        }
    }, {
        key: 'imageWidth',
        get: function get() {
            return this._image ? this._image.width : 0;
        }
    }, {
        key: 'imageHeight',
        get: function get() {
            return this._image ? this._image.height : 0;
        }
    }]);

    return ImageView;
}(_View3.default);

exports.default = ImageView;

}).call(this)}).call(this,require('_process'))

},{"./View":101,"_process":110,"lodash":53}],70:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

var _BasicAnimations = require('./BasicAnimations');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Disallows a user from interacting with anything under this view;
 * while allowing the user to see through to the view(s) under this view.;
 */

var InputBlockerView = function (_View) {
    _inherits(InputBlockerView, _View);

    function InputBlockerView(blockingForView) {
        _classCallCheck(this, InputBlockerView);

        var _this = _possibleConstructorReturn(this, (InputBlockerView.__proto__ || Object.getPrototypeOf(InputBlockerView)).call(this));

        _this.backgroundColor = 'rgba(0,0,0,0.3)';
        _this.blockingForView = blockingForView;
        return _this;
    }

    _createClass(InputBlockerView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.frame = this.superview.bounds;
        }

        // Wait to remove it until it fades out

    }, {
        key: 'removeFromSuperview',
        value: function removeFromSuperview() {
            var _this2 = this;

            this.addAnimation(new _BasicAnimations.FadeOut(this)).once('complete', function () {
                _get(InputBlockerView.prototype.__proto__ || Object.getPrototypeOf(InputBlockerView.prototype), 'removeFromSuperview', _this2).call(_this2);
            });
        }

        // Simply don't call super.x to stop events from being emitted.
        //
        // However, touching the input blocker removes the view for which
        // the input blocker exists.

    }, {
        key: 'touchStart',
        value: function touchStart() {
            if (this.blockingForView) {
                this.blockingForView.removeFromSuperview();
            }
        }
    }, {
        key: 'tapped',
        value: function tapped() {}
    }, {
        key: 'touchEnd',
        value: function touchEnd() {}
    }]);

    return InputBlockerView;
}(_View3.default);

exports.default = InputBlockerView;

},{"./BasicAnimations":60,"./View":101}],71:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _View = require('./View');

var _View2 = _interopRequireDefault(_View);

var _Button2 = require('./Button');

var _Button3 = _interopRequireDefault(_Button2);

var _fonts = require('./fonts');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A button that acts as a keyboard button.
 *
 * Sends `keyPressed` to the first responder on tap.
 */

var KeyButton = function (_Button) {
    _inherits(KeyButton, _Button);

    function KeyButton(letter) {
        var proxyKeyPressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        _classCallCheck(this, KeyButton);

        var _this = _possibleConstructorReturn(this, (KeyButton.__proto__ || Object.getPrototypeOf(KeyButton)).call(this, letter));

        _this.id = 'Key ' + letter;
        _this.backgroundColor = '#555';
        _this.textColor = '#ddd';
        _this.font = (0, _fonts.SystemFontOfSize)(14);
        _this.insets.setAll(5);
        _this.borderWidth = 0;

        if (proxyKeyPressed) {
            _this.on('tap', function () {
                if (_View2.default.firstResponder) {
                    _View2.default.firstResponder.keyPressed(_this.text);
                }
            });
        }
        return _this;
    }

    return KeyButton;
}(_Button3.default);

exports.default = KeyButton;

},{"./Button":62,"./View":101,"./fonts":103}],72:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * An arrangement of keyboard key buttons.
 */

var KeyboardLayout = function (_View) {
    _inherits(KeyboardLayout, _View);

    function KeyboardLayout(keyboard) {
        _classCallCheck(this, KeyboardLayout);

        var _this = _possibleConstructorReturn(this, (KeyboardLayout.__proto__ || Object.getPrototypeOf(KeyboardLayout)).call(this));

        _this.keyboard = keyboard;
        _this.backgroundColor = '#222';
        _this.insets.setAll(10);
        return _this;
    }

    return KeyboardLayout;
}(_View3.default);

exports.default = KeyboardLayout;

},{"./View":101}],73:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _KeyboardLayout2 = require('./KeyboardLayout');

var _KeyboardLayout3 = _interopRequireDefault(_KeyboardLayout2);

var _ModifierKeyButton = require('./ModifierKeyButton');

var _ModifierKeyButton2 = _interopRequireDefault(_ModifierKeyButton);

var _KeyButton = require('./KeyButton');

var _KeyButton2 = _interopRequireDefault(_KeyButton);

var _AlternateKeysView = require('./AlternateKeysView');

var _AlternateKeysView2 = _interopRequireDefault(_AlternateKeysView);

var _ToggleKeyButton = require('./ToggleKeyButton');

var _ToggleKeyButton2 = _interopRequireDefault(_ToggleKeyButton);

var _View = require('./View');

var _View2 = _interopRequireDefault(_View);

var _fonts = require('./fonts');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var qwertyAlternates = {
    'e': { lower: 'èéêëēėę', upper: 'ÈÉÊËĒĖĘ' },
    'y': { lower: 'ÿ', upper: 'Ÿ' },
    'u': { lower: 'ūúùüû', upper: 'ŪÚÙÜÛ' },
    'i': { lower: 'ìįīíïî', upper: 'ÌĮĪÍÏÎ' },
    'o': { lower: 'õōøœóòöô', upper: 'ÕŌØŒÓÒÖÔ' },
    'a': { lower: 'áàâäæãåā', upper: 'ÁÀÂÄӔÃÅĀ' },
    's': { lower: 'ßśš', upper: 'ŚŠ' },
    'l': { lower: 'ł', upper: 'Ł' },
    'z': { lower: 'žźż', upper: 'ŽŹŻ' },
    'c': { lower: 'çćč', upper: 'ÇĆČ' },
    'n': { lower: 'ńñ', upper: 'ŃÑ' },
    '0': { lower: '°' }, // no shift since symbols
    '-': { lower: '–—·' },
    '/': { lower: '\\' },
    '$': { lower: '₱¥€¢₤₩' },
    '&': { lower: '§' },
    '"': { lower: '«»„“”' },
    '.': { lower: '…' },
    '?': { lower: '¿' },
    '!': { lower: '¡' },
    '\'': { lower: '‵‘’' },
    '%': { lower: '‰' }
};

/**
 * A keyboard layout that follows the US keyboard for iOS.
 *
 * - Does not support special modes like numbers, email, etc.
 * - Does not support spell check, autocorrect, autocapitalization, double-space for entering
 *   a full-stop/period, shortcuts, and so on.
 *
 * The goal here is not to create a perfect replica of the iOS keyboard but rather get a good
 * enough experience for games.
 */

var KeyboardLayoutQwerty = function (_KeyboardLayout) {
    _inherits(KeyboardLayoutQwerty, _KeyboardLayout);

    function KeyboardLayoutQwerty(keyboard) {
        _classCallCheck(this, KeyboardLayoutQwerty);

        var _this = _possibleConstructorReturn(this, (KeyboardLayoutQwerty.__proto__ || Object.getPrototypeOf(KeyboardLayoutQwerty)).call(this, keyboard));

        _this.backspaceKey = new _ModifierKeyButton2.default('⌫');
        _this.addSubview(_this.backspaceKey);
        _this.backspaceKey.on('tap', function () {
            if (_View2.default.firstResponder) {
                _View2.default.firstResponder.keyPressed('Backspace');
            }
        });

        _this.returnKey = new _KeyButton2.default('Done', false);
        _this.addSubview(_this.returnKey);
        _this.returnKey.backgroundColor = '#0078fd';
        _this.returnKey.textColor = '#ddd';
        _this.returnKey.on('tap', function () {
            if (_View2.default.firstResponder) {
                _View2.default.firstResponder.keyPressed('Enter');
            }
        });

        _this.spaceKey = new _KeyButton2.default('space', false);
        _this.addSubview(_this.spaceKey);
        _this.spaceKey.on('tap', function () {
            if (_View2.default.firstResponder) {
                _View2.default.firstResponder.keyPressed(' ');
            }
        });

        _this.majorModeKey = new _ModifierKeyButton2.default('');
        _this.addSubview(_this.majorModeKey);
        _this.majorModeKey.on('tap', function () {
            _this.majorMode = _this.majorMode !== 'letters' ? 'letters' : 'numbersAndSymbols';
        });

        _this.spaceKey.font = _this.returnKey.font = (0, _fonts.SystemFontOfSize)(12);
        _this.majorModeKey.font = (0, _fonts.SystemFontOfSize)(10);
        _this.backspaceKey.font = (0, _fonts.SystemFontOfSize)(14);

        _this.majorMode = 'letters';
        _this.keyMargin = 5;

        _this._keyboard = keyboard;
        return _this;
    }

    _createClass(KeyboardLayoutQwerty, [{
        key: '_removeAlternatesView',
        value: function _removeAlternatesView() {
            var _this2 = this;

            // Only one of these active at any time...

            _lodash2.default.each(this._keyboard.superview.subviews, function (subview) {
                if (subview !== _this2 && subview instanceof _AlternateKeysView2.default) {
                    subview.removeFromSuperview();
                }
            });
        }
    }, {
        key: '_addShiftKey',
        value: function _addShiftKey() {
            var _this3 = this;

            this.shiftKey = new _ToggleKeyButton2.default('⬆︎', '⬆︎'); // meh look at unicode tables; odd
            this.addSubview(this.shiftKey);
            this.shiftKey.on('selectedChanged', function (isSelected) {
                _lodash2.default.each(_this3.rows, function (row) {
                    _lodash2.default.each(row, function (btn) {
                        if (isSelected) {
                            btn.text = btn.text.toUpperCase();
                        } else {
                            btn.text = btn.text.toLowerCase();
                        }
                    });
                });
            });
        }
    }, {
        key: '_addMinorModeKey',
        value: function _addMinorModeKey() {
            var _this4 = this;

            this.minorModeKey = new _KeyButton2.default('#+=');
            this.minorModeKey.font = (0, _fonts.SystemFontOfSize)(12);
            this.addSubview(this.minorModeKey);
            this.minorModeKey.on('tap', function () {
                _this4.majorMode = _this4.majorMode === 'extendedSymbols' ? 'numbersAndSymbols' : 'extendedSymbols';
            });
        }
    }, {
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            var _this5 = this;

            var rowCount = this.rows.length + 1,
                marginsBetweenRows = this.keyMargin * (rowCount - 1),
                rowHeight = (this.contentHeight - marginsBetweenRows) / rowCount;

            var keyWidth = Math.round(_lodash2.default.min(_lodash2.default.map(this.rows, function (row) {
                var totalMarginSize = (row.length - 1) * _this5.keyMargin;
                return (_this5.contentWidth - totalMarginSize) / row.length;
            })));

            var rowTop = this.contentTop;

            _lodash2.default.each(this.rows, function (row) {
                var totalMarginSize = (row.length - 1) * _this5.keyMargin,
                    rowWidth = keyWidth * row.length + totalMarginSize;

                var keyLeft = _this5.contentCenterX - rowWidth / 2;

                _lodash2.default.each(row, function (btn) {
                    btn.frame.set(keyLeft, rowTop, keyWidth, rowHeight);
                    keyLeft += keyWidth + _this5.keyMargin;
                });

                rowTop += rowHeight + _this5.keyMargin;
            });

            var lettersLastRowTop = _lodash2.default.last(this.rows)[0].top,
                lastRowTop = lettersLastRowTop + rowHeight + this.keyMargin,
                modKeyWidth = Math.round(keyWidth * 1.5);

            this.backspaceKey.frame.set(this.contentRight - modKeyWidth, lettersLastRowTop, modKeyWidth, rowHeight);

            var returnKeyWidth = modKeyWidth + this.keyMargin + keyWidth;

            this.returnKey.frame.set(this.contentRight - returnKeyWidth, lastRowTop, returnKeyWidth, rowHeight);

            this.majorModeKey.frame.set(this.contentLeft, lastRowTop, modKeyWidth, rowHeight);

            if (this.shiftKey) {
                this.shiftKey.frame.set(this.contentLeft, lettersLastRowTop, modKeyWidth, rowHeight);
            }

            if (this.minorModeKey) {
                this.minorModeKey.frame.set(this.contentLeft, lettersLastRowTop, modKeyWidth, rowHeight);
            }

            this.spaceKey.frame.set(this.majorModeKey.right + this.keyMargin, lastRowTop, this.returnKey.left - this.majorModeKey.right - this.keyMargin * 2, rowHeight);
        }
    }, {
        key: 'majorMode',
        get: function get() {
            return this._majorMode;
        },
        set: function set(mode) {
            var _this6 = this;

            this._majorMode = mode;

            if (this.shiftKey) {
                this.shiftKey.removeFromSuperview();
            }

            if (this.minorModeKey) {
                this.minorModeKey.removeFromSuperview();
            }

            var lettersPerRow;

            switch (mode) {
                case 'letters':
                    lettersPerRow = ['qwertyuiop'.split(''), 'asdfghjkl'.split(''), 'zxcvbnm'.split('')];

                    this.majorModeKey.text = '123';
                    this._addShiftKey();
                    break;

                case 'numbersAndSymbols':
                    lettersPerRow = ['1234567890'.split(''), '-/:;()$&@\''.split(''), '.,?!\''.split('')];

                    this.majorModeKey.text = 'ABC';
                    this._addMinorModeKey();
                    this.minorModeKey.text = '#+=';
                    break;

                case 'extendedSymbols':
                    lettersPerRow = ['[]{}#%^*+='.split(''), '_\|~<>€₤¥·'.split(''), '.,?!\''.split('')];

                    this.majorModeKey.text = 'ABC';
                    this._addMinorModeKey();
                    this.minorModeKey.text = '123';
                    break;
            }

            if (this.rows) {
                _lodash2.default.each(this.rows, function (row) {
                    _lodash2.default.each(row, function (btn) {
                        return btn.removeFromSuperview();
                    });
                });
            }

            var afterLetterKeyTap = function afterLetterKeyTap() {
                if (_this6.shiftKey) {
                    _this6.shiftKey.selected = false;
                }

                _this6._removeAlternatesView();
            };

            this.rows = _lodash2.default.map(lettersPerRow, function (letters) {
                return _lodash2.default.map(letters, function (letter) {
                    var btn = new _KeyButton2.default(letter);
                    _this6.addSubview(btn);

                    btn.on('tap', afterLetterKeyTap);

                    var alternates = qwertyAlternates[letter];
                    if (alternates) {
                        btn.altLower = alternates.lower;
                        btn.altUpper = alternates.upper;

                        btn.on('longPressed', function () {
                            var shiftSelected = _this6.shiftKey && _this6.shiftKey.selected,
                                alts = (shiftSelected && btn.altUpper || btn.altLower).split('');

                            _this6._removeAlternatesView();

                            _this6.rootView.addSubview(new _AlternateKeysView2.default(alts));
                        });
                    }

                    return btn;
                });
            });

            this.needsLayout = true;
        }
    }]);

    return KeyboardLayoutQwerty;
}(_KeyboardLayout3.default);

exports.default = KeyboardLayoutQwerty;

},{"./AlternateKeysView":56,"./KeyButton":71,"./KeyboardLayout":72,"./ModifierKeyButton":78,"./ToggleKeyButton":100,"./View":101,"./fonts":103,"lodash":53}],74:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.KeyboardView = exports.eventEmitter = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

exports.instance = instance;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

var _Size = require('./Size');

var _Size2 = _interopRequireDefault(_Size);

var _core = require('./core');

var _KeyboardLayoutQwerty = require('./KeyboardLayoutQwerty');

var _KeyboardLayoutQwerty2 = _interopRequireDefault(_KeyboardLayoutQwerty);

var _Point = require('./Point');

var _Point2 = _interopRequireDefault(_Point);

var _Animation = require('./Animation');

var _Animation2 = _interopRequireDefault(_Animation);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var _instance;

/**
 * There's only really one keyboard needed.
 *
 * When the user taps a key, the key is sent to the first responder's
 * `keyPressed` method.
 */

function instance() {
    var createOnDemand = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    if (!_instance && createOnDemand) {
        _instance = new KeyboardView();
        (0, _core.getRootView)().addSubview(_instance);
    }

    return _instance;
}

/**
 * Events:
 * - changedVisibility(keyboardView, isHidden);
 */

var eventEmitter = exports.eventEmitter = new _events2.default();

// ^^ This is at module scope to deal with the case wherein a software keyboard
// may not have been created and we do not want to create the instance just to
// add a listener to changes in its visibility state. We could use
// `instance(false)` -- true.  However, we have no event mechanism to let
// objects that care about keyboard visibility know that a keyboard was
// created.  Thus, we decouple such a visibility from the `KeyboardView`.
// *If* there's ever a `KeyboardView` created, listeners will be notified...

/**
 * A software keyboard.
 *
 * I would recommend that you use the native keyboard on mobile devices where possible
 * as that is what users will expect.  But, this is useful in a number of other cases.;
 */

var KeyboardView = exports.KeyboardView = function (_View) {
    _inherits(KeyboardView, _View);

    function KeyboardView() {
        _classCallCheck(this, KeyboardView);

        var _this = _possibleConstructorReturn(this, (KeyboardView.__proto__ || Object.getPrototypeOf(KeyboardView)).call(this));

        _this._layout = new _KeyboardLayoutQwerty2.default(_this);
        _this.addSubview(_this._layout);
        return _this;
    }

    _createClass(KeyboardView, [{
        key: 'wasAddedToView',
        value: function wasAddedToView() {
            var _this2 = this;

            _get(KeyboardView.prototype.__proto__ || Object.getPrototypeOf(KeyboardView.prototype), 'wasAddedToView', this).call(this);

            var size = this.size;
            this.frame.set(this.superview.halfWidth - size.width / 2, this.superview.height, size.width, size.height);

            this.hide(false);

            // Since the keyboard is always added to the application or root view,
            // we have to trigger layout on the keyboard when the root view changes.
            // The root view shouldn't have to do this itself.;

            var resizedTimeout,
                wasHidden = null;

            this.superview.frame.size.on('valueChanged', function () {
                if (wasHidden === null) {
                    wasHidden = _this2.hidden;
                }

                _this2.hide(false);

                clearTimeout(resizedTimeout);

                if (wasHidden === false) {
                    resizedTimeout = setTimeout(function () {
                        _this2.needsLayout = true;
                        _this2.layoutIfNeeded();
                        _this2.show(true);
                        wasHidden = null;
                    }, 500);
                }
            });
        }
    }, {
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.left = this.superview.halfWidth - this.halfWidth;

            if (this.hidden) {
                this.hide(false);
            } else {
                this.show(false);
            }

            this._layout.frame = this.bounds;
        }

        /**
         * Hide the keyboard.
         *
         * If `animated` is true, the keyboard is slid down and off the bottom of the
         * superview.;
         *
         * If the keyboard had previously moved the first responder out of the way so
         * as not to be obscured by the visible keyboard, that view's superview is slid;
         * back down as well.
         */

    }, {
        key: 'hide',
        value: function hide() {
            var _this3 = this;

            var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            var complete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            if (this.hidden) {
                if (_lodash2.default.isFunction(complete)) {
                    complete();
                }

                return;
            }

            var finalKeyboardTop = this.superview.height;

            if (!animated) {
                this.hidden = true;
                eventEmitter.emit('changedVisibility', this, this.hidden);
                this.top = finalKeyboardTop;

                if (_lodash2.default.isFunction(complete)) {
                    complete();
                }
            } else {
                this.userInteractionEnabled = false;

                this.addAnimation({
                    name: 'hide',
                    endValues: { top: finalKeyboardTop },
                    easing: _Animation2.default.easing.backStart
                }).once('complete', function () {
                    _this3.hidden = true;
                    eventEmitter.emit('changedVisibility', _this3, _this3.hidden);

                    if (_lodash2.default.isFunction(complete)) {
                        complete();
                    }
                });
            }

            return this;
        }

        /**
         * Shows the keyboard.
         *
         * If `animated` is true, the keyboard is slid up from the bottom of its superview,
         * else it's moved into move instantly.
         *
         * If there's a first responder, it's superview is slid up (or moved up instantly) as well.;
         */

    }, {
        key: 'show',
        value: function show() {
            var _this4 = this;

            var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            var complete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            if (!this.hidden) {
                if (_lodash2.default.isFunction(complete)) {
                    complete();
                }

                return;
            }

            var finalKeyboardTop = this.superview.height - this.height;
            this.hidden = false;

            if (!animated) {
                this.top = finalKeyboardTop;
                eventEmitter.emit('changedVisibility', this, this.hidden);

                if (_lodash2.default.isFunction(complete)) {
                    complete();
                }
            } else {
                this.top = this.superview.height;
                this.userInteractionEnabled = false;
                this.addAnimation({
                    name: 'show',
                    endValues: { top: finalKeyboardTop },
                    easing: _Animation2.default.easing.backEnd
                }).once('complete', function () {
                    _this4.userInteractionEnabled = true;
                    eventEmitter.emit('changedVisibility', _this4, _this4.hidden);

                    if (_lodash2.default.isFunction(complete)) {
                        complete();
                    }
                });
            }

            return this;
        }

        /**
         * Toggle visibility of keyboard.
         */

    }, {
        key: 'toggle',
        value: function toggle() {
            var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            if (this.hidden) {
                this.show(animated);
            } else {
                this.hide(animated);
            }
        }

        /**
         * This keyboard view is really a placeholder for the current set of keyboard
         * keys as handled by a `KeyboardLayout` object.
         *
         * The layout may be changed at any time.
         */

    }, {
        key: 'size',
        get: function get() {
            return new _Size2.default(Math.min(this.superview.width, 512), 216);
        }
    }, {
        key: 'layout',
        get: function get() {
            return this._layout;
        },
        set: function set(layout) {
            this._layout = layout;
            this.needsLayout = true;
        }
    }], [{
        key: 'instance',
        value: function instance() {
            var createOnDemand = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            if (!_instance) {
                _instance = new KeyboardView();
                (0, _core.getRootView)().addSubview(_instance);
            }

            return _instance;
        }
    }]);

    return KeyboardView;
}(_View3.default);

// Keyboard slides up from bottom of root view.
// Slide up the first responder so it is visible.
// When the keyboard is slid back down, slide down the first responder's superview.;

var offsetView, offsetDistance;

function moveFirstResponderForKeyboard() {
    var kbd = _instance;
    if (!kbd) {
        return;
    }

    var firstResponder = _View3.default.firstResponder;
    if (!firstResponder) {
        return;
    }

    if (offsetView) {
        offsetView.addAnimation({
            name: 'slideBackDownForKeyboard',
            endValues: { bottom: offsetView.bottom + offsetDistance }
        });
        offsetView = null;
        offsetDistance = 0;
    }

    var margin = 10;
    if (!kbd.hidden) {
        var firstResponderBottomInRoot = firstResponder.convertLocalToRoot(new _Point2.default(0, firstResponder.height)).y;
        if (firstResponderBottomInRoot > kbd.top - margin) {
            offsetView = firstResponder.firstNonRootView;
            offsetDistance = firstResponderBottomInRoot - kbd.top + margin;
            offsetView.addAnimation({
                name: 'slideUpForKeyboard',
                endValues: { bottom: offsetView.bottom - offsetDistance }
            });
        }
    } else if (offsetView) {
        offsetView.addAnimation({
            name: 'slideBackDownForKeyboard',
            endValues: { bottom: offsetView.bottom + offsetDistance }
        });
        offsetView = null;
        offsetDistance = 0;
    }
}

eventEmitter.on('changedVisibility', moveFirstResponderForKeyboard);

// When the first responder changes, move it if it is obscured by the keyboard.

_View3.default.globalEvents.on('firstResponderDidChange', moveFirstResponderForKeyboard);

},{"./Animation":57,"./KeyboardLayoutQwerty":73,"./Point":85,"./Size":90,"./View":101,"./core":102,"events":109,"lodash":53}],75:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

var _core = require('./core');

var _fonts = require('./fonts');

var _magic = require('./magic');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A read-only single line of text.
 *
 * Events:
 * - textChanged(entireNewText);
 */

var Label = function (_View) {
    _inherits(Label, _View);

    function Label(text) {
        _classCallCheck(this, Label);

        var _this = _possibleConstructorReturn(this, (Label.__proto__ || Object.getPrototypeOf(Label)).call(this));

        _this.backgroundColor = _magic.transparent;

        _this._text = text || '';
        _this._textColor = '#333';
        _this._tailTruncation = 'ellipsis';

        _this._textAlign = 'left';
        _this._textBaseline = 'middle';

        _this._textOutlineWidth = null;
        _this._textOutlineColor = null;
        _this._textOutlineOffset = null;

        _this._textShadowBlur = null;
        _this._textShadowColor = null;
        _this._textShadowOffsetX = null;
        _this._textShadowOffsetY = null;

        _this.userInteractionEnabled = false;
        return _this;
    }

    _createClass(Label, [{
        key: 'sizeToFit',


        // }}}

        /**
         * Makes the content frame of this label tightly fit the text.;
         * Be sure to set insets beforehand.
         */

        value: function sizeToFit() {
            var context = (0, _core.getContext)();

            context.save();
            context.font = this.font;

            var textWidth = Math.ceil(context.measureText(this.text).width) + 1,
                insets = this.insets,
                lh = (0, _fonts.lineHeight)(this.font);

            this.size.set(insets.left + textWidth + insets.right, insets.top + lh + insets.bottom);

            context.restore();

            return this;
        }
    }, {
        key: 'textLeft',
        value: function textLeft() /*context*/{
            switch (this.textAlign) {
                case 'left':
                    return this.contentLeft;
                case 'center':
                    return this.contentCenterX;
                case 'right':
                    return this.contentRight;
            }
        }
    }, {
        key: 'textTop',
        value: function textTop() /*context*/{
            switch (this.textBaseline) {
                case 'top':
                    return this.contentTop;
                case 'middle':
                    return this.contentCenterY;
                case 'bottom':
                    return this.contentBottom;
            }
        }
    }, {
        key: 'draw',
        value: function draw(context) {
            _get(Label.prototype.__proto__ || Object.getPrototypeOf(Label.prototype), 'draw', this).call(this, context);

            var x = Math.round(this.textLeft(context)),
                y = Math.round(this.textTop(context));

            context.textAlign = this.textAlign;
            context.textBaseline = this.textBaseline;

            // if requested, tail-truncate if the text doesn't fit in the content frame.

            var text = this.text;
            if (this.tailTruncation === 'ellipsis') {
                var w = Math.ceil(context.measureText(text).width);

                var contentRight = this.contentRight,
                    contentLeft = this.contentLeft;

                var truncatedText = text;

                if (contentLeft + w > this.contentRight) {
                    // assumes left to right flow
                    for (var indexEnd = text.length - 1; indexEnd > 0; --indexEnd) {
                        truncatedText = text.substring(0, indexEnd) + '…';
                        w = context.measureText(truncatedText).width;

                        if (contentLeft + w < contentRight) {
                            text = truncatedText;
                            break;
                        }
                    }

                    if (truncatedText.length === 2) {
                        text = truncatedText;
                    }
                }
            }

            // Always clip to the content frame.

            context.save();

            context.beginPath();
            var cf = this.contentFrame;
            context.rect(cf.origin.x, cf.origin.y, cf.size.width, cf.size.height);
            context.closePath();
            context.clip();

            // Fill in text, maybe shadowed.

            if (_View3.default.shadowsEnabled && this.textShadowBlur !== undefined && this.textShadowColor !== undefined) {
                context.shadowBlur = this.textShadowBlur;
                context.shadowColor = this.textShadowColor;
                context.shadowOffsetX = this.textShadowOffsetX || 0;
                context.shadowOffsetY = this.textShadowOffsetY || 0;
            } else {
                context.shadowBlur = 0;
                context.shadowColor = null;
                context.shadowOffsetX = 0;
                context.shadowOffsetY = 0;
            }

            context.fillStyle = this.textColor;
            context.fillText(text, x, y);

            context.shadowBlur = 0;
            context.shadowColor = null;
            context.shadowOffsetX = 0;
            context.shadowOffsetY = 0;

            // Stroke/outline text atop filled text.
            // Definitely not shadowed.

            if (this.textOutlineWidth && this.textOutlineColor) {
                // No shadows on text outlines/strokes

                context.lineWidth = this.textOutlineWidth;
                context.strokeStyle = this.textOutlineColor;

                if (this.textOutlineOffset) {
                    context.strokeText(text, x + this.textOutlineOffset.x, y + this.textOutlineOffset.y);
                } else {
                    context.strokeText(text, x, y);
                }
            }

            context.restore();
        }
    }, {
        key: 'text',
        set: function set(text) {
            if (this._text !== text) {
                this._text = text || '';
                this.needsLayout = true;
                this.emit('textChanged', this._text);
            }
        },
        get: function get() {
            return this._text;
        }
    }, {
        key: 'tailTruncation',
        set: function set(tailTruncation) {
            this._tailTruncation = tailTruncation;
            this.needsLayout = true;
        },
        get: function get() {
            return this._tailTruncation;
        }
    }, {
        key: 'textAlign',
        get: function get() {
            return this._textAlign;
        },
        set: function set(textAlign) {
            this._textAlign = textAlign;
            this.needsDisplay = true;
        }
    }, {
        key: 'textBaseline',
        get: function get() {
            return this._textBaseline;
        },
        set: function set(textBaseline) {
            this._textBaseline = textBaseline;
            this.needsDisplay = true;
        }
    }, {
        key: 'textColor',
        get: function get() {
            return this._textColor;
        },
        set: function set(c) {
            this._textColor = c;
            this.needsDisplay = true;
        }
    }, {
        key: 'textOutlineWidth',
        get: function get() {
            return this._textOutlineWidth;
        },
        set: function set(width) {
            if (this._textOutlineWidth !== width) {
                this._textOutlineWidth = width;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'textOutlineColor',
        get: function get() {
            return this._textOutlineColor;
        },
        set: function set(color) {
            if (this._textOutlineColor !== color) {
                this._textOutlineColor = color;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'textOutlineOffset',
        get: function get() {
            return this._textOutlineOffset;
        },
        set: function set(offset) {
            this._textOutlineOffset = offset;
            this.needsDisplay = true;
        }

        // text shadow {{{

    }, {
        key: 'textShadowBlur',
        get: function get() {
            return this._textShadowBlur;
        },
        set: function set(blur) {
            if (this._textShadowBlur !== blur) {
                this._textShadowBlur = blur;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'textShadowColor',
        get: function get() {
            return this._textShadowColor;
        },
        set: function set(color) {
            if (this._textShadowColor !== color) {
                this._textShadowColor = color;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'textShadowOffsetX',
        get: function get() {
            return this._textShadowOffsetX;
        },
        set: function set(offset) {
            this._textShadowOffsetX = offset;
            this.needsDisplay = true;
        }
    }, {
        key: 'textShadowOffsetY',
        get: function get() {
            return this._textShadowOffsetY;
        },
        set: function set(offset) {
            this._textShadowOffsetY = offset;
            this.needsDisplay = true;
        }
    }]);

    return Label;
}(_View3.default);

exports.default = Label;

},{"./View":101,"./core":102,"./fonts":103,"./magic":105}],76:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _ModalView2 = require('./ModalView');

var _ModalView3 = _interopRequireDefault(_ModalView2);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _Label = require('./Label');

var _Label2 = _interopRequireDefault(_Label);

var _ScrollableTextView = require('./ScrollableTextView');

var _ScrollableTextView2 = _interopRequireDefault(_ScrollableTextView);

var _Size = require('./Size');

var _Size2 = _interopRequireDefault(_Size);

var _magic = require('./magic');

var _fonts = require('./fonts');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A modal view that shows a scrollable textual message, a title,
 * and an optional set of buttons.
 *
 *     +-----------------------------------+
 *     |             [title]               |
 *     |            [message]              |
 *     | [button 1][button 2]...[button N] |
 *     +-----------------------------------+
 */

var MessageView = function (_ModalView) {
    _inherits(MessageView, _ModalView);

    function MessageView(title, message) {
        _classCallCheck(this, MessageView);

        var _this = _possibleConstructorReturn(this, (MessageView.__proto__ || Object.getPrototypeOf(MessageView)).call(this));

        _this.title = title || '';
        _this.message = message || '';
        _this.buttons = [];

        _this.titleLabel = new _Label2.default(_this.title);
        _this.titleLabel.font = (0, _fonts.BoldSystemFontOfSize)(14);
        _this.titleLabel.textAlign = 'center';
        _this.addSubview(_this.titleLabel);

        _this.messageView = new _ScrollableTextView2.default(_this.message);
        _this.messageView.textView.insets.setAll(10);
        _this.messageView.textView.textAlign = 'center';
        _this.messageView.textView.font = (0, _fonts.SystemFontOfSize)(14);
        _this.addSubview(_this.messageView);
        return _this;
    }

    _createClass(MessageView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            _get(MessageView.prototype.__proto__ || Object.getPrototypeOf(MessageView.prototype), 'layoutSubviews', this).call(this);

            this.titleLabel.frame = this.contentFrame;
            this.titleLabel.height = 30;

            this.messageView.contentSize = new _Size2.default(this.contentWidth, 0);
            this.messageView.frame = this.contentFrame;
            this.messageView.top = this.titleLabel.bottom;

            var buttonMargin = this.contentLeft,
                // reasonable;
            buttonWidth = this.contentWidth / this.buttons.length - buttonMargin / 2 * (this.buttons.length - 1),
                buttonHeight = _magic.FingerSizePoints,
                buttonTop = this.contentBottom - buttonHeight,
                buttonX = this.contentLeft;

            _lodash2.default.each(this.buttons, function (button) {
                button.frame.set(buttonX, buttonTop, buttonWidth, buttonHeight);
                buttonX += buttonWidth + buttonMargin;

                button.cornerRadius = 8;
                button.textAlign = 'center';
                button.borderWidth = 1;
                button.borderColor = '#aaa';
                button.textColor = '#555';
            });

            this.messageView.height = buttonTop - this.messageView.top;
        }

        /**
         * Adds a button which given text and tap handler function.
         * Buttons added later are positioned right of buttons added earlier.
         * Returns the added button if customizations are needed.
         */

    }, {
        key: 'addButtonWithHandler',
        value: function addButtonWithHandler(text, handler) {
            var button = new _Button2.default(text);
            button.on('tap', handler);
            this.addSubview(button);
            this.buttons.push(button);
            return button;
        }
    }]);

    return MessageView;
}(_ModalView3.default);

exports.default = MessageView;

},{"./Button":62,"./Label":75,"./ModalView":77,"./ScrollableTextView":88,"./Size":90,"./fonts":103,"./magic":105,"lodash":53}],77:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

var _InputBlockerView = require('./InputBlockerView');

var _InputBlockerView2 = _interopRequireDefault(_InputBlockerView);

var _BasicAnimations = require('canvas_ui/BasicAnimations');

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * A view that must be dealt with by the user when shown.
 *
 * Usually, `ModalView`s are added to the root view.
 */

var ModalView = function (_View) {
    _inherits(ModalView, _View);

    function ModalView() {
        _classCallCheck(this, ModalView);

        var _this = _possibleConstructorReturn(this, (ModalView.__proto__ || Object.getPrototypeOf(ModalView)).call(this));

        _this.backgroundColor = '#fff';
        _this.cornerRadius = 10;
        _this.borderWidth = 2;
        _this.insets.setAll(10);
        return _this;
    }

    // By default, modal views are centered in their superview.;

    _createClass(ModalView, [{
        key: 'wasAddedToView',
        value: function wasAddedToView() {
            _get(ModalView.prototype.__proto__ || Object.getPrototypeOf(ModalView.prototype), 'wasAddedToView', this).call(this);

            this.blockInput();
            this.addAnimation(new _BasicAnimations.PopIn());
            this.becomeFirstResponder();
            console.log(this);
        }

        // Defers removal of modal until animation completes.;
        // removeInputBlocker is for the case when you wish to show one modal,
        // dismiss/remove it, and show another immediately.  We wouldn't
        // want the input blocker to be removed then; just stay as is.

    }, {
        key: 'removeFromSuperview',
        value: function removeFromSuperview() {
            var _this2 = this;

            var removeInputBlocker = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            this.userInteractionEnabled = false;

            if (removeInputBlocker) {
                this.removeInputBlocker();
            }

            this.addAnimation(new _BasicAnimations.PopOut(this)).once('complete', function () {
                _get(ModalView.prototype.__proto__ || Object.getPrototypeOf(ModalView.prototype), 'removeFromSuperview', _this2).call(_this2);
            });
        }

        // By default, modal views block the user from interacting with its
        // superview, hence the name "modal".
        //
        // Touching the input-blocker removes the modal and the input blocker however.

    }, {
        key: 'blockInput',
        value: function blockInput() {
            if (!this.inputBlockerView && !this.inputBlocker()) {
                this.inputBlockerView = new _InputBlockerView2.default(this);
                this.superview.addSubview(this.inputBlockerView);
                this.superview.bringToFront(this);
            }
        }
    }, {
        key: 'inputBlocker',
        value: function inputBlocker() {
            return _lodash2.default.find(this.superview.subviews, function (subview) {
                return subview instanceof _InputBlockerView2.default;
            });
        }
    }, {
        key: 'removeInputBlocker',
        value: function removeInputBlocker() {
            var inputBlocker = this.inputBlocker();
            if (inputBlocker) {
                inputBlocker.removeFromSuperview();
            }
        }
    }, {
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            _get(ModalView.prototype.__proto__ || Object.getPrototypeOf(ModalView.prototype), 'layoutSubviews', this).call(this);
            this.moveToCenterMiddle();
        }
    }, {
        key: 'keyPressed',
        value: function keyPressed(keyName, ctrl, shift, meta, alt) {
            if (keyName === 'Escape' || keyName === 'Enter') {
                this.removeFromSuperview();
            } else {
                _get(ModalView.prototype.__proto__ || Object.getPrototypeOf(ModalView.prototype), 'keyPressed', this).call(this, keyName, ctrl, shift, meta, alt);
            }
        }
    }]);

    return ModalView;
}(_View3.default);

exports.default = ModalView;

},{"./InputBlockerView":70,"./View":101,"canvas_ui/BasicAnimations":60,"lodash":53}],78:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _KeyButton2 = require('./KeyButton');

var _KeyButton3 = _interopRequireDefault(_KeyButton2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ModifierKeyButton = function (_KeyButton) {
    _inherits(ModifierKeyButton, _KeyButton);

    function ModifierKeyButton(letter) {
        _classCallCheck(this, ModifierKeyButton);

        return _possibleConstructorReturn(this, (ModifierKeyButton.__proto__ || Object.getPrototypeOf(ModifierKeyButton)).call(this, letter, false));
    }

    _createClass(ModifierKeyButton, [{
        key: 'restoreColors',
        value: function restoreColors() {
            this.backgroundColor = '#444';
            this.textColor = '#ddd';
        }
    }, {
        key: 'invertColors',
        value: function invertColors() {
            this.backgroundColor = '#ddd';
            this.textColor = '#444';
        }
    }]);

    return ModifierKeyButton;
}(_KeyButton3.default);

exports.default = ModifierKeyButton;

},{"./KeyButton":71}],79:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

var _Label = require('./Label');

var _Label2 = _interopRequireDefault(_Label);

var _fonts = require('./fonts');

var _NavigationButton = require('./NavigationButton');

var _NavigationButton2 = _interopRequireDefault(_NavigationButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Shows a view on left, middle, and right.
 *
 * The left view is typically a back button and is by default a NavigationButton that
 * shows the title of the view one lower in the navigation stack.
 *
 * The middle view is typically a title label containing the title of the current contained view.
 *
 * The right view is typically an accessory button of some kind and is a blank button
 * by default.
 */

var NavigationBar = function (_View) {
    _inherits(NavigationBar, _View);

    function NavigationBar() {
        _classCallCheck(this, NavigationBar);

        var _this = _possibleConstructorReturn(this, (NavigationBar.__proto__ || Object.getPrototypeOf(NavigationBar)).call(this));

        _this.leftView = new _NavigationButton2.default(); // text set elsewhere
        _this.leftView.textAlign = 'left';
        _this.addSubview(_this.leftView);

        _this.titleLabel = new _Label2.default();
        _this.titleLabel.font = (0, _fonts.BoldSystemFontOfSize)(parseInt(_this.leftView.font, 10));
        _this.titleLabel.textAlign = 'center';
        _this.addSubview(_this.titleLabel);

        _this.rightView = new _NavigationButton2.default();
        _this.rightView.textAlign = 'right';
        _this.addSubview(_this.rightView);

        _this.borderWidth = 1;
        _this.borderColor = '#ddd';
        return _this;
    }

    _createClass(NavigationBar, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.titleLabel.sizeToFit();
            this.titleLabel.width = Math.min(Math.round(this.width * 0.6), this.titleLabel.width);

            this.leftView.top = this.titleLabel.top = this.rightView.top = 0;
            this.leftView.height = this.titleLabel.height = this.rightView.height = this.height;
            this.leftView.width = this.rightView.width = (this.width - this.titleLabel.width) / 2;
            this.leftView.left = 0;

            this.titleLabel.moveRightOf(this.leftView);
            this.rightView.moveRightOf(this.titleLabel);
        }
    }, {
        key: 'title',
        get: function get() {
            return this.titleLabel.text;
        },
        set: function set(title) {
            this.titleLabel.text = title;
        }
    }]);

    return NavigationBar;
}(_View3.default);

exports.default = NavigationBar;

},{"./Label":75,"./NavigationButton":80,"./View":101,"./fonts":103}],80:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Button2 = require('./Button');

var _Button3 = _interopRequireDefault(_Button2);

var _fonts = require('./fonts');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A button for the left and right sides of a NavigationBar.
 *
 * This exists for common styling.
 */

var NavigationButton = function (_Button) {
    _inherits(NavigationButton, _Button);

    function NavigationButton(text) {
        _classCallCheck(this, NavigationButton);

        var _this = _possibleConstructorReturn(this, (NavigationButton.__proto__ || Object.getPrototypeOf(NavigationButton)).call(this, text));

        _this.shadowBlur = 0;
        _this.borderWidth = 0;
        _this.textColor = '#0078fd';
        _this.backgroundColor = '#fff';
        _this.font = (0, _fonts.SystemFontOfSize)(14);
        _this.cornerRadius = 0;
        _this.offsetsOnTouch = false;
        return _this;
    }

    return NavigationButton;
}(_Button3.default);

exports.default = NavigationButton;

},{"./Button":62,"./fonts":103}],81:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

var _NavigationBar = require('./NavigationBar');

var _NavigationBar2 = _interopRequireDefault(_NavigationBar);

var _magic = require('./magic');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Wraps a view (the "contained view") with a navigation bar.
 *
 * Each view pushed to a NavigationStack is wrapped in an instance
 * of NavigationContainerView and thus each view has its own associated
 * NavigationBar.
 *
 * If the contained view has a method `wasAddedToNavigationStack`, it
 * is called when this container view is added to a NavigationStack.
 */

var NavigationContainerView = function (_View) {
    _inherits(NavigationContainerView, _View);

    function NavigationContainerView(containedView) {
        _classCallCheck(this, NavigationContainerView);

        // Needed so shadows are rendered.
        // Shadows are displayed during transitions (at least).

        var _this = _possibleConstructorReturn(this, (NavigationContainerView.__proto__ || Object.getPrototypeOf(NavigationContainerView)).call(this));

        _this.backgroundColor = '#fff';

        _this.navigationBar = new _NavigationBar2.default();
        _this.addSubview(_this.navigationBar);

        _this.containedView = containedView;
        _this.containedView.navigationBar = _this.navigationBar;
        _this.addSubview(_this.containedView);

        // nav bar added after to be on top of contained view
        // so that shadow is displayed atop contained view.

        _this.bringToFront(_this.navigationBar);
        return _this;
    }

    _createClass(NavigationContainerView, [{
        key: 'wasAddedToView',
        value: function wasAddedToView() {
            _get(NavigationContainerView.prototype.__proto__ || Object.getPrototypeOf(NavigationContainerView.prototype), 'wasAddedToView', this).call(this);

            this.containedView.navigationStack = this.superview;

            if (_lodash2.default.isFunction(this.containedView.wasAddedToNavigationStack)) {
                this.containedView.wasAddedToNavigationStack();
            }

            var containerNo = this.superview.subviews.length - 1;
            this.id = 'NavigationContainerView' + containerNo;
        }
    }, {
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            var barHeight = _magic.FingerSizePoints;
            this.navigationBar.frame.set(0, 0, this.width, barHeight);
            this.containedView.frame.set(0, barHeight, this.width, this.height - barHeight);
        }
    }]);

    return NavigationContainerView;
}(_View3.default);

exports.default = NavigationContainerView;

},{"./NavigationBar":79,"./View":101,"./magic":105,"lodash":53}],82:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

var _NavigationContainerView = require('./NavigationContainerView');

var _NavigationContainerView2 = _interopRequireDefault(_NavigationContainerView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A stack of views with push/pop semantics.
 */

var NavigationStack = function (_View) {
    _inherits(NavigationStack, _View);

    function NavigationStack() {
        _classCallCheck(this, NavigationStack);

        return _possibleConstructorReturn(this, (NavigationStack.__proto__ || Object.getPrototypeOf(NavigationStack)).apply(this, arguments));
    }

    _createClass(NavigationStack, [{
        key: 'push',


        /**
         * Push a view which makes it current.
         *
         * The view is wrapped in a NavigationContainerView if the view
         * isn't already an instance of NavigationContainerView.
         *
         * The top-most view (if any) is slid out to the left.
         * The pushed view is slid in from the right.
         */

        value: function push(view) {
            var _this2 = this;

            var currentTopView = this.topView;

            var containerView;
            if (view instanceof _NavigationContainerView2.default) {
                containerView = view;
            } else {
                containerView = new _NavigationContainerView2.default(view);
            }

            this.addSubview(containerView);

            containerView.frame = this.bounds;

            if (currentTopView) {
                this.userInteractionEnabled = false;

                this.slideOutToLeft(currentTopView);

                this.slideInFromRight(containerView, function () {
                    _this2.userInteractionEnabled = true;
                });

                containerView.navigationBar.leftView.text = '← ' + currentTopView.navigationBar.titleLabel.text;
                containerView.navigationBar.leftView.userInteractionEnabled = true;
            } else {
                containerView.navigationBar.leftView.userInteractionEnabled = false;
            }
        }

        /**
         * Pops the top-most view, making the next-top-most view
         * the current view.
         */

    }, {
        key: 'pop',
        value: function pop() {
            var _this3 = this;

            var n = this.subviews.length;

            if (n >= 2) {
                this.userInteractionEnabled = false;

                var currentTopView = this.subviews[n - 1],
                    nextTopView = this.subviews[n - 2];

                // Views that slide off are hidden. It's sliding
                // back in so show it again.

                nextTopView.hidden = false;
                this.slideInFromLeft(nextTopView);

                this.bringToFront(currentTopView);
                this.slideOutToRight(currentTopView, function () {
                    currentTopView.navigationBar = currentTopView.navigationStack = null;
                    currentTopView.removeFromSuperview();

                    _this3.userInteractionEnabled = true;
                });
            }
        }
    }, {
        key: '_saveShadowState',
        value: function _saveShadowState(view) {
            view._clipsSubviewsBefore = view.clipsSubviews;
            view._shadowBlurBefore = view.shadowBlur;
            view._shadowColorBefore = view.shadowColor;

            view.clipsSubviews = false;
            view.shadowBlur = 20;
            view.shadowColor = 'rgba(0,0,0,0.5)';
        }
    }, {
        key: '_restoreShadowState',
        value: function _restoreShadowState(view) {
            view.clipsSubviews = view.clipsSubviewsBefore;
            view.shadowBlur = view.shadowBlurBefore;
            view.shadowColor = view.shadowColorBefore;
        }

        // TODO use BasicAnimations for this

        /**
         * Slides the view out to the left with some parallax
         * if there's another view higher in the stack.
         */

    }, {
        key: 'slideOutToLeft',
        value: function slideOutToLeft(view, complete) {
            var targetX = this.topView ? -view.halfWidth : -view.width;

            view.addAnimation({
                name: 'slideLeft',
                target: view.position,
                endValues: { x: targetX }
            }).once('complete', function () {
                view.hidden = true;
                view.left = 0;

                if (_lodash2.default.isFunction(complete)) {
                    complete();
                }
            });
        }

        // TODO use BasicAnimations for this
        /**
         * Slides the view out to the right w/ no parallax effect.
         */

    }, {
        key: 'slideOutToRight',
        value: function slideOutToRight(view, complete) {
            var _this4 = this;

            this._saveShadowState(view);

            view.addAnimation({
                name: 'slideRight',
                target: view.position,
                endValues: { x: this.width }
            }).once('complete', function () {
                _this4._restoreShadowState(view);
                view.hidden = true;

                if (_lodash2.default.isFunction(complete)) {
                    complete();
                }
            });
        }

        // TODO use BasicAnimations for this
        /**
         * Slides the view in from the right w/ no parallax effect.
         */

    }, {
        key: 'slideInFromRight',
        value: function slideInFromRight(view, complete) {
            var _this5 = this;

            view.position.set(this.width, 0);
            this._saveShadowState(view);

            view.addAnimation({
                name: 'slideLeft',
                target: view.position,
                endValues: { x: 0 }
            }).once('complete', function () {
                _this5._restoreShadowState(view);

                if (_lodash2.default.isFunction(complete)) {
                    complete();
                }
            });
        }

        // TODO use BasicAnimations for this
        /**
         * Slides in the view from the left, using a parallax
         * effect if there's a view higher in the stack.
         */

    }, {
        key: 'slideInFromLeft',
        value: function slideInFromLeft(view, complete) {
            var currentTopView = this.topView;

            // The parallax effect: the view slides 1/2 the width
            // of this view while the view higher up slides the full
            // width in the same duration.

            view.right = currentTopView ? this.halfWidth : 0;

            view.addAnimation({
                name: 'slideRight',
                target: view.position,
                endValues: { x: 0 }
            }).once('complete', function () {
                if (_lodash2.default.isFunction(complete)) {
                    complete();
                }
            });
        }

        /**
         * Returns the top-most or current view.
         */

    }, {
        key: 'layoutSubviews',


        /**
         * All container views are of the same dimensions,
         * namely the bounds of this navigation stack.
         */

        value: function layoutSubviews() {
            var _this6 = this;

            // If user interaction is disabled, then there's a transition
            // being animated currently and that process is in charge of
            // controlling layout.

            if (this.userInteractionEnabled) {
                _lodash2.default.each(this.subviews, function (subview) {
                    subview.frame = _this6.bounds;
                });
            }
        }
    }, {
        key: 'topView',
        get: function get() {
            return _lodash2.default.last(this.subviews);
        }
    }]);

    return NavigationStack;
}(_View3.default);

exports.default = NavigationStack;

},{"./NavigationContainerView":81,"./View":101,"lodash":53}],83:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _Label2 = require('./Label');

var _Label3 = _interopRequireDefault(_Label2);

var _fonts = require('./fonts');

var _BasicAnimations = require('./BasicAnimations');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A view that shows a brief message before removing itself.
 * Can also be tapped to dismiss.
 * Auto-dismisses an existing notification view on the same superview if found.
 */

var NotificationView = function (_Label) {
    _inherits(NotificationView, _Label);

    function NotificationView(message) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'info';
        var dismissAfter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2000;

        _classCallCheck(this, NotificationView);

        var _this = _possibleConstructorReturn(this, (NotificationView.__proto__ || Object.getPrototypeOf(NotificationView)).call(this, message));

        _this.type = type;
        _this.dismissAfter = dismissAfter;

        _this.insets.setAll(20); // "big"
        _this.textColor = '#fff';
        _this.font = (0, _fonts.BoldSystemFontOfSize)(11);
        _this.cornerRadius = 10;

        _this.stylizeForType();

        _this.userInteractionEnabled = true;
        _this.on('tap', function () {
            return _this.removeFromSuperview();
        });
        return _this;
    }

    _createClass(NotificationView, [{
        key: 'stylizeForType',
        value: function stylizeForType() {
            switch (this.type) {
                case 'error':
                    this.backgroundColor = 'red';
                    break;
                case 'warning':
                    this.backgroundColor = 'orange';
                    break;
                default:
                    this.backgroundColor = '#333';
                    break;
            }

            this.clipsSubviews = false;
            this.shadowBlur = 10;
            this.shadowColor = 'rgba(0,0,0,0.7)';
            this.shadowOffsetY = 10;
        }
    }, {
        key: 'removeExistingNotificationViews',
        value: function removeExistingNotificationViews() {
            var _this2 = this;

            _lodash2.default.each(_lodash2.default.filter(this.superview.subviews, function (subview) {
                return subview instanceof NotificationView && subview !== _this2;
            }), function (notification) {
                return notification.removeFromSuperview();
            });
        }
    }, {
        key: 'wasAddedToView',
        value: function wasAddedToView() {
            var _this3 = this;

            _get(NotificationView.prototype.__proto__ || Object.getPrototypeOf(NotificationView.prototype), 'wasAddedToView', this).call(this);

            this.removeExistingNotificationViews();

            this.sizeToFit();

            var slideDistance = 20;

            this.left = this.superview.halfWidth - this.halfWidth;
            this.top = Math.round(this.superview.height * 0.4) + slideDistance;

            this.addAnimation({
                name: 'slideUp',
                target: this.position,
                endValues: { y: this.top - slideDistance }
            });

            this.addAnimation(new _BasicAnimations.FadeIn(this));

            this.timeout = setTimeout(function () {
                _this3.removeFromSuperview();
            }, this.dismissAfter);
        }

        // Defers removal of notification until animation completes.

    }, {
        key: 'removeFromSuperview',
        value: function removeFromSuperview() {
            var _this4 = this;

            this.userInteractionEnabled = false;

            clearTimeout(this.timeout);

            this.addAnimation(new _BasicAnimations.FadeOut(this));

            var slideDistance = 20,
                targetY = Math.round(this.superview.height * 0.4) + slideDistance;

            this.addAnimation({
                name: 'slideDown',
                target: this.position,
                endValues: { y: targetY }
            }).once('complete', function () {
                _get(NotificationView.prototype.__proto__ || Object.getPrototypeOf(NotificationView.prototype), 'removeFromSuperview', _this4).call(_this4);
            });
        }
    }]);

    return NotificationView;
}(_Label3.default);

exports.default = NotificationView;

},{"./BasicAnimations":60,"./Label":75,"./fonts":103,"lodash":53}],84:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _ImageView2 = require('./ImageView');

var _ImageView3 = _interopRequireDefault(_ImageView2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * An image comprised of sub-images, one of which is drawn
 * when the view is redrawn.
 *
 * The sub-images are named and are laid out using some packing
 * tool like *Texture Packer* and have explicit rectangles specified.
 */

var PackedImageView = function (_ImageView) {
    _inherits(PackedImageView, _ImageView);

    /**
     * `subImageInfo` is an object with keys equal to sub-image
     * filenames and associated values equal to a rect object of
     * the form `{x:number, y:number, w:number, h:number}`
     */

    function PackedImageView(image, subImageInfo) {
        _classCallCheck(this, PackedImageView);

        var _this = _possibleConstructorReturn(this, (PackedImageView.__proto__ || Object.getPrototypeOf(PackedImageView)).call(this, image));

        if (!_lodash2.default.isPlainObject(subImageInfo)) {
            throw new Error('sub-image info is required');
        }

        _this._subImageInfo = subImageInfo;
        _this._currentImageName = null;
        return _this;
    }

    _createClass(PackedImageView, [{
        key: 'sizeToFit',
        value: function sizeToFit() {
            if (!this._currentImageName) {
                return this;
            }

            var rect = this._subImageInfo[this._currentImageName];
            if (!rect) {
                return this;
            }

            this.size.set(rect.w, rect.h);
            return this;
        }
    }, {
        key: 'drawImage',
        value: function drawImage(context, image, x, y, w, h) {
            if (!this._currentImageName) {
                return;
            }

            var rect = this._subImageInfo[this._currentImageName];
            if (!rect) {
                return;
            }

            context.drawImage(image, rect.x, rect.y, rect.w, rect.h, x, y, w, h);
        }
    }, {
        key: 'currentImageName',
        get: function get() {
            return this._currentImageName;
        },
        set: function set(name) {
            if (name && this._currentImageName !== name && _lodash2.default.has(this._subImageInfo, name)) {

                this._currentImageName = name;
                this.needsDisplay = true;
                this.emit('imageChanged');
            }
        }
    }, {
        key: 'imageWidth',
        get: function get() {
            if (this._currentImageName && this._subImageInfo) {
                return this._subImageInfo[this._currentImageName].w;
            }

            return 0;
        }
    }, {
        key: 'imageHeight',
        get: function get() {
            if (this._currentImageName && this._subImageInfo) {
                return this._subImageInfo[this._currentImageName].h;
            }

            return 0;
        }
    }]);

    return PackedImageView;
}(_ImageView3.default);

exports.default = PackedImageView;

},{"./ImageView":69,"lodash":53}],85:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A point in some 2-D coordinate system.
 *
 * Squint and it looks like a 2-D vector (e.g. `addSelf`).
 *
 * Events
 * - valueChanged()
 */

var Point = function (_EventEmitter) {
    _inherits(Point, _EventEmitter);

    function Point() {
        var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        _classCallCheck(this, Point);

        if (!_lodash2.default.isFinite(x) || !_lodash2.default.isFinite(y)) {
            throw new Error('number required');
        }

        var _this = _possibleConstructorReturn(this, (Point.__proto__ || Object.getPrototypeOf(Point)).call(this));

        _this._x = x;
        _this._y = y;
        return _this;
    }

    _createClass(Point, [{
        key: 'didChange',
        value: function didChange() {
            this.emit('valueChanged');
        }
    }, {
        key: 'set',
        value: function set(x, y) {
            if (!_lodash2.default.isFinite(x) || !_lodash2.default.isFinite(y)) {
                throw new Error('number required');
            }

            var changed = false;

            if (this._x !== x) {
                this._x = x;
                changed = true;
            }

            if (this._y !== y) {
                this._y = y;
                changed = true;
            }

            if (changed) {
                this.didChange();
            }

            return this;
        }
    }, {
        key: 'copy',
        value: function copy(p) {
            return this.set(p.x, p.y);
        }
    }, {
        key: 'clone',
        value: function clone() {
            return new Point(this._x, this._y);
        }
    }, {
        key: 'add',
        value: function add(point) {
            return new Point(point._x + this._x, point._y + this._y);
        }
    }, {
        key: 'addSelf',
        value: function addSelf(point) {
            return this.set(this._x + point._x, this._y + point._y);
        }
    }, {
        key: 'sub',
        value: function sub(point) {
            return new Point(this._x - point._x, this._y - point._y);
        }
    }, {
        key: 'subSelf',
        value: function subSelf(point) {
            return this.set(this._x - point._x, this._y - point._y);
        }
    }, {
        key: 'scale',
        value: function scale(dx, dy) {
            if (!_lodash2.default.isFinite(dx) || !_lodash2.default.isFinite(dy)) {
                throw new Error('number required');
            }

            return new Point(this._x * dx, this._y * dy);
        }
    }, {
        key: 'scaleSelf',
        value: function scaleSelf(dx, dy) {
            if (!_lodash2.default.isFinite(dx) || !_lodash2.default.isFinite(dy)) {
                throw new Error('number required');
            }

            return this.set(this._x * dx, this._y * dy);
        }
    }, {
        key: 'isNonZero',
        value: function isNonZero() {
            return this._x * this._x + this._y * this._y > 1e-5;
        }
    }, {
        key: 'isZero',
        value: function isZero() {
            return !this.isNonZero();
        }
    }, {
        key: 'toString',
        value: function toString() {
            return '{' + this._x + ',' + this._y + '}';
        }
    }, {
        key: 'x',
        get: function get() {
            return this._x;
        },
        set: function set(x) {
            if (!_lodash2.default.isFinite(x)) {
                throw new Error('number required');
            }

            if (this._x !== x) {
                this._x = x;
                this.didChange();
            }
        }
    }, {
        key: 'y',
        get: function get() {
            return this._y;
        },
        set: function set(y) {
            if (!_lodash2.default.isFinite(y)) {
                throw new Error('number required');
            }

            if (this._y !== y) {
                this._y = y;
                this.didChange();
            }
        }
    }]);

    return Point;
}(_events2.default);

exports.default = Point;

},{"events":109,"lodash":53}],86:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A view which shows progress of some long-running action.
 * Set `horizontal` to `false` for a vertically-oriented progress bar.
 * Horizontal progress runs left-to-right while vertical progress runs bottom-to-top.
 * `progress` is in the range of [0-1].
 * Set `.barColor` to control appearance (default: red).
 */

var ProgressBar = function (_View) {
    _inherits(ProgressBar, _View);

    function ProgressBar() {
        var progress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var horizontal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var barColor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '#f00';

        _classCallCheck(this, ProgressBar);

        var _this = _possibleConstructorReturn(this, (ProgressBar.__proto__ || Object.getPrototypeOf(ProgressBar)).call(this));

        _this.progress = progress;
        _this._horizontal = horizontal;
        _this._barColor = barColor;

        _this.userInteractionEnabled = false;
        return _this;
    }

    _createClass(ProgressBar, [{
        key: 'draw',
        value: function draw(context) {
            _get(ProgressBar.prototype.__proto__ || Object.getPrototypeOf(ProgressBar.prototype), 'draw', this).call(this, context);

            var width = this.width,
                height = this.height;

            if (this.horizontal) {
                if (this.cornerRadius > 0) {
                    context.roundRect(0, 0, this.progress * width, height, this.cornerRadius);
                } else {
                    context.beginPath();
                    context.rect(0, 0, this.progress * width, height);
                    context.closePath();
                }
            } else {
                // vertical
                if (this.cornerRadius > 0) {
                    context.save();
                    context.translate(0, height - this.progress * height);
                    context.roundRect(0, 0, width, this.progress * height, this.cornerRadius);
                    context.restore();
                } else {
                    context.beginPath();
                    context.rect(0, height - this.progress * height, width, this.progress * height);
                    context.closePath();
                }
            }

            context.fillStyle = this.barColor;
            context.fill();
        }
    }, {
        key: 'toString',
        value: function toString() {
            return _get(ProgressBar.prototype.__proto__ || Object.getPrototypeOf(ProgressBar.prototype), 'toString', this).call(this) + (this.horizontal ? 'H' : 'V');
        }
    }, {
        key: 'horizontal',
        get: function get() {
            return this._horizontal;
        },
        set: function set(yesNo) {
            this._horizontal = yesNo;
            this.needsDisplay = true;
        }
    }, {
        key: 'barColor',
        get: function get() {
            return this._barColor;
        },
        set: function set(color) {
            if (this._barColor !== color) {
                this._barColor = color;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'progress',
        get: function get() {
            return this._progress;
        },
        set: function set(p) {
            this._progress = Math.max(0, Math.min(1, p));
            this.needsDisplay = true;
        }
    }]);

    return ProgressBar;
}(_View3.default);

exports.default = ProgressBar;

},{"./View":101}],87:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

var _Point = require('./Point');

var _Point2 = _interopRequireDefault(_Point);

var _magic = require('./magic');

var _Animation = require('./Animation');

var _Animation2 = _interopRequireDefault(_Animation);

var _input = require('./input');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A view of a portion of a (potentially larger) content view that moves
 * when the user drags the pointing device (mouse or finger).
 *
 * Add subviews to the content view, not the scroll view itself.
 *
 * Dragging the content view left/up means the user is
 * scrolling to the right/down.
 *
 * When "paging" is enabled, dragging the content view far enough
 * causes the drag to end and the content view is scrolled to the
 * next/previous "page".  A page size is uniform and is equal to
 * the bounds of the scroll view (not the content size).
 *
 * When "auto paging" is enabled, paging is implicitly enabled. With
 * auto paging enabled, jumping to the next/prev page occurs when the
 * user scrolls more than half a page's width (or height).
 *
 * Vertical paging is implicitly enabled when the content size is wider
 * than the scroll view height; similar for horizontal paging.
 *
 * Vertical and horizontal paging can be simultaneously implicitly
 * enabled.
 *
 * Key bindings:
 *
 * - 'ArrowDown': move content down a bit
 * - 'ArrowUp': move content up a bit
 * - 'ArrowLeft': move content left a bit
 * - 'ArrowRight': move content right a bit
 * - 'PageUp': jump to previous page
 * - 'PageDown': jump to next page
 * - 'Home': jump to first page
 * - 'End': jump to last page
 *
 * Note: page-based key bindings do not have to have paging enabled.
 *
 * Events:
 * - pageChanged(newPageX, newPageY)
 */

var ScrollView = function (_View) {
    _inherits(ScrollView, _View);

    function ScrollView() {
        _classCallCheck(this, ScrollView);

        var _this = _possibleConstructorReturn(this, (ScrollView.__proto__ || Object.getPrototypeOf(ScrollView)).call(this));

        _this._declerationRate = ScrollView.DecelerationRateSlow;
        _this._indicatorColor = '#333';
        _this._showIndicators = false; // only true when dragging/scrolling;

        _this._pagingEnabled = false;
        _this._autoPagingEnabled = false;
        _this._pageNo = new _Point2.default();

        _this.contentView = new _View3.default();
        _this.contentView.id = 'contentView';
        _this.addSubview(_this.contentView);

        _this.setupDragging();
        return _this;
    }

    _createClass(ScrollView, [{
        key: 'setupDragging',
        value: function setupDragging() {
            var _this2 = this;

            this.velocity = new _Point2.default(); // pixels/second
            this.contentView.draggable = true;

            this.contentView.on('dragStarted', function (point) {
                _this2.resetVelocity();
                _this2.showIndicators = true;
                _this2._startDragPoint = point.clone();
            });

            this.contentView.on('dragUpdated', function (point) {
                _this2.constrainContentView();
                _this2.velocity.copy(point).subSelf(_this2.contentView.lastDragPoint);
                if (_this2.autoPagingEnabled && _this2._checkAutoPage(point)) {
                    (0, _input.resetPointerHandling)(); // cancel drag since we auto-paged
                }
            });

            this.contentView.on('dragEnded', function (point) {
                if (_this2.pagingEnabled) {
                    if (_this2.autoPagingEnabled && !_this2._checkAutoPage(point)) {
                        _this2.pageNo = _this2.pageNo; // snap
                    } else {
                        // Start inertia scrolling. When the view stops
                        // the scroll offset is aligned to page boundary.

                        _this2.needsUpdate = true;
                    }
                } else {
                    _this2.needsUpdate = true; // start inertia scrolling
                }

                _this2._startDragPoint = null;
            });
        }
    }, {
        key: 'resetVelocity',
        value: function resetVelocity() {
            this.velocity.set(0, 0);
            this.needsUpdate = false;
        }
    }, {
        key: 'update',
        value: function update() {
            var rate = this.decelerationRate;
            this.velocity.scaleSelf(rate, rate);

            var originBefore = this.contentView.position.clone();

            this.contentView.position.addSelf(this.velocity);
            this.constrainContentView();

            var originAfter = this.contentView.position.clone();

            if (originBefore.x === originAfter.x && originBefore.y === originAfter.y) {

                if (this.pagingEnabled) {
                    this.pageNo = this.determinePageNo();
                }

                this.needsUpdate = false;
                this.showIndicators = false;
            }
        }

        /**
         * If enabled, paging causes the scroll view to stop scrolling
         * on multiples of the scroll view's bounds.
         */

    }, {
        key: '_checkAutoPage',
        value: function _checkAutoPage(currentDragPoint) {
            if (!this.pagingEnabled) {
                return false;
            }

            var delta = currentDragPoint.sub(this._startDragPoint),
                h = this.height,
                w = this.width,
                pageNo = this.pageNo; // 2D

            var didUpdate = false;

            if (this.verticalPagingPossible()) {
                if (delta.y > h / 2) {
                    pageNo.y--;
                    didUpdate = true;
                } else if (delta.y < -h / 2) {
                    pageNo.y++;
                    didUpdate = true;
                }
            }

            if (this.horizontalPagingPossible()) {
                if (delta.x > w / 2) {
                    pageNo.x--;
                    didUpdate = true;
                } else if (delta.x < -w / 2) {
                    pageNo.x++;
                    didUpdate = true;
                }
            }

            if (didUpdate) {
                this.pageNo = pageNo;
            }

            return didUpdate;
        }

        /**
         * The current "page" as a point where x is the horizontal page number
         * and y is the vertical page number, both starting from 0.
         *
         * The size of all pages is the same and is equal to the size of this
         * scroll view's bounds.
         */

    }, {
        key: 'determinePageNo',
        value: function determinePageNo() {
            return new _Point2.default(Math.round(Math.abs(this.contentView.left / this.width)), Math.round(Math.abs(this.contentView.top / this.height)));
        }

        /**
         * Returns the number of pages the current content spans horizontally.
         */

    }, {
        key: 'horizontalPagingPossible',


        /**
         * Returns true if the content of this scroll view can be paged horizontally.
         */

        value: function horizontalPagingPossible() {
            return this.contentSize.width > this.width;
        }

        /**
         * Returns true if the content of this scroll view can be paged vertically.
         */

    }, {
        key: 'verticalPagingPossible',
        value: function verticalPagingPossible() {
            return this.contentSize.height > this.height;
        }

        /**
         * If either horizontal paging or vertical paging is enabled,
         * jump to the next page (horizontally or vertically).
         *
         * This is a convenience "do what I mean" method.
         */

    }, {
        key: 'gotoNextPage',
        value: function gotoNextPage() {
            var pageNo = this.pageNo;

            if (this.verticalPagingPossible()) {
                pageNo.y++;
                this.pageNo = pageNo;
            } else if (this.horizontalPagingPossible()) {
                pageNo.x++;
                this.pageNo = pageNo;
            }
        }

        /**
         * If either horizontal paging or vertical paging is enabled,
         * jump to the previous page (horizontally or vertically).
         *
         * This is a convenience "do what I mean" method.
         */

    }, {
        key: 'gotoPreviousPage',
        value: function gotoPreviousPage() {
            var pageNo = this.pageNo;

            if (this.verticalPagingPossible()) {
                pageNo.y--;
                this.pageNo = pageNo;
            } else if (this.horizontalPagingPossible()) {
                pageNo.x--;
                this.pageNo = pageNo;
            }
        }

        /**
         * Animates the content view so that (x,y) is located at the
         * origin of the scroll view's frame.
         */

    }, {
        key: 'scrollTo',
        value: function scrollTo(x, y) {
            var _this3 = this;

            var animated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            this.resetVelocity();

            if (animated) {
                var originBefore = this.contentView.position.clone();

                this.contentView.position.set(-x, -y);
                this.constrainContentView();

                var originAfter = this.contentView.position.clone();

                this.contentView.position.copy(originBefore);
                this.contentView.userInteractionEnabled = false;

                this.showIndicators = true;

                var name = 'scrollTo';
                this.removeAnimationWithName(name);
                this.addAnimation({
                    name: name,
                    target: this.contentView.position,
                    endValues: { x: originAfter.x, y: originAfter.y },
                    easing: _Animation2.default.easing.cubic
                }).on('update', function () {
                    _this3.contentView.position.emit('valueChanged', _this3.contentView.position);
                }).once('complete', function () {
                    _this3.contentView.userInteractionEnabled = true;
                    _this3.showIndicators = false;
                });
            } else {
                this.contentView.position.set(-x, -y);
                this.constrainContentView();
            }

            return this;
        }

        /**
         * Ensures that the content view sticks to each edge of the scroll view
         * if there is no more content to show beyond each edge.
         *
         * There is no support for iOS-style bouncing as it is dumb.
         */

    }, {
        key: 'constrainContentView',
        value: function constrainContentView() {
            var contentView = this.contentView;
            contentView.bottom = Math.max(this.height, contentView.bottom);
            contentView.top = Math.min(0, contentView.top);
            contentView.right = Math.max(this.width, contentView.right);
            contentView.left = Math.min(0, contentView.left);
        }

        // Draw scroll indicators. drawBorder is performed after drawing subviews.
        // Thus, anything we draw here is drawn on top of already-drawn subviews.

    }, {
        key: 'postDraw',
        value: function postDraw(context) {
            if (this.showIndicators) {
                var indicatorSize = 3,
                    scrollHeight = this.height,
                    scrollWidth = this.width,
                    contentHeight = this.contentView.height,
                    contentWidth = this.contentView.width;

                context.fillStyle = this.indicatorColor;

                // Vertical

                var indicatorHeight = Math.round(scrollHeight * scrollHeight / contentHeight),
                    indicatorTop = -Math.round(scrollHeight * this.contentView.top / contentHeight);

                if (indicatorTop > 0 && indicatorTop + indicatorHeight < scrollHeight) {
                    context.fillRect(this.width - this.borderWidth / 2 - indicatorSize, indicatorTop, indicatorSize, indicatorHeight);
                }

                // Horizontal

                var indicatorWidth = Math.round(scrollWidth * scrollWidth / contentWidth),
                    indicatorLeft = -Math.round(scrollWidth * this.contentView.left / contentWidth);

                if (indicatorLeft > 0 && indicatorLeft + indicatorWidth < scrollWidth) {
                    context.fillRect(indicatorLeft, this.height - this.borderWidth / 2 - indicatorSize, indicatorWidth, indicatorSize);
                }
            }

            _get(ScrollView.prototype.__proto__ || Object.getPrototypeOf(ScrollView.prototype), 'postDraw', this).call(this, context);
        }
    }, {
        key: 'scrollHorizontally',
        value: function scrollHorizontally() {
            var amt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;

            this.contentView.left += amt;
            this.constrainContentView();
        }
    }, {
        key: 'scrollVertically',
        value: function scrollVertically() {
            var amt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;

            this.contentView.top += amt;
            this.constrainContentView();
        }

        /**
         * scroll up = move content up
         */

    }, {
        key: 'scrollUp',
        value: function scrollUp() {
            var amt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;

            this.scrollVertically(-Math.abs(amt));
        }
    }, {
        key: 'scrollDown',
        value: function scrollDown() {
            var amt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;

            this.scrollVertically(Math.abs(amt));
        }
    }, {
        key: 'scrollLeft',
        value: function scrollLeft() {
            var amt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;

            this.scrollHorizontally(-Math.abs(amt));
        }
    }, {
        key: 'scrollRight',
        value: function scrollRight() {
            var amt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;

            this.scrollHorizontally(Math.abs(amt));
        }
    }, {
        key: 'keyPressed',
        value: function keyPressed(keyName, ctrl, shift, meta, alt) {
            var _this4 = this;

            clearTimeout(this._snapPageTimeout);

            switch (keyName) {
                case 'ArrowDown':
                    this.scrollDown();
                    break;

                case 'ArrowUp':
                    this.scrollUp();
                    break;

                case 'ArrowLeft':
                    this.scrollLeft();
                    break;

                case 'ArrowRight':
                    this.scrollRight();
                    break;

                case 'PageUp':
                    this.gotoPreviousPage();
                    break;

                case 'PageDown':
                    this.gotoNextPage();
                    break;

                case 'Home':
                    this.pageNo = _magic.PointZero;
                    break;

                case 'End':
                    this.pageNo = new _Point2.default(this.horizontalPageCount - 1, this.verticalPageCount - 1);
                    break;
            }

            // A bit after the user uses the keyboard to scroll,
            // if paging is enabled, snap to the current page.

            if (this.pagingEnabled) {
                clearTimeout(this._snapPageTimeout);
                this._snapPageTimeout = setTimeout(function () {
                    _this4.pageNo = _this4.pageNo; // snap
                }, 1000);
            }

            _get(ScrollView.prototype.__proto__ || Object.getPrototypeOf(ScrollView.prototype), 'keyPressed', this).call(this, keyName, ctrl, shift, meta, alt);
        }
    }, {
        key: 'decelerationRate',
        get: function get() {
            return this._declerationRate;
        },
        set: function set(rate) {
            if (_lodash2.default.isFinite(rate)) {
                rate = Math.max(0, Math.min(1, parseInt(rate, 10)));
                this._declerationRate = rate;
                this.needsUpdate = true;
            }
        }
    }, {
        key: 'indicatorColor',
        get: function get() {
            return this._indicatorColor;
        },
        set: function set(color) {
            if (this._indicatorColor !== color) {
                this._indicatorColor = color;
                this.needsDisplay = true;
            }
        }

        /**
         * Scroll indicators are displayed while scrolling is active
         * to give the user an idea of the content size and the current
         * scroll offset(s) therein.
         */

    }, {
        key: 'showIndicators',
        get: function get() {
            return this._showIndicators;
        },
        set: function set(onOff) {
            if (this._showIndicators !== onOff) {
                this._showIndicators = onOff;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'contentSize',
        get: function get() {
            return this.contentView.size;
        },
        set: function set(size) {
            this.contentView.size.set(size.width, size.height);
            this.needsLayout = true;
        }
    }, {
        key: 'pagingEnabled',
        get: function get() {
            return this._pagingEnabled;
        },
        set: function set(onOff) {
            this._pagingEnabled = onOff;
            if (!this._pagingEnabled) {
                this._autoPagingEnabled = false;
            }
        }
    }, {
        key: 'autoPagingEnabled',
        get: function get() {
            return this._autoPagingEnabled;
        },
        set: function set(onOff) {
            if (onOff) {
                this._pagingEnabled = true;
            }

            this._autoPagingEnabled = onOff;
        }
    }, {
        key: 'pageNo',
        get: function get() {
            return this._pageNo.clone();
        },
        set: function set(pageNo) {
            if (_lodash2.default.isFinite(pageNo.x) && _lodash2.default.isFinite(pageNo.y)) {

                var pageX = Math.max(0, Math.min(this.horizontalPageCount - 1, pageNo.x)),
                    pageY = Math.max(0, Math.min(this.verticalPageCount - 1, pageNo.y));

                // Useful to snap even if values don't logically change.

                this.scrollTo(this.width * pageX, this.height * pageY);

                if (pageX !== this._pageNo.x || pageY !== this._pageNo.y) {

                    this._pageNo.set(pageX, pageY);
                    this.emit('pageChanged', pageX, pageY);
                }
            }
        }
    }, {
        key: 'horizontalPageCount',
        get: function get() {
            return Math.ceil(this.contentSize.width / this.width);
        }

        /**
         * Returns the number of pages the current content spans vertically.
         */

    }, {
        key: 'verticalPageCount',
        get: function get() {
            return Math.ceil(this.contentSize.height / this.height);
        }
    }]);

    return ScrollView;
}(_View3.default);

exports.default = ScrollView;


ScrollView.DecelerationRateFast = 0.9;
ScrollView.DecelerationRateNormal = 0.925;
ScrollView.DecelerationRateSlow = 0.95;

},{"./Animation":57,"./Point":85,"./View":101,"./input":104,"./magic":105,"lodash":53}],88:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _ScrollView2 = require('./ScrollView');

var _ScrollView3 = _interopRequireDefault(_ScrollView2);

var _TextView = require('./TextView');

var _TextView2 = _interopRequireDefault(_TextView);

var _Size = require('./Size');

var _Size2 = _interopRequireDefault(_Size);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A text view inside a scroll view.
 */

var ScrollableTextView = function (_ScrollView) {
    _inherits(ScrollableTextView, _ScrollView);

    function ScrollableTextView(text) {
        _classCallCheck(this, ScrollableTextView);

        var _this = _possibleConstructorReturn(this, (ScrollableTextView.__proto__ || Object.getPrototypeOf(ScrollableTextView)).call(this));

        _this.textView = new _TextView2.default(text);
        _this.contentView.addSubview(_this.textView);

        _this.textView.on('didLayoutSubviews', function () {
            var lastLine = _lodash2.default.last(_this.textView._lines);
            if (lastLine) {
                var textHeight = lastLine.top + _this.textView.lineHeight + _this.textView.insets.bottom;
                _this.contentSize = new _Size2.default(_this.contentSize.width, textHeight);
                _this.textView.frame = _this.contentView.bounds;
            }
        });
        return _this;
    }

    _createClass(ScrollableTextView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            this.textView.frame = this.contentView.bounds;
            this.textView.layoutIfNeeded();
        }
    }]);

    return ScrollableTextView;
}(_ScrollView3.default);

exports.default = ScrollableTextView;

},{"./ScrollView":87,"./Size":90,"./TextView":99,"lodash":53}],89:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if ("value" in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _magic = require('./magic');

var _fonts = require('./fonts');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Choice between a few items.
 *
 * Events:
 * - selectionChanged(index, text)
 */

var SegmentView = function (_View) {
    _inherits(SegmentView, _View);

    function SegmentView() {
        _classCallCheck(this, SegmentView);

        var _this = _possibleConstructorReturn(this, (SegmentView.__proto__ || Object.getPrototypeOf(SegmentView)).call(this));

        _this._selectedIndex = -1;
        _this._selectedTextColor = '#fff';

        _this._accentColor = '#00f';
        _this.borderColor = _this._accentColor;
        _this.textColor = _this._accentColor;

        // NB: selected button background color = this._accentColor
        _this._buttons = [];
        _this._choices = [];

        _this.cornerRadius = 10;
        _this.borderWidth = 1;
        _this.clipsSubviews = true;
        return _this;
    }

    _createClass(SegmentView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            var x = 0;

            _lodash2.default.each(this._buttons, function (button) {
                button.position.set(x, 0);
                x += button.width;
            });
        }
    }, {
        key: 'preferredHeight',
        value: function preferredHeight() {
            return Math.max(_magic.FingerSizePoints, (0, _fonts.lineHeight)(this.font));
        }

        /**
         * Be sure to `sizeChoicesUniform`, `sizeChoicesUniformWidest`, or `sizeChoicesVarying` first.
         */

    }, {
        key: 'sizeToFit',
        value: function sizeToFit() {
            var width = _lodash2.default.sum(_lodash2.default.map(this._buttons, 'width'));
            this.size.set(width, this.preferredHeight());
            return this;
        }

        /**
         * Choice buttons will have varying widths based on their choice text.
         */

    }, {
        key: 'sizeChoicesVarying',
        value: function sizeChoicesVarying() {
            _lodash2.default.each(this._buttons, function (btn) {
                return btn.sizeToFit();
            });
            return this;
        }

        /**
         * Choice buttons will have uniform width based on the text of the
         * choice with the widest text.
         */

    }, {
        key: 'sizeChoicesUniformWidest',
        value: function sizeChoicesUniformWidest() {
            var maxWidth = _lodash2.default.max(_lodash2.default.map(this._buttons, function (btn) {
                btn.sizeToFit();
                return btn.width;
            }));

            _lodash2.default.each(this._buttons, function (btn) {
                btn.width = maxWidth;
            });

            return this;
        }

        /**
         * Each choice's width is the same and is based on the width of the
         * segment view.  You must set the segment view frame width and height
         * first.
         */

    }, {
        key: 'sizeChoicesUniform',
        value: function sizeChoicesUniform() {
            var width = Math.round(this.width / this.choices.length),
                height = this.height;

            _lodash2.default.each(this._buttons, function (btn) {
                btn.size.set(width, height);
            });

            return this;
        }
    }, {
        key: 'draw',
        value: function draw(context) {
            _get(SegmentView.prototype.__proto__ || Object.getPrototypeOf(SegmentView.prototype), 'draw', this).call(this, context);

            // Draw vertical separator lines between buttons

            var n = this._buttons.length;
            if (n === 1) {
                return;
            }

            context.beginPath();

            for (var i = 0; i < n - 1; ++i) {
                var btn = this._buttons[i];
                context.moveTo(btn.right, 0);
                context.lineTo(btn.right, btn.bottom);
            }

            context.closePath();

            context.strokeStyle = this._accentColor;
            context.lineWidth = this.borderWidth;
            context.stroke();
        }
    }, {
        key: 'choices',
        get: function get() {
            return this._choices;
        },
        set: function set(choices) {
            var _this2 = this;

            // don't envision changing choices on the fly being a real use case;
            // thus, only allow them to be set once

            if (this._choices.length > 0) {
                return;
            }

            this._choices = choices;

            var textColor = this.textColor;

            this._buttons = _lodash2.default.map(choices, function (choice, index) {
                var button = new _Button2.default(choice);
                button.id = 'Segment Button ' + index;
                button.borderWidth = 0;
                button.textColor = textColor;
                button.offsetsOnTouch = false;
                button.cornerRadius = 0;
                button.backgroundColor = _magic.transparent;
                //button.highlightColor = '#00a';
                button.highlightedTextColor = '#000';
                button._segmentIndex = index;
                button.on('tap', function () {
                    _this2.selectedIndex = button._segmentIndex;
                });
                _this2.addSubview(button);
                return button;
            });

            this.needsLayout = true;
        }
    }, {
        key: 'accentColor',
        get: function get() {
            return this._accentColor;
        },
        set: function set(color) {
            if (this._accentColor !== color) {
                this._accentColor = color;
                this.borderColor = this._accentColor;
                this.textColor = this._accentColor;
            }
        }
    }, {
        key: 'selectedTextColor',
        get: function get() {
            return this._selectedTextColor;
        },
        set: function set(color) {
            if (this._selectedTextColor != color) {
                this._selectedTextColor = color;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'selectedIndex',
        get: function get() {
            return this._selectedIndex;
        },
        set: function set(index) {
            var _this3 = this;

            if (this._selectedIndex === -1) {
                this._selectedIndex = index;
            } else if (index != this._selectedIndex) {
                this._selectedIndex = index;
                this.emit('selectionChanged', index, this.choices[index]);
            }

            _lodash2.default.each(this._buttons, function (btn) {
                if (btn._segmentIndex === index) {
                    btn.backgroundColor = _this3._accentColor;
                    btn.textColor = _this3.selectedTextColor;
                } else {
                    btn.backgroundColor = _magic.transparent;
                    btn.textColor = _this3.textColor;
                }
            });

            this.needsDisplay = true;
        }
    }, {
        key: 'font',
        get: function get() {
            return _get(SegmentView.prototype.__proto__ || Object.getPrototypeOf(SegmentView.prototype), 'font', this);
        },
        set: function set(f) {
            _set(SegmentView.prototype.__proto__ || Object.getPrototypeOf(SegmentView.prototype), 'font', f, this);
            _lodash2.default.each(this._buttons, function (btn) {
                btn.font = f;
            });
        }
    }]);

    return SegmentView;
}(_View3.default);

exports.default = SegmentView;

},{"./Button":62,"./View":101,"./fonts":103,"./magic":105,"lodash":53}],90:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 2-D dimensions (width, height).
 *
 * Events:
 * - valueChanged: when the size was changed.
 */

var Size = function (_EventEmitter) {
    _inherits(Size, _EventEmitter);

    function Size() {
        var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        _classCallCheck(this, Size);

        if (!_lodash2.default.isFinite(width) || !_lodash2.default.isFinite(height)) {
            throw new Error('number required');
        }

        var _this = _possibleConstructorReturn(this, (Size.__proto__ || Object.getPrototypeOf(Size)).call(this));

        _this._width = width;
        _this._height = height;
        return _this;
    }

    _createClass(Size, [{
        key: 'didChange',
        value: function didChange() {
            this.emit('valueChanged');
        }
    }, {
        key: 'set',
        value: function set(width, height) {
            if (!_lodash2.default.isFinite(width) || !_lodash2.default.isFinite(height)) {
                throw new Error('number required');
            }

            var changed = false;

            if (this._width !== width) {
                this._width = width;
                changed = true;
            }

            if (this._height !== height) {
                this._height = height;
                changed = true;
            }

            if (changed) {
                this.didChange();
            }

            return this;
        }
    }, {
        key: 'copy',
        value: function copy(s) {
            return this.set(s._width, s._height);
        }
    }, {
        key: 'clone',
        value: function clone() {
            return new Size(this._width, this._height);
        }
    }, {
        key: 'width',
        get: function get() {
            return this._width;
        },
        set: function set(w) {
            if (!_lodash2.default.isFinite(w)) {
                throw new Error('number required');
            }

            if (this._width !== w) {
                this._width = w;
                this.didChange();
            }
        }
    }, {
        key: 'height',
        get: function get() {
            return this._height;
        },
        set: function set(h) {
            if (!_lodash2.default.isFinite(h)) {
                throw new Error('number required');
            }

            if (this._height !== h) {
                this._height = h;
                this.didChange();
            }
        }
    }]);

    return Size;
}(_events2.default);

exports.default = Size;

},{"events":109,"lodash":53}],91:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

var _ProgressBar = require('./ProgressBar');

var _ProgressBar2 = _interopRequireDefault(_ProgressBar);

var _SliderThumb = require('./SliderThumb');

var _SliderThumb2 = _interopRequireDefault(_SliderThumb);

var _Frame = require('./Frame');

var _Frame2 = _interopRequireDefault(_Frame);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A view of a editable value limited to a numeric range (min, max).
 *
 * Horizontal: min to max is left-to-right.
 * Vertical: min to max is bottom-to-top.
 *
 * The value is altered by dragging the slider "thumb".  If `.step` is set, values are
 * quantized to increments of `.step`.
 *
 * Events:
 * - valueChanged(newValue)
 */

var Slider = function (_View) {
    _inherits(Slider, _View);

    function Slider(_ref) {
        var horizontal = _ref.horizontal,
            value = _ref.value,
            minValue = _ref.minValue,
            maxValue = _ref.maxValue,
            step = _ref.step;

        _classCallCheck(this, Slider);

        var _this = _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this));

        minValue = minValue || 0;
        maxValue = maxValue || 100;
        value = value || 0;
        horizontal = !!horizontal;
        step = step || 1;

        _this._minValue = Math.min(minValue, maxValue);
        _this._maxValue = Math.max(maxValue, minValue);
        _this._step = Math.max(0, step);

        _this.clipsSubviews = false;

        _this.progressBar = new _ProgressBar2.default();
        _this.progressBar.horizontal = horizontal;
        _this.progressBar.barColor = '#aaa';
        _this.progressBar.backgroundColor = '#eee';
        _this.addSubview(_this.progressBar);

        _this.thumb = new _SliderThumb2.default();
        _this.thumb.backgroundColor = '#fff';
        _this.addSubview(_this.thumb);

        _this.thumb.draggable = true;
        _this.thumb.on('dragUpdated', function (point) {
            var slider = this.superview,
                progressBar = slider.progressBar;

            var value;
            if (slider.horizontal) {
                value = (point.x - progressBar.left) / progressBar.width;
            } else {
                value = (progressBar.bottom - point.y) / progressBar.height;
            }

            slider.normalizedValue = value;
        });

        _this.value = Math.max(_this._minValue, Math.min(value, _this._maxValue));
        return _this;
    }

    _createClass(Slider, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            var thumbSize = this.thumbSize;

            var progressBarInsetMajorAxis = Math.round(thumbSize / 2),
                progressBarInsetMinorAxis = Math.round(thumbSize / 4),
                progressBarRect;

            if (this.horizontal) {
                progressBarRect = _Frame2.default.makeFrame(progressBarInsetMajorAxis, progressBarInsetMinorAxis, this.width - progressBarInsetMajorAxis * 2, this.height - progressBarInsetMinorAxis * 2);
            } else {
                progressBarRect = _Frame2.default.makeFrame(progressBarInsetMinorAxis, progressBarInsetMajorAxis, this.width - progressBarInsetMinorAxis * 2, this.height - progressBarInsetMajorAxis * 2);
            }

            this.progressBar.frame = progressBarRect;

            this.thumb.size.set(thumbSize, thumbSize);

            if (_lodash2.default.isFinite(this._value)) {
                this.value = this._value; // moves thumb into correct move.
            }
        }
    }, {
        key: 'toString',
        value: function toString() {
            return _get(Slider.prototype.__proto__ || Object.getPrototypeOf(Slider.prototype), 'toString', this).call(this).replace('Slider', 'Slider.' + (this.horizontal ? 'horizontal' : 'vertical'));
        }
    }, {
        key: 'horizontal',
        get: function get() {
            return this.progressBar.horizontal;
        }
    }, {
        key: 'thumbSize',
        get: function get() {
            return this.horizontal ? this.height : this.width;
        }
    }, {
        key: 'normalizedValue',
        get: function get() {
            return (this._value - this._minValue) / (this._maxValue - this._minValue);
        },
        set: function set(value) {
            this.value = this._minValue + Math.max(0, Math.min(1, value)) * (this._maxValue - this._minValue);
        }
    }, {
        key: 'value',
        get: function get() {
            return this._value;
        },
        set: function set(value) {
            var previousValue = this._value;

            value = this._step * Math.floor(Math.max(this._minValue, Math.min(this._maxValue, value)) / this._step);
            this._value = value;

            var nv = this.normalizedValue;
            this.progressBar.progress = nv;

            if (this.horizontal) {
                this.thumb.position.set(Math.round(this.progressBar.left + this.progressBar.width * nv - this.thumb.halfWidth), 0);
            } else {
                this.thumb.position.set(0, Math.round(this.progressBar.top + this.progressBar.height - this.progressBar.height * nv - this.thumb.halfHeight));
            }

            if (value !== previousValue) {
                this.emit('valueChanged', value);
            }

            this.needsDisplay = true;
        }
    }]);

    return Slider;
}(_View3.default);

exports.default = Slider;

},{"./Frame":67,"./ProgressBar":86,"./SliderThumb":92,"./View":101,"lodash":53}],92:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The draggable part of a slider which is positioned to show the
 * slider's current value.
 */

var SliderThumb = function (_View) {
    _inherits(SliderThumb, _View);

    function SliderThumb() {
        _classCallCheck(this, SliderThumb);

        var _this = _possibleConstructorReturn(this, (SliderThumb.__proto__ || Object.getPrototypeOf(SliderThumb)).call(this));

        _this.shadowColor = 'rgba(0,0,0,0.5)';
        _this.shadowBlur = 3;
        _this.shadowOffsetY = 2;
        _this.clipsSubviews = false; // to see shadow
        return _this;
    }

    /**
     * Renders the thumb as a circle.
     */

    _createClass(SliderThumb, [{
        key: 'addShapePath',
        value: function addShapePath(context) {
            var hw = this.halfWidth,
                hh = this.halfHeight;

            context.beginPath();
            context.arc(hw, hh, hw, 0, 2 * Math.PI, false);
            context.closePath();
        }
    }]);

    return SliderThumb;
}(_View3.default);

exports.default = SliderThumb;

},{"./View":101}],93:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _fonts = require('canvas_ui/fonts');

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * A view which shows one of potentially many subviews.
 * Switching between views is achieved by tapping a tab at the top
 * of the view. There's one tab button per tab and each has a
 * textual label.
 */

// TODO - tabs on bottom as option
// TODO - scroll horizontally when many tabs present

var TabView = function (_View) {
    _inherits(TabView, _View);

    function TabView() {
        _classCallCheck(this, TabView);

        var _this = _possibleConstructorReturn(this, (TabView.__proto__ || Object.getPrototypeOf(TabView)).call(this));

        _this.insets.top = 10;
        _this.backgroundColor = '#fff';

        _this.contentView = new _View3.default();
        _this.contentView.id = 'tabContentView';
        _this.addSubview(_this.contentView);

        _this._tabs = [];
        _this._activeIndex = -1;

        _this._tabButtonMargin = 8;
        _this._tabButtonCornerRadius = 5;

        _this._activeBackgroundColor = '#fff';
        _this._activeFont = (0, _fonts.BoldSystemFontOfSize)(14);
        _this._activeTextColor = '#000';

        _this._inactiveBackgroundColor = '#eee';
        _this._inactiveFont = (0, _fonts.SystemFontOfSize)(14);
        _this._inactiveTextColor = '#aaa';

        _this._separatorColor = '#666';
        _this._separatorLineWidth = 1;
        return _this;
    }

    _createClass(TabView, [{
        key: 'addTab',
        value: function addTab(title, view) {
            var _this2 = this;

            var button = new _Button2.default(title);
            button.id = 'tabButton' + this._tabs.length;
            button.shadowBlur = 0;
            button.cornerRadius = [this._tabButtonCornerRadius, this._tabButtonCornerRadius, 0, 0];
            button.borderWidth = this._separatorLineWidth;
            button.borderColor = this._separatorColor;
            button.on('tap', function () {
                _this2.activeIndex = _lodash2.default.findIndex(_this2._tabs, function (tab) {
                    return tab.button === button;
                });
            });
            this.addSubview(button);

            this.contentView.addSubview(view);
            this.bringToFront(this.contentView);

            this._tabs.push({ title: title, view: view, button: button });

            view.hidden = true;
        }
    }, {
        key: 'removeTabAtIndex',
        value: function removeTabAtIndex(index) {
            this._tabs[index].view.removeFromSuperview();
            this._tabs[index].button.removeFromSuperview();

            if (index === this._activeIndex) {
                this.activeIndex = index + 1;
            }
        }
    }, {
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            var _this3 = this;

            if (this._tabs.length === 0) {
                return;
            }

            // Tabs left to right across the top
            // Active tab's view beneath the tabs

            var x = this.contentLeft + this._tabButtonMargin;
            var y = this.contentTop;

            _lodash2.default.each(this._tabs, function (tab) {
                tab.button.sizeToFit();
                tab.button.position.set(x, y);
                x += tab.button.width + _this3._tabButtonMargin;
            });

            var buttonBottom = _lodash2.default.min(_lodash2.default.map(this._tabs, 'button.bottom')) - this._separatorLineWidth;
            this.contentView.frame.set(0, buttonBottom, this.width, this.height - buttonBottom);

            _lodash2.default.each(this._tabs, function (tab) {
                tab.view.frame = _this3.contentView.bounds;
            });
        }
    }, {
        key: 'postDraw',
        value: function postDraw(context) {
            _get(TabView.prototype.__proto__ || Object.getPrototypeOf(TabView.prototype), 'postDraw', this).call(this, context);

            if (this._tabs.length === 0 || this._separatorLineWidth === 0) {
                return;
            }

            context.lineWidth = this._separatorLineWidth;
            context.strokeStyle = this._separatorColor;

            // Draw separator between buttons and content

            if (this._activeIndex !== -1) {
                var y = this.contentView.top,
                    activeTab = this._tabs[this._activeIndex];

                context.beginPath();
                context.moveTo(0, y);
                context.lineTo(activeTab.button.left, y);
                context.moveTo(activeTab.button.right, y);
                context.lineTo(this.width, y);
                context.closePath();
                context.stroke();
            }
        }
    }, {
        key: 'activeIndex',
        get: function get() {
            return this._activeIndex;
        },
        set: function set(index) {
            var _this4 = this;

            if (index < 0 || index >= this._tabs.length) {
                return;
            }

            if (this._activeIndex !== index) {
                // Hide current tab view

                if (this._activeIndex !== -1) {
                    this._tabs[this._activeIndex].view.hidden = true;
                }

                this._activeIndex = index;

                // Stylize the tabs

                _lodash2.default.each(this._tabs, function (tab, tabIndex) {
                    if (tabIndex === index) {
                        tab.button.font = _this4._activeFont;
                        tab.button.textColor = _this4._activeTextColor;
                        tab.button.backgroundColor = _this4._activeBackgroundColor;
                    } else {
                        tab.button.font = _this4._inactiveFont;
                        tab.button.textColor = _this4._inactiveTextColor;
                        tab.button.backgroundColor = _this4._inactiveBackgroundColor;
                    }
                });

                // Swap in the tab's view as current

                this._tabs[this._activeIndex].view.hidden = false;

                this.needsLayout = true;

                this.emit('tabChanged');
            }
        }
    }, {
        key: 'activeBackgroundColor',
        get: function get() {
            return this._activeBackgroundColor;
        },
        set: function set(color) {
            var _this5 = this;

            if (this._activeBackgroundColor !== color) {
                this._activeBackgroundColor = color;

                _lodash2.default.each(this._tabs, function (tab, index) {
                    tab.button.backgroundColor = index === _this5._activeIndex ? color : _this5._inactiveTextColor;
                });
            }
        }
    }, {
        key: 'inactiveBackgroundColor',
        get: function get() {
            return this._inactiveBackgroundColor;
        },
        set: function set(color) {
            var _this6 = this;

            if (this._inactiveBackgroundColor !== color) {
                this._inactiveBackgroundColor = color;
                _lodash2.default.each(this._tabs, function (tab, index) {
                    tab.button.backgroundColor = index !== _this6._activeIndex ? color : _this6._activeTextColor;
                });
            }
        }
    }, {
        key: 'tabButtonMargin',
        get: function get() {
            return this._tabButtonMargin;
        },
        set: function set(value) {
            value = Math.abs(value);

            if (_lodash2.default.isFinite(value) && this._tabButtonMargin !== value) {
                this._tabButtonMargin = value;
                this.needsLayout = true;
            }
        }
    }, {
        key: 'tabButtonCornerRadius',
        get: function get() {
            return this._tabButtonCornerRadius;
        },
        set: function set(value) {
            value = Math.abs(value);

            if (_lodash2.default.isFinite(value) && this._tabButtonCornerRadius !== value) {

                this._tabButtonCornerRadius = value;

                _lodash2.default.each(this._tabs, function (tab) {
                    tab.button.cornerRadius = [value, value, 0, 0];
                });
            }
        }
    }, {
        key: 'separatorColor',
        get: function get() {
            return this._separatorColor;
        },
        set: function set(color) {
            if (this._separatorColor !== color) {
                this._separatorColor = color;

                _lodash2.default.each(this._tabs, function (tab) {
                    tab.button.borderColor = color;
                });
            }
        }
    }, {
        key: 'separatorLineWidth',
        get: function get() {
            return this._separatorLineWidth;
        },
        set: function set(width) {
            width = Math.abs(width);

            if (_lodash2.default.isFinite(width) && this._separatorLineWidth !== width) {

                this._separatorLineWidth = width;

                _lodash2.default.each(this._tabs, function (tab) {
                    tab.button.borderColor = width;
                });
            }
        }
    }, {
        key: 'activeFont',
        get: function get() {
            return this._activeFont;
        },
        set: function set(font) {
            var _this7 = this;

            if (this._activeFont !== font) {
                this._activeFont = font;

                _lodash2.default.each(this._tabs, function (tab, index) {
                    tab.button.font = index === _this7._activeIndex ? font : _this7._inactiveFont;
                });
            }
        }
    }, {
        key: 'inactiveFont',
        get: function get() {
            return this._inactiveFont;
        },
        set: function set(font) {
            var _this8 = this;

            if (this._inactiveFont !== font) {
                this._inactiveFont = font;

                _lodash2.default.each(this._tabs, function (tab, index) {
                    tab.button.font = index !== _this8._activeIndex ? font : _this8._activeFont;
                });
            }
        }
    }, {
        key: 'activeTextColor',
        get: function get() {
            return this._activeTextColor;
        },
        set: function set(color) {
            var _this9 = this;

            if (this._activeTextColor !== color) {
                this._activeTextColor = color;

                _lodash2.default.each(this._tabs, function (tab, index) {
                    tab.button.textColor = index === _this9._activeIndex ? color : _this9._inactiveTextColor;
                });
            }
        }
    }, {
        key: 'inactiveTextColor',
        get: function get() {
            return this._inactiveTextColor;
        },
        set: function set(color) {
            var _this10 = this;

            if (this._inactiveTextColor !== color) {
                this._inactiveTextColor = color;

                _lodash2.default.each(this._tabs, function (tab, index) {
                    tab.button.textColor = index !== _this10._activeIndex ? color : _this10._activeTextColor;
                });
            }
        }
    }]);

    return TabView;
}(_View3.default);

exports.default = TabView;

},{"./Button":62,"./View":101,"canvas_ui/fonts":103,"lodash":53}],94:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

var _TextEditView = require('./TextEditView');

var _TextEditView2 = _interopRequireDefault(_TextEditView);

var _TableView = require('./TableView');

var _TableView2 = _interopRequireDefault(_TableView);

var _TableViewCell = require('canvas_ui/TableViewCell');

var _TableViewCell2 = _interopRequireDefault(_TableViewCell);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _KeyboardView = require('./KeyboardView');

var KeyboardView = _interopRequireWildcard(_KeyboardView);

var _magic = require('./magic');

var _Point = require('./Point');

var _Point2 = _interopRequireDefault(_Point);

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * A search text input view that filters the results of
 * a table's data source to only show those that match
 * a predicate.
 *
 * The default predicate simply does a case-insensitive search
 * on the title or subtitle of the cells of the target table view.
 *
 * Predicate function should return `{title, subtitle, image}`
 * for a match or `null` for a non-match.
 *
 * Events:
 * - searchBegin: the results table will be shown so here's a good
 *   time to make this view tall enough
 * - searchEnd: the results table will be hidden...
 * - cellSelected(index, cell)
 */

var TableSearchView = function (_View) {
    _inherits(TableSearchView, _View);

    function TableSearchView(tableView, searchPredicate) {
        _classCallCheck(this, TableSearchView);

        var _this = _possibleConstructorReturn(this, (TableSearchView.__proto__ || Object.getPrototypeOf(TableSearchView)).call(this));

        _this._matchingItems = [];
        _this._tableView = tableView;

        _this.insets.setAll(10);

        _this._searchField = new _TextEditView2.default();
        _this._searchField.id = 'searchField';
        _this._searchField.placeholderLabel.text = 'Search';
        _this._searchField.on('enter', _this._performSearch.bind(_this));
        _this._searchField.on('textChanged', _this._performSearch.bind(_this));
        _this._searchField.on('didBecomeFirstResponder', function () {
            _this._matchingItemsTableView.hidden = false;
            _this._cancelButton.hidden = false;
            _this.emit('searchBegin');
            _this._performSearch();
        });
        _this._searchField.on('didResignFirstResponder', function () {
            _this._matchingItems = [];
            _this._matchingItemsTableView.hidden = true;
            _this._cancelButton.hidden = true;
            _this._searchField.text = null;

            var kbd = KeyboardView.instance(false);
            if (kbd) {
                kbd.hide();
            }

            _this.emit('searchEnd');
        });
        _this.addSubview(_this._searchField);

        _this._cancelButton = new _Button2.default('Cancel');
        _this._cancelButton.id = 'cancelButton';
        _this._cancelButton.hidden = true;
        _this._cancelButton.on('tap', function () {
            _this._searchField.resignFirstResponder();
        });
        _this.addSubview(_this._cancelButton);

        _this._matchingItemsTableView = new _TableView2.default(_this, _this);
        _this._matchingItemsTableView.id = 'matchingItems';
        _this._matchingItemsTableView.hidden = true;
        _this.addSubview(_this._matchingItemsTableView);

        if (_lodash2.default.isFunction(searchPredicate)) {
            _this._searchPredicate = searchPredicate;
        } else {
            _this._searchPredicate = function (searchText, sourceCells) {
                var textLower = searchText.toLowerCase();
                return _lodash2.default.filter(sourceCells, function (cell) {
                    if (cell.title.toLowerCase().indexOf(textLower) !== -1 || cell.subtitle.toLowerCase().indexOf(textLower) !== -1) {
                        return { title: cell.title, subtitle: cell.subtitle };
                    }
                    return null;
                });
            };
        }
        console.log(KeyboardView);
        KeyboardView.eventEmitter.on('changedVisibility', function () /*keyboardHidden*/{
            _this.needsLayout = true;
            _this.needsDisplay = true;
        });
        return _this;
    }

    _createClass(TableSearchView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            _get(TableSearchView.prototype.__proto__ || Object.getPrototypeOf(TableSearchView.prototype), 'layoutSubviews', this).call(this);

            var margin = 10;

            this._cancelButton.sizeToFit().position.set(this.contentRight - this._cancelButton.width, this.contentTop);

            if (this._cancelButton.hidden) {
                this._searchField.frame.set(this.contentLeft, this.contentTop, this._cancelButton.right - this.contentLeft, _magic.FingerSizePoints);
            } else {
                this._searchField.width = this._cancelButton.left - this.contentLeft - margin;
                this._searchField.moveLeftOf(this._cancelButton, -margin).alignTop(this._cancelButton).makeSameHeight(this._cancelButton);
            }

            this._matchingItemsTableView.frame.copy(this._tableView.frame);

            // check if keyboard is visible and reduce height
            var matchingItemsTableBottom = this._matchingItemsTableView.convertLocalToRoot(new _Point2.default(0, this._matchingItemsTableView.height)).y,
                kbd = KeyboardView.instance(false);

            if (kbd && !kbd.hidden) {
                var delta = matchingItemsTableBottom + margin - kbd.top;
                if (delta > 0) {
                    this._matchingItemsTableView.height -= delta;
                }
            }
        }
    }, {
        key: '_performSearch',
        value: function _performSearch() {
            var searchText = this._searchField.text.trim(),
                sourceCells = _lodash2.default.filter(this._tableView.contentView.subviews, function (subview) {
                return subview instanceof _TableViewCell2.default;
            }),
                matchingItems = searchText.length ? _lodash2.default.filter(this._searchPredicate(searchText, sourceCells) || [], function (result) {
                return result !== null;
            }) : [];

            if (_lodash2.default.isArray(matchingItems)) {
                this._matchingItems = matchingItems;
                this._matchingItemsTableView.reload();
            }
        }

        // TableViewDataSource

    }, {
        key: 'load',
        value: function load(tableView, complete) {
            if (_lodash2.default.isFunction(complete)) {
                complete();
            }
        }
    }, {
        key: 'numberOfItems',
        value: function numberOfItems() /*tableView*/{
            return this._matchingItems.length;
        }
    }, {
        key: 'cellForItemAtIndex',
        value: function cellForItemAtIndex(tableView, index) {
            var matchResult = this._matchingItems[index];
            if (matchResult) {
                var cell = new _TableViewCell2.default(tableView, index);
                cell.title = matchResult.title;
                cell.subtitle = matchResult.subtitle;
                cell.highlightsOnTouch = true;
                cell.image = matchResult.image;
                return cell;
            }
        }

        // TableViewDelegate

    }, {
        key: 'didSelectItemAtIndex',
        value: function didSelectItemAtIndex(tableView, index, cell) {
            this.emit('cellSelected', index, cell);
            this._searchField.resignFirstResponder();
        }
    }, {
        key: 'heightForCellAtIndex',
        value: function heightForCellAtIndex() /*tableView, index*/{
            return 60;
        }
    }, {
        key: 'searchPredicate',
        get: function get() {
            return this._searchPredicate;
        },
        set: function set(pred) {
            if (_lodash2.default.isFunction(pred)) {
                this._searchPredicate = pred;
                this._performSearch();
            }
        }
    }]);

    return TableSearchView;
}(_View3.default);

exports.default = TableSearchView;

},{"./Button":62,"./KeyboardView":74,"./Point":85,"./TableView":95,"./TextEditView":98,"./View":101,"./magic":105,"canvas_ui/TableViewCell":96,"lodash":53}],95:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _ScrollView2 = require('./ScrollView');

var _ScrollView3 = _interopRequireDefault(_ScrollView2);

var _ActivityIndicatorView = require('./ActivityIndicatorView');

var _ActivityIndicatorView2 = _interopRequireDefault(_ActivityIndicatorView);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _TableViewCell = require('./TableViewCell');

var _TableViewCell2 = _interopRequireDefault(_TableViewCell);

var _BasicAnimations = require('./BasicAnimations');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Displays a vertically scrollable list of cells which are views
 * that display a single "item" in the list.
 *
 * ## Data Source
 *
 * The source of items to display is a "data source".  See `TableViewDataSource`
 * for details.
 *
 * ## Delegate
 *
 * A table view may have a *delegate* which is consulted for various actions
 * (e.g. "can the user move this item from here to there?").  See `TableViewDelegate`
 * for details.
 *
 * ## Editing
 *
 * There is no separate edit mode for a table view. Items may be edited based on
 * what the delegate allows. Editing operations include reordering a single cell
 * and deleting/removing a single cell.
 *
 * ### Reordering/Moves
 *
 * Reordering a cell occurs when the user long-presses a cell, drags it to
 * another location, and the delegate allows the reordering/move.  Dragging a
 * table view cell to the top or the bottom of the table view causes the table
 * content to auto scroll by half the table view's height.
 *
 * ### Deletion/Removal
 *
 * Deletion/removal of a cell occurs when the user swipes left
 * on a cell to show a previously hidden delete button and then taps the delete
 * button. Scrolling more than a trivial amount vertically hides a delete
 * button (if any).
 *
 * ## Headers/Footers/Sections
 *
 * There is only one implicit section supported. The table view supports
 * an arbitrary header and footer view.
 *
 * ## Unsupported Features vis a vis iOS
 *
 * - sections
 * - pull to refresh
 * - partial reloads; full reloads only
 * - queue of reusable cells; we expect the data source to create TableViewCell objects
 *   on reload. When the content view is scrolled, those cells that are not inside the
 *   TableView's frame are .hidden while those that become visible are unhidden and laid out.
 *
 * ## Events
 *
 * - dataSourceLoadingStateChanged(isLoading)
 */

var TableView = function (_ScrollView) {
    _inherits(TableView, _ScrollView);

    function TableView(dataSource, delegate) {
        _classCallCheck(this, TableView);

        var _this = _possibleConstructorReturn(this, (TableView.__proto__ || Object.getPrototypeOf(TableView)).call(this));

        _this._dataSource = dataSource;
        _this._delegate = delegate;

        _this._headerView = null;
        _this._footerView = null;

        // Displayed while loading from data source.

        _this._activityIndicator = new _ActivityIndicatorView2.default();
        _this._activityIndicator.id = 'loadingIndicator';
        _this._activityIndicator.backgroundColor = '#fff';
        _this._activityIndicator.lineColor = '#aaa';
        _this._activityIndicator.lineWidth = 2;
        _this._activityIndicator.hidden = true;
        _this.addSubview(_this._activityIndicator);

        _this._isLoading = false;
        _this.reload();

        _this._setupSwipeLeftToRemove();

        _this.contentView.position.on('valueChanged', function () {
            _lodash2.default.each(_this.contentView.subviews, function (subview) {
                if (subview instanceof _TableViewCell2.default) {
                    _this._updateCellVisibility(subview);
                }
            });
        });
        return _this;
    }

    _createClass(TableView, [{
        key: 'reload',


        /**
         * Reload items from the data source.
         */

        value: function reload() {
            var _this2 = this;

            var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            var complete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            var dataSource = this.dataSource,
                delegate = this.delegate;

            if (!dataSource || !delegate || this._isLoading) {
                return;
            }

            var cells = _lodash2.default.filter(this.contentView.subviews, function (subview) {
                return subview instanceof _TableViewCell2.default;
            });
            _lodash2.default.each(cells, function (cell) {
                return cell.removeFromSuperview();
            });

            this._isLoading = true;
            this.emit('dataSourceLoadingStateChanged', this._isLoading);

            this._activityIndicator.hidden = false;
            this._activityIndicator.animating = true;
            this.needsLayout = true;

            this.contentView.hidden = true;

            dataSource.load(this, function () {
                _this2._isLoading = false;
                _this2.emit('dataSourceLoadingStateChanged', _this2._isLoading);

                var n = dataSource.numberOfItems(_this2);

                var totalHeight = 0;

                for (var i = 0; i < n; ++i) {
                    var cell = dataSource.cellForItemAtIndex(_this2, i);
                    cell._index = i;
                    cell._itemCount = n;
                    _this2.contentView.addSubview(cell);

                    var cellHeight = delegate.heightForCellAtIndex(i);
                    cell.height = cellHeight;
                    totalHeight += cellHeight;
                }

                _this2.contentView.height = totalHeight;
                _this2.needsLayout = true;

                _this2.contentView.hidden = false;

                _this2.scrollToRow(0, animated);

                if (_lodash2.default.isFunction(complete)) {
                    complete();
                }
            });
        }

        // Layout the cells inside the content view.
        // Content views are just regular views.

    }, {
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            var _this3 = this;

            var contentView = this.contentView;
            contentView.width = this.width;

            _get(TableView.prototype.__proto__ || Object.getPrototypeOf(TableView.prototype), 'layoutSubviews', this).call(this);

            if (this._activityIndicator) {
                if (this._isLoading) {
                    this._activityIndicator.size.set(30, 30);
                    this._activityIndicator.moveToCenterMiddle();
                    return;
                }

                this._activityIndicator.hidden = true;
            }

            var contentTop = contentView.contentTop,
                contentLeft = contentView.contentLeft,
                contentWidth = contentView.contentWidth,
                headerView = this._headerView,
                footerView = this._footerView,
                tableHeight = this.height;

            var y = contentTop;

            if (headerView) {
                headerView.frame.set(contentLeft, contentTop, contentWidth, headerView.height);
                y = headerView.bottom;
            }

            // NB: cells are in same order as data source items

            _lodash2.default.each(contentView.subviews, function (cell /*, index*/) {
                if (cell instanceof _TableViewCell2.default) {
                    cell.frame.set(contentLeft, y, contentWidth, cell.height); // triggers layout
                    _this3._updateCellVisibility(cell, tableHeight);
                    y += cell.height;
                }
            });

            if (footerView) {
                footerView.frame.set(contentLeft, y, contentWidth, footerView.height);
                y = footerView.bottom;
            }

            contentView.height = y;
        }
    }, {
        key: '_setupSwipeLeftToRemove',
        value: function _setupSwipeLeftToRemove() {
            var _this4 = this;

            var cellLeftStart, dragStartPoint, swipeCell;

            this.contentView.on('dragStarted', function (tableViewPoint) {
                var contentViewPoint = _this4.contentView.convertSuperviewToLocal(tableViewPoint),
                    _contentView$hitTest = _this4.contentView.hitTest(contentViewPoint),
                    _contentView$hitTest2 = _slicedToArray(_contentView$hitTest, 1),
                    overCell /*, overCellPoint*/ = _contentView$hitTest2[0];

                // TODO this wouldn't be too difficult to alter to support
                //      and arbitrary view served up by the table cell itself
                //      for multiple actions

                if (overCell && overCell instanceof _TableViewCell2.default && _this4._delegate && _lodash2.default.isFunction(_this4._delegate.canRemoveItem) && _this4._delegate.canRemoveItem(_this4, overCell._index)) {

                    if (swipeCell) {
                        swipeCell.left = 0;
                    }

                    swipeCell = overCell;
                    cellLeftStart = swipeCell.left;
                    dragStartPoint = tableViewPoint.clone();

                    var deleteButton = new _Button2.default('Delete');
                    deleteButton.id = 'delete';
                    deleteButton.backgroundColor = 'red';
                    deleteButton.textColor = 'white';
                    deleteButton.borderWidth = 0;
                    deleteButton.cornerRadius = 0;
                    deleteButton.shadowBlur = 0;
                    deleteButton.offsetsOnTouch = false;
                    deleteButton.sizeToFit();
                    deleteButton.frame.set(swipeCell.right - deleteButton.width, swipeCell.top, deleteButton.width, swipeCell.height);
                    _this4.contentView.addSubview(deleteButton);
                    _this4.contentView.moveToBack(deleteButton);
                    deleteButton.on('tap', function () {
                        if (_this4._delegate && _lodash2.default.isFunction(_this4._delegate.canRemoveItem) && _this4._delegate.canRemoveItem(_this4, swipeCell._index)) {

                            _this4._dataSource.removeItemAtIndex(_this4, swipeCell._index);

                            deleteButton.removeFromSuperview();

                            swipeCell.left = 0;

                            swipeCell.showsSeparatorLine = false;
                            swipeCell.addAnimation(new _BasicAnimations.FadeOut(swipeCell)).once('complete', function () {
                                swipeCell.removeFromSuperview();
                                _this4.needsLayout = true;
                                _this4.needsDisplay = true;
                                //this.reload();
                            });
                        }
                    });

                    if (_this4.deleteButton) {
                        _this4.deleteButton.removeFromSuperview();
                    }
                    _this4.deleteButton = deleteButton;
                } else {
                    swipeCell = null;
                    dragStartPoint = null;
                }
            });

            this.contentView.on('dragUpdated', function (tableViewPoint) {
                var contentViewPoint = _this4.contentView.convertSuperviewToLocal(tableViewPoint);

                if (dragStartPoint) {
                    var distanceDraggedHorizontally = tableViewPoint.x - dragStartPoint.x,
                        distanceDraggedVertically = tableViewPoint.y - dragStartPoint.y;

                    if (Math.abs(distanceDraggedVertically) > 30) {
                        if (swipeCell) {
                            swipeCell.left = 0;
                        }

                        if (_this4.deleteButton) {
                            _this4.deleteButton.removeFromSuperview();
                        }
                    } else {
                        var _contentView$hitTest3 = _this4.contentView.hitTest(contentViewPoint),
                            _contentView$hitTest4 = _slicedToArray(_contentView$hitTest3, 1),
                            overCell /*, overCellPoint*/ = _contentView$hitTest4[0];

                        if (overCell && overCell === swipeCell) {
                            overCell.left = cellLeftStart + distanceDraggedHorizontally;
                            overCell.left = Math.max(-_this4.deleteButton.width, Math.min(0, overCell.left));
                        }
                    }
                }
            });

            this.contentView.on('dragEnded', function () /*tableViewPoint*/{
                if (swipeCell && swipeCell.left < 0 && _this4.deleteButton) {
                    swipeCell.addAnimation({
                        name: 'showDeleteButtonFully',
                        target: swipeCell,
                        endValues: { left: -_this4.deleteButton.width },
                        duration: 200
                    });
                }
            });
        }
    }, {
        key: '_updateCellVisibility',


        // Hide cells in the content view that are not within the frame of the table view.
        // Hidden views are not rendered and are ignored during layout as well as during
        // input handling. Thus, this is an optimization.

        value: function _updateCellVisibility(cell, tableHeight) {
            tableHeight = tableHeight || this.height;

            // Cells are "in" the content view of this table view.
            // We need to know about the cell's top/bottom in the coordinate
            // system of the table view.

            var cellTop = this.contentView.convertLocalToOther(cell.position, this).y,
                cellHeight = cell.size._height,
                cellBottom = cellTop + cellHeight,
                topVisible = cellTop >= 0 && cellTop < tableHeight,
                bottomVisible = cellBottom >= 0 && cellBottom < tableHeight;

            cell.hidden = !topVisible && !bottomVisible;
        }
    }, {
        key: 'scrollToRow',
        value: function scrollToRow(index) {
            var _this5 = this;

            var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            this.layoutIfNeeded();

            _lodash2.default.each(this.contentView.subviews, function (subview) {
                if (subview instanceof _TableViewCell2.default && subview._index === index) {

                    _this5.scrollTo(subview.left, subview.top, animated);
                    return false;
                }
            });
        }
    }, {
        key: 'dataSource',
        get: function get() {
            return this._dataSource;
        },
        set: function set(dataSource) {
            this._dataSource = dataSource;
            this.reload();
        }
    }, {
        key: 'delegate',
        get: function get() {
            return this._delegate;
        },
        set: function set(delegate) {
            this._delegate = delegate;
            this.reload();
        }
    }, {
        key: 'headerView',
        get: function get() {
            return this._headerView;
        },
        set: function set(view) {
            if (this._headerView) {
                this._headerView.removeFromSuperview();
            }

            this._headerView = view;
            this.contentView.addSubview(view);
        }
    }, {
        key: 'footerView',
        get: function get() {
            return this._footerView;
        },
        set: function set(view) {
            if (this._footerView) {
                this._footerView.removeFromSuperview();
            }

            this._footerView = view;
            this.contentView.addSubview(view);
        }
    }]);

    return TableView;
}(_ScrollView3.default);

exports.default = TableView;

},{"./ActivityIndicatorView":54,"./BasicAnimations":60,"./Button":62,"./ScrollView":87,"./TableViewCell":96,"lodash":53}],96:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

var _ImageView = require('./ImageView');

var _ImageView2 = _interopRequireDefault(_ImageView);

var _Label = require('./Label');

var _Label2 = _interopRequireDefault(_Label);

var _magic = require('./magic');

var _Point = require('./Point');

var _Point2 = _interopRequireDefault(_Point);

var _fonts = require('./fonts');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A view of a single item of a collection.
 *
 * By default, such a cell has:
 * - an image
 * - a title label
 * - a subtitle label
 * - an accessory view
 *
 * Note that table view cells don't have a content and background view.
 * Essentially just an implicit content view.
 */

var TableViewCell = function (_View) {
    _inherits(TableViewCell, _View);

    function TableViewCell(tableView, index) {
        _classCallCheck(this, TableViewCell);

        var _this = _possibleConstructorReturn(this, (TableViewCell.__proto__ || Object.getPrototypeOf(TableViewCell)).call(this));

        _this._tableView = tableView;
        _this._index = index;
        _this._itemCount = 0;

        _this._showsSeparatorLine = true;
        _this._separatorLineColor = '#cac9ce';

        _this._imageView = new _ImageView2.default();
        _this._imageView.id = 'image';
        _this.addSubview(_this._imageView);

        _this._titleLabel = new _Label2.default();
        _this._titleLabel.id = 'title';
        _this._titleLabel.font = (0, _fonts.SystemFontOfSize)(14);
        _this._titleLabel.textColor = '#333';
        _this.addSubview(_this._titleLabel);

        _this._subtitleLabel = new _Label2.default();
        _this._subtitleLabel.id = 'subtitle';
        _this._subtitleLabel.font = (0, _fonts.SystemFontOfSize)(10);
        _this._subtitleLabel.textColor = '#aaa';
        _this.addSubview(_this._subtitleLabel);

        _this._accessoryView = new _Label2.default();
        _this._accessoryView.id = 'accessory';
        _this.addSubview(_this._accessoryView);

        _this.insets.left = _this.insets.right = 20;
        _this.insets.top = _this.insets.bottom = 10;

        _this.userInteractionEnabled = true;
        _this.highlightsOnTouch = true;
        return _this;
    }

    _createClass(TableViewCell, [{
        key: 'tapped',
        value: function tapped(localPoint) {
            _get(TableViewCell.prototype.__proto__ || Object.getPrototypeOf(TableViewCell.prototype), 'tapped', this).call(this, localPoint);

            var delegate = this._tableView.delegate;
            if (_lodash2.default.isFunction(delegate.didSelectItemAtIndex)) {
                delegate.didSelectItemAtIndex(this._tableView, this._index, this);
            }
        }
    }, {
        key: 'longPressed',
        value: function longPressed(localPoint) {
            var _this2 = this;

            var delegate = this._tableView.delegate;

            // Can we reorder this cell at all?

            if (!_lodash2.default.isFunction(delegate.canMoveItem) || !delegate.canMoveItem(this._tableView, this._index, this._index)) {
                return;
            }

            _get(TableViewCell.prototype.__proto__ || Object.getPrototypeOf(TableViewCell.prototype), 'longPressed', this).call(this, localPoint);

            this.shadowBlur = 10;
            this.shadowOffsetY = 2;
            this.shadowColor = 'rgba(0,0,0,0.5)';
            this.clipsSubviews = false;
            this.backgroundColor = '#fff';

            this.draggable = true;
            this.highlighted = false;
            this.borderWidth = 1;
            this.borderColor = '#aaa';

            this._showsSeparatorLine = false;

            // Center the dragged table view cell about the touch point
            // in root space

            var rootPoint = this.convertLocalToRoot(_magic.PointZero);
            this.rootView.addSubview(this);

            this.position.copy(rootPoint);
            rootPoint = this.convertLocalToRoot(localPoint);

            this.addAnimation({
                name: 'moveIntoPlace',
                target: this.position,
                endValues: {
                    x: rootPoint.x - this.halfWidth,
                    y: rootPoint.y - this.halfHeight },
                duration: 200
            });

            this.addAnimation({
                name: 'scaleDownForVisibility',
                target: this.scale,
                endValues: { x: 0.7, y: 0.7 },
                duration: 200
            });

            var insertionIndicatorView = new _View3.default();
            insertionIndicatorView.backgroundColor = 'red';
            insertionIndicatorView.width = this._tableView.contentWidth;
            insertionIndicatorView.height = 4;
            insertionIndicatorView.userInteractionEnabled = false;
            insertionIndicatorView.id = 'cell insertion indicator';
            insertionIndicatorView.hidden = true;
            this._tableView.addSubview(insertionIndicatorView);

            var targetIndex = -1,
                lastAutoScrollAt;

            this.on('dragUpdated', function (atPoint) {

                // atPoint is in the space of this view's superview.

                // Figure out which cell the dragged cell is over
                // and show a red line where it /would/ be inserted if dropped.
                //
                // Re: targetIndex... Recall that this view being dragged around
                // is now in root view space and thus leaves a hole in the span
                // of indices of remaining cell views.

                var dragPointInTableContentView = _this2.superview.convertLocalToOther(atPoint, _this2._tableView.contentView);

                var _tableView$contentVie = _this2._tableView.contentView.hitTest(dragPointInTableContentView),
                    _tableView$contentVie2 = _slicedToArray(_tableView$contentVie, 2),
                    overCell = _tableView$contentVie2[0],
                    overCellPoint = _tableView$contentVie2[1];

                if (overCell && overCell instanceof TableViewCell) {
                    insertionIndicatorView.hidden = false;

                    // Where the indicator should be located in table content view space.

                    var indicatorY;

                    if (overCellPoint.y > overCell.halfHeight) {
                        indicatorY = overCell.bottom;

                        targetIndex = overCell._index < _this2._index ? overCell._index + 1 : overCell._index;
                    } else {
                        indicatorY = overCell.top;

                        targetIndex = overCell._index > _this2._index ? overCell._index - 1 : overCell._index;
                    }

                    insertionIndicatorView.top = _this2._tableView.contentView.convertLocalToSuperview(new _Point2.default(0, indicatorY)).y - insertionIndicatorView.halfHeight; // center it
                }

                // Auto-scroll the table if the user drags this table view cell near
                // the top or bottom of the table view.

                // NB: user must move pointer for repeat auto-scrollings.
                // In iOS, if the user leaves the pointer near the top/bottom, the auto-scroll
                // gets faster and doesn't require the user to move the pointer.

                var dragPointInTableView = _this2.superview.convertLocalToOther(atPoint, _this2._tableView),
                    autoScrollRegionHeight = Math.round(_this2._tableView.height * 0.10),
                    timeNow = +new Date(),
                    timeSinceLastAutoScroll = timeNow - lastAutoScrollAt,
                    autoScrollAtMostEvery = 500,
                    autoScrollAmount = _this2._tableView.halfHeight;

                if (dragPointInTableView.y <= autoScrollRegionHeight) {
                    if (!lastAutoScrollAt || timeSinceLastAutoScroll > autoScrollAtMostEvery) {
                        _this2._tableView.scrollDown(autoScrollAmount);
                        lastAutoScrollAt = timeNow;
                    }
                } else if (dragPointInTableView.y >= _this2._tableView.height - autoScrollRegionHeight) {
                    if (!lastAutoScrollAt || timeSinceLastAutoScroll > autoScrollAtMostEvery) {
                        _this2._tableView.scrollUp(autoScrollAmount);
                        lastAutoScrollAt = timeNow;
                    }
                }
            });

            this.on('dragEnded', function () {
                insertionIndicatorView.removeFromSuperview();

                if (_lodash2.default.isFunction(delegate.canMoveItem) && delegate.canMoveItem(_this2._tableView, _this2._index, targetIndex)) {

                    var dataSource = _this2._tableView.dataSource;
                    if (_lodash2.default.isFunction(dataSource.moveItem)) {
                        _this2._tableView.dataSource.moveItem(_this2._tableView, _this2._index, targetIndex);
                    }
                }

                _this2.removeFromSuperview();
                _this2._tableView.reload(false);

                targetIndex = -1;
            });
        }

        /**
         * Various layout configurations based on presence of item data.
         *
         * A
         *   ┏━━━━━━━━━━┓ ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ ┏━━━━━━━━━━┓
         *   ┃          ┃ ┃                              ┃ ┃          ┃
         *   ┃          ┃ ┃  title                       ┃ ┃          ┃
         *   ┃   image  ┃ ┃                              ┃ ┃  access- ┃
         *   ┃          ┃ ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ ┃    ory   ┃
         *   ┃          ┃ ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ ┃          ┃
         *   ┃          ┃ ┃  subtitle                    ┃ ┃          ┃
         *   ┗━━━━━━━━━━┛ ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ ┗━━━━━━━━━━┛
         *
         * B
         *   ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ ┏━━━━━━━━━━┓
         *   ┃                                           ┃ ┃          ┃
         *   ┃  title                                    ┃ ┃          ┃
         *   ┃                                           ┃ ┃  access- ┃
         *   ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ ┃    ory   ┃
         *   ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ ┃          ┃
         *   ┃  subtitle                                 ┃ ┃          ┃
         *   ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ ┗━━━━━━━━━━┛
         *
         * C
         *   ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
         *   ┃                                                        ┃
         *   ┃  title                                                 ┃
         *   ┃                                                        ┃
         *   ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
         *   ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
         *   ┃  subtitle                                              ┃
         *   ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
         *
         * D
         *   ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
         *   ┃                                                        ┃
         *   ┃                                                        ┃
         *   ┃  title                                                 ┃
         *   ┃                                                        ┃
         *   ┃                                                        ┃
         *   ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
         */

    }, {
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            var hMargin = this.insets.left; // consistency, that's all.

            var labelLeft;

            if (this._imageView.image) {
                // && this._imageView.image.complete) {
                var imageSize = this.contentHeight;
                this._imageView.frame.set(this.contentLeft, this.contentTop, imageSize, imageSize);
                labelLeft = this._imageView.right + hMargin;
            } else {
                labelLeft = hMargin;
            }

            var labelRight = this.contentRight;

            if (this._accessoryView) {
                if (!this._accessoryView.hidden) {
                    if (this._accessoryView.constructor.name === 'Label') {
                        this._accessoryView.sizeToFit().frame.set(this.contentRight - this._accessoryView.width, this.contentTop, this._accessoryView.width, this.contentHeight);
                    } else {
                        var accessoryViewHeight = Math.min(this.contentHeight, this._accessoryView.height);

                        this._accessoryView.frame.set(this.contentRight - this._accessoryView.width, this.contentCenterY - accessoryViewHeight / 2, this._accessoryView.width, accessoryViewHeight);
                    }

                    labelRight = this._accessoryView.left - hMargin;
                }
            }

            var titleHeight, subtitleHeight;

            var labelWidth = labelRight - labelLeft;

            if (!this._subtitleLabel.hidden && !!this._subtitleLabel.text) {
                titleHeight = Math.round(this.contentHeight * 0.7);
                subtitleHeight = Math.round(this.contentHeight * 0.3);

                this._subtitleLabel.frame.set(labelLeft, this.contentTop + titleHeight, labelWidth, subtitleHeight);
            } else {
                titleHeight = this.contentHeight;
            }

            this._titleLabel.frame.set(labelLeft, this.contentTop, labelWidth, titleHeight);
        }
    }, {
        key: 'postDraw',
        value: function postDraw(context) {
            if (this._showsSeparatorLine) {
                var titleLeft = this._titleLabel.left,
                    lineY = this.height - 1;

                context.beginPath();
                context.moveTo(titleLeft, lineY);
                context.lineTo(this.width, lineY);
                context.closePath();

                context.lineWidth = 1;
                context.strokeStyle = this._separatorLineColor;
                context.stroke();
            }

            _get(TableViewCell.prototype.__proto__ || Object.getPrototypeOf(TableViewCell.prototype), 'postDraw', this).call(this, context);
        }
    }, {
        key: 'image',
        get: function get() {
            return this._imageView.image;
        },
        set: function set(image) {
            this._imageView.image = image;
            //this._imageView.hidden = !!image
            this.needsLayout = true;
        }
    }, {
        key: 'title',
        get: function get() {
            return this._titleLabel.text;
        },
        set: function set(title) {
            this._titleLabel.text = title;
        }
    }, {
        key: 'subtitle',
        get: function get() {
            return this._subtitleLabel.text;
        },
        set: function set(subtitle) {
            this._subtitleLabel.text = subtitle;
            this.needsLayout = true;
        }
    }, {
        key: 'accessoryType',
        get: function get() {
            if (this._accessoryView instanceof _Label2.default) {
                return this._accessoryView.text;
            }

            return null;
        },
        set: function set(type) {
            if (this._accessoryView instanceof _Label2.default && _lodash2.default.isString(type)) {
                this._accessoryView.text = type;
                this.needsLayout = true;
            }
        }
    }]);

    return TableViewCell;
}(_View3.default);

exports.default = TableViewCell;


TableViewCell.AccessoryTypeNone = '';
TableViewCell.AccessoryTypeCheck = '✓';
TableViewCell.AccessoryTypeDisclosureIndicator = '▶';

},{"./ImageView":69,"./Label":75,"./Point":85,"./View":101,"./fonts":103,"./magic":105,"lodash":53}],97:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _TableViewCell = require('./TableViewCell');

var _TableViewCell2 = _interopRequireDefault(_TableViewCell);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provider of data for a TableView.
 *
 * You don't strictly need to use a subclass of this of course.
 */

var TableViewDataSource = function () {
  function TableViewDataSource() {
    _classCallCheck(this, TableViewDataSource);
  }

  _createClass(TableViewDataSource, [{
    key: 'load',


    /**
     * Load items. When done, calls `complete`.
     */

    value: function load(tableView, complete) {
      if (_lodash2.default.isFunction(complete)) {
        complete();
      }
    }

    /**
     * Returns the number of items in the collection.
     */

  }, {
    key: 'numberOfItems',
    value: function numberOfItems() /*tableView*/{
      return 0;
    }

    /**
     * Creates, configures, and returns a table view cell with data for the
     * item at the given index.
     */

  }, {
    key: 'cellForItemAtIndex',
    value: function cellForItemAtIndex(tableView, index) {
      var cell = new _TableViewCell2.default(tableView, index);
      cell.title = 'No data';
      cell.subtitle = 'No data';
      cell.image = null;
      cell.accessoryType = _TableViewCell2.default.AccessoryTypeNone;
      return cell;
    }

    /**
     * Move the item at `fromIndex` to `toIndex`, shifting all items
     * at and after `toIndex` back by 1.
     *
     * Optional; if not found on data source, item reordering is disabled.
     */

  }, {
    key: 'moveItem',
    value: function moveItem() /*tableView, fromIndex, toIndex*/{}

    /**
     * Remove the item at `index`
     *
     * Optional; if not found on data source, item removal is disabled.
     */

  }, {
    key: 'removeItemAtIndex',
    value: function removeItemAtIndex() /*tableView, index*/{}
  }]);

  return TableViewDataSource;
}();

exports.default = TableViewDataSource;

},{"./TableViewCell":96,"lodash":53}],98:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _Label2 = require('./Label');

var _Label3 = _interopRequireDefault(_Label2);

var _magic = require('./magic');

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _fonts = require('./fonts');

var _Point = require('./Point');

var _Point2 = _interopRequireDefault(_Point);

var _core = require('./core');

var _KeyboardView = require('./KeyboardView');

var KeyboardView = _interopRequireWildcard(_KeyboardView);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * An editable single line of text.
 *
 * This is of course a bare bones implementation. A real text edit control is extremely
 * involved. Here are but a few of the things not implemented here:
 *
 * - selections
 * - copy and paste
 * - insertion mode
 * - right-to-left layout
 *
 * What is implemented is:
 * - moving the cursor backwards/forwards
 * - inserting text at the cursor position
 * - backwards/forwards deletion
 * - being notified when enter is pressed (i.e. 'act on this info please')
 * - maxLength
 * - secure mode in which dots are shown instead of actual text (i.e. for passwords)
 */

var TextEditView = function (_Label) {
    _inherits(TextEditView, _Label);

    function TextEditView(text) {
        _classCallCheck(this, TextEditView);

        var _this = _possibleConstructorReturn(this, (TextEditView.__proto__ || Object.getPrototypeOf(TextEditView)).call(this, text));

        _this._cursorPosition = 0;
        _this._cursorColor = '#aaa';
        _this._cursorOn = false;

        _this._maxLength = 0;
        _this._secureMode = false;
        _this._dotColor = '#333';

        _this.backgroundColor = '#fff';
        _this.borderWidth = 1;
        _this.borderColor = '#aaa';
        _this.cornerRadius = 5;
        _this.textAlign = 'left';
        _this.insets.setAll(10);

        _this.userInteractionEnabled = true; // labels are static
        _this.tailTruncation = null; // don't add ellipsis, just clip to content frame

        _this.placeholderLabel = new _Label3.default('');
        _this.placeholderLabel.id = 'placeholder';
        _this.placeholderLabel.textColor = '#aaa';
        _this.placeholderLabel.backgroundColor = _magic.transparent;
        _this.addSubview(_this.placeholderLabel);
        _this.on('textChanged', _this._maybeShowPlaceholder.bind(_this));
        _this.on('didBecomeFirstResponder', _this._maybeShowPlaceholder.bind(_this));
        _this.on('didResignFirstResponder', _this._maybeShowPlaceholder.bind(_this));

        _this.stylizeAsNormal();
        return _this;
    }

    _createClass(TextEditView, [{
        key: '_maybeShowPlaceholder',
        value: function _maybeShowPlaceholder() {
            var hasText = this.text && this.text.length > 0;
            this.placeholderLabel.hidden = hasText;
        }
    }, {
        key: 'showSoftKeyboardButton',
        value: function showSoftKeyboardButton() {
            var btnSize = _magic.FingerSizePoints;
            this.insets.set(10, 10, 10, btnSize - 5);

            this.hideSoftKeyboardButton();

            this.softKeyboardButton = new _Button2.default('⌨');
            this.softKeyboardButton.font = (0, _fonts.SystemFontOfSize)(18);
            this.softKeyboardButton.textColor = this.textColor;
            this.softKeyboardButton.backgroundColor = this.backgroundColor;
            this.softKeyboardButton.borderWidth = 0;
            this.softKeyboardButton.shadowBlur = 0;
            this.addSubview(this.softKeyboardButton);
            this.softKeyboardButton.on('tap', this.toggleSoftKeyboard.bind(this));
        }
    }, {
        key: 'hideSoftKeyboardButton',
        value: function hideSoftKeyboardButton() {
            if (this.softKeyboardButton) {
                this.softKeyboardButton.removeFromSuperview();
            }
        }
    }, {
        key: 'toggleSoftKeyboard',
        value: function toggleSoftKeyboard() {
            var kbd = KeyboardView.instance();
            if (kbd) {
                kbd.toggle();
            }
        }
    }, {
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            _get(TextEditView.prototype.__proto__ || Object.getPrototypeOf(TextEditView.prototype), 'layoutSubviews', this).call(this);

            this.placeholderLabel.frame = this.contentFrame;

            if (this.softKeyboardButton) {
                var btnSize = _magic.FingerSizePoints;
                this.softKeyboardButton.frame.set(this.contentRight, this.contentCenterY - btnSize / 2, btnSize, btnSize);
            }
        }
    }, {
        key: 'stylizeAsFirstResponder',
        value: function stylizeAsFirstResponder() {
            this.borderWidth = 2;
            this.borderColor = this.cursorColor = '#0078fd';
        }
    }, {
        key: 'stylizeAsNormal',
        value: function stylizeAsNormal() {
            this.borderWidth = 1;
            this.borderColor = this.cursorColor = '#888';
        }
    }, {
        key: 'didBecomeFirstResponder',
        value: function didBecomeFirstResponder() {
            _get(TextEditView.prototype.__proto__ || Object.getPrototypeOf(TextEditView.prototype), 'didBecomeFirstResponder', this).call(this);
            this.stylizeAsFirstResponder();
            this.blinkCursor();
            this.maybeShowKeyboard();
        }
    }, {
        key: 'blinkCursor',
        value: function blinkCursor() {
            var _this2 = this;

            this.stopBlinkingCursor();

            // Blink the cursor. Note that we do not simply this.needsDisplay = true here but draw with the
            // context atop the root view which is a bit a million times more efficient.

            this.blinkInterval = setInterval(function () {
                _this2._cursorOn = !_this2._cursorOn;

                if (_this2.isFirstResponder() && !_this2.hidden) {
                    _this2.drawCursor((0, _core.getContext)(), _this2.convertLocalToRoot(new _Point2.default(_this2.cursorX, _this2.contentTop)));
                }
            }, 500);
        }
    }, {
        key: 'stopBlinkingCursor',
        value: function stopBlinkingCursor() {
            clearInterval(this.blinkInterval);
            this._cursorOn = false;
            this.needsDisplay = true; // Ok since not repeatedly.
        }
    }, {
        key: 'maybeShowKeyboard',
        value: function maybeShowKeyboard() {
            if ((0, _magic.isMobile)()) {
                var kbd = KeyboardView.instance();
                if (kbd) {
                    kbd.show();
                }
            } else {
                this.showSoftKeyboardButton();
            }
        }
    }, {
        key: 'willResignFirstResponder',
        value: function willResignFirstResponder(nextFirstResponder) {
            _get(TextEditView.prototype.__proto__ || Object.getPrototypeOf(TextEditView.prototype), 'willResignFirstResponder', this).call(this);
            this.stylizeAsNormal();
            this.hideSoftKeyboardButton();
            this.stopBlinkingCursor();

            if (!(nextFirstResponder instanceof TextEditView)) {
                var kbd = KeyboardView.instance();
                if (kbd) kbd.hide();
            }
        }
    }, {
        key: 'tapped',
        value: function tapped() {
            _get(TextEditView.prototype.__proto__ || Object.getPrototypeOf(TextEditView.prototype), 'tapped', this).call(this);

            if (!this.isFirstResponder()) {
                this.becomeFirstResponder();
            } else {
                this.maybeShowKeyboard();
            }
        }
    }, {
        key: 'draw',
        value: function draw(context) {
            _get(TextEditView.prototype.__proto__ || Object.getPrototypeOf(TextEditView.prototype), 'draw', this).call(this, context);

            if (!this._secureMode) {
                var textBeforeCursor = this.text.substring(0, this._cursorPosition),
                    textBeforeCursorWidth = context.measureText(textBeforeCursor).width;

                this.cursorX = Math.round(this.textLeft(context) + textBeforeCursorWidth);
            } else {
                var dotRadius = this.contentHeight / 4;

                var x = this.textLeft(context) + dotRadius,
                    y = this.contentCenterY;

                context.beginPath();
                for (var i = 0, N = this.text.length; i < N; ++i, x += 2 * dotRadius + 2) {
                    context.arc(x, y, dotRadius, 0, 2 * Math.PI, false);
                }
                context.closePath();

                context.fillStyle = this.dotColor;
                context.fill();

                this.cursorX = Math.round(x - dotRadius);
            }

            if (this._cursorOn) {
                this.drawCursor(context, { x: this.cursorX, y: this.contentTop });
            }
        }
    }, {
        key: 'drawCursor',
        value: function drawCursor(context, pt) {
            context.beginPath();
            context.moveTo(pt.x, pt.y);
            context.lineTo(pt.x, pt.y + this.contentHeight);
            context.closePath();

            context.strokeStyle = this._cursorOn && this._cursorColor || this.backgroundColor;
            context.lineWidth = 1;
            context.stroke();
        }
    }, {
        key: 'keyPressed',
        value: function keyPressed(key, ctrlKey, shiftKey, metaKey, altKey) {
            // Non-modifier key = type text into text box

            if (!ctrlKey && !metaKey && !altKey && key.length === 1) {
                var text = this.text,
                    cursorPosition = this.cursorPosition,
                    maxLength = this._maxLength;

                if (maxLength <= 0 || text.length + 1 <= maxLength) {
                    if (cursorPosition === text.length) {
                        this.text = text + key;
                    } else {
                        this.text = '' + text.slice(0, cursorPosition) + key + text.slice(cursorPosition);
                    }

                    this.cursorPosition = cursorPosition + 1;
                }

                return;
            }

            if (key === 'Shift' || key === 'Meta' || key === 'Control' || key === 'Alt') {

                return;
            }

            var bindingKey = (ctrlKey && 'ctrl+' || '') + (shiftKey && 'shift+' || '') + (metaKey && 'meta+' || '') + (altKey && 'alt+' || '') + key;

            if (this._debugMode) {
                this.log('keyPressed', bindingKey);
            }

            var binding = TextEditView.keyBindings[bindingKey];
            if (_lodash2.default.isFunction(binding)) {
                binding.call(this);
            } else {
                _get(TextEditView.prototype.__proto__ || Object.getPrototypeOf(TextEditView.prototype), 'keyPressed', this).call(this, key, ctrlKey, shiftKey, metaKey, altKey);
            }
        }
    }, {
        key: 'enter',
        value: function enter() {
            this.emit('enter');
        }
    }, {
        key: 'clear',
        value: function clear() {
            this.text = '';
            this.cursorPosition = 0;
        }
    }, {
        key: 'moveBack',
        value: function moveBack() {
            this.cursorPosition = Math.max(0, this.cursorPosition - 1);
        }
    }, {
        key: 'moveBackWord',
        value: function moveBackWord() {
            var text = this.text;

            var index = Math.max(0, this.cursorPosition - 1);

            while (index >= 0 && text.charAt(index).match(/\s/)) {
                index--;
            }

            while (index >= 0 && !text.charAt(index).match(/\s/)) {
                index--;
            }

            this.cursorPosition = index + 1;
        }
    }, {
        key: 'moveToStart',
        value: function moveToStart() {
            this.cursorPosition = 0;
        }
    }, {
        key: 'moveForward',
        value: function moveForward() {
            this.cursorPosition = Math.min(this.text.length, this.cursorPosition + 1);
        }
    }, {
        key: 'moveForwardWord',
        value: function moveForwardWord() {
            var text = this.text;

            for (var index = Math.min(text.length - 1, this.cursorPosition + 1); index < text.length; ++index) {

                if (text.charAt(index).match(/\s/)) {
                    this.cursorPosition = index;
                    return;
                }
            }

            this.cursorPosition = text.length;
        }
    }, {
        key: 'moveToEnd',
        value: function moveToEnd() {
            this.cursorPosition = this.text.length;
        }
    }, {
        key: 'deleteForward',
        value: function deleteForward() {
            var text = this.text,
                cursorPosition = this.cursorPosition;

            this.text = '' + text.slice(0, cursorPosition) + text.slice(cursorPosition + 1);
        }
    }, {
        key: 'deleteForwardWord',
        value: function deleteForwardWord() {
            var text = this.text;

            for (var index = Math.min(text.length - 1, this.cursorPosition + 1); index < text.length; ++index) {

                if (text.charAt(index).match(/\s/)) {
                    this.text = this.text.slice(this.cursorPosition, index - this.cursorPosition);

                    return;
                }
            }
        }
    }, {
        key: 'deleteForwardToEnd',
        value: function deleteForwardToEnd() {
            this.text = this.text.slice(0, this.cursorPosition);
        }
    }, {
        key: 'deleteBackward',
        value: function deleteBackward() {
            var text = this.text,
                cursorPosition = this.cursorPosition;

            this.text = '' + text.slice(0, cursorPosition - 1) + text.slice(cursorPosition);
            this.cursorPosition = Math.max(0, cursorPosition - 1);
        }
    }, {
        key: 'deleteBackwardToStart',
        value: function deleteBackwardToStart() {
            this.text = this.text.slice(this.cursorPosition + 1);
        }
    }, {
        key: 'deleteBackwardWord',
        value: function deleteBackwardWord() {
            var text = this.text;

            for (var index = Math.max(0, this.cursorPosition - 1); index >= 0; --index) {
                if (text.charAt(index).match(/\s/)) {
                    this.cursorPosition = index;
                    this.text = text.slice(0, index);

                    return;
                }
            }
        }
    }, {
        key: 'focusNext',
        value: function focusNext() {
            var _this3 = this;

            var thisIndex = _lodash2.default.findIndex(this.superview.subviews, function (subview) {
                return subview === _this3;
            }),


            // TODO this should be a recursive search down into subviews of subviews etc
            targetTextEdit = _lodash2.default.find(this.superview.subviews, function (subview, index) {
                return index > thisIndex && subview.canBecomeFirstResponder();
            });

            if (targetTextEdit) {
                targetTextEdit.becomeFirstResponder();
            }
        }
    }, {
        key: 'focusPrevious',
        value: function focusPrevious() {
            var _this4 = this;

            var thisIndex = _lodash2.default.findIndex(this.superview.subviews, function (subview) {
                return subview === _this4;
            }),
                targetTextEdit = _lodash2.default.find(this.superview.subviews, function (subview, index) {
                return index < thisIndex && subview.canBecomeFirstResponder();
            });

            if (targetTextEdit) {
                targetTextEdit.becomeFirstResponder();
            }
        }
    }, {
        key: 'textLeft',
        value: function textLeft(context) {
            context.save();
            context.font = this.font;

            var textBeforeCursor = this.text.substring(0, this.cursorPosition),
                textBeforeCursorWidth = context.measureText(textBeforeCursor).width;

            context.restore();

            // The cursor should be visible at all times.

            if (this.contentLeft + textBeforeCursorWidth > this.contentRight) {
                return this.contentRight - textBeforeCursorWidth;
            }

            return this.contentLeft;
        }
    }, {
        key: 'placeholder',
        get: function get() {
            return this.placeholderLabel.text;
        },
        set: function set(text) {
            this.placeholderLabel.text = (text || '').trim();
            this._maybeShowPlaceholder();
        }
    }, {
        key: 'maxLength',
        get: function get() {
            return this._maxLength;
        },
        set: function set(len) {
            len = parseInt(len, 10);

            if (_lodash2.default.isFinite(len) && len >= 0 && this._maxLength !== len) {
                if (len < this._maxLength) {
                    this.cursorPosition = Math.min(len, this.cursorPosition);
                    this.text = this.text.substr(0, len);
                }

                this._maxLength = len;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'cursorPosition',
        get: function get() {
            return this._cursorPosition;
        },
        set: function set(pos) {
            var newPos = Math.max(0, Math.min(this.text.length, pos));

            if (newPos !== this._cursorPosition) {
                this._cursorPosition = newPos;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'cursorColor',
        get: function get() {
            return this._cursorColor;
        },
        set: function set(color) {
            if (color !== this._cursorColor) {
                this._cursorColor = color;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'secureMode',
        get: function get() {
            return this._secureMode;
        },
        set: function set(onOff) {
            if (this._secureMode != onOff) {
                this.textColor = this.backgroundColor;
                this._secureMode = onOff;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'dotColor',
        get: function get() {
            return this._dotColor;
        },
        set: function set(c) {
            this._dotColor = c;
            this.needsDisplay = true;
        }
    }]);

    return TextEditView;
}(_Label3.default);

/**
 * Key bindings for TextEditView.
 *
 * Keys in this object use modifiers in the order: ctrl, meta, shift, alt
 * then the name of the key.  E.g. "ctrl+shift+A" not "shift+ctrl+A"
 *
 * The keyname for keys combined with modifiers must be uppercase (e.g. ctrl+A)
 */

exports.default = TextEditView;
TextEditView.keyBindings = {
    // Custom
    'Enter': TextEditView.prototype.enter,
    'Escape': TextEditView.prototype.resignFirstResponder,

    // Common
    'Tab': TextEditView.prototype.focusNext,
    'shift+Tab': TextEditView.prototype.focusPrevious,
    'Backspace': TextEditView.prototype.deleteBackward,
    'Delete': TextEditView.prototype.deleteForward,
    'ArrowLeft': TextEditView.prototype.moveBack,
    'ArrowRight': TextEditView.prototype.moveForward,
    'Home': TextEditView.prototype.moveToStart,
    'End': TextEditView.prototype.moveToEnd,

    // Emacs style
    'ctrl+B': TextEditView.prototype.moveBack,
    'ctrl+F': TextEditView.prototype.moveForward,
    'ctrl+A': TextEditView.prototype.moveToStart,
    'ctrl+E': TextEditView.prototype.moveToEnd,
    'ctrl+D': TextEditView.prototype.deleteForward,
    'ctrl+H': TextEditView.prototype.deleteBackward,
    'ctrl+K': TextEditView.prototype.deleteForwardToEnd,

    // Mac OS X style
    'meta+ArrowLeft': TextEditView.prototype.moveToStart,
    'meta+ArrowRight': TextEditView.prototype.moveToEnd,
    'alt+Backspace': TextEditView.prototype.deleteBackwardWord,
    'meta+Backspace': TextEditView.prototype.deleteBackwardToStart,
    'alt+Delete': TextEditView.prototype.deleteForwardWord,
    'alt+ArrowLeft': TextEditView.prototype.moveBackWord,
    'alt+ArrowRight': TextEditView.prototype.moveForwardWord
};

},{"./Button":62,"./KeyboardView":74,"./Label":75,"./Point":85,"./core":102,"./fonts":103,"./magic":105,"lodash":53}],99:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

var _wordWrap = require('./wordWrap');

var _wordWrap2 = _interopRequireDefault(_wordWrap);

var _core = require('./core');

var _Point = require('./Point');

var _Point2 = _interopRequireDefault(_Point);

var _magic = require('./magic');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A view of word-wrapped, multiline, read-only text.
 *
 * Word-wrapping is affected by:
 * - text
 * - line height
 * - insets
 *
 * Set `.text` and `.lineHeight` to alter each.
 *
 * For scrollable text, see `ScrollableTextView`.
 *
 * Warning: this holds 2 copies of the text, one in original string
 * form and another in computed lines. You may set .text to null after
 * layout is performed (see `didLayoutSubviews`) if you are certain that
 * no further layout will be performed.
 *
 * The word wrapper assumes left-to-right flow and thus right alignment
 * may not look as nice.
 */

var TextView = function (_View) {
    _inherits(TextView, _View);

    function TextView(text) {
        var lineHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        _classCallCheck(this, TextView);

        if (!_lodash2.default.isString(text)) {
            throw new Error('expected text');
        }

        var _this = _possibleConstructorReturn(this, (TextView.__proto__ || Object.getPrototypeOf(TextView)).call(this));

        _this._text = text;
        _this._lineHeight = lineHeight;
        _this._lines = null;

        _this.textColor = '#333';
        _this.backgroundColor = _magic.transparent;
        return _this;
    }

    _createClass(TextView, [{
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            var context = (0, _core.getContext)();

            context.save();
            context.font = this.font;

            if (this._lineHeight <= 0) {
                this._lineHeight = Math.round(context.measureText('M').width * 1.7);
            }

            var maxWidth = this.contentWidth;
            if (maxWidth > 0) {
                this._lines = (0, _wordWrap2.default)(this.text, this.contentTop, maxWidth, this.lineHeight);
            } else {
                this._lines = [];
            }

            context.restore();
        }
    }, {
        key: 'draw',
        value: function draw(context) {
            _get(TextView.prototype.__proto__ || Object.getPrototypeOf(TextView.prototype), 'draw', this).call(this, context);

            var lines = this._lines;
            if (_lodash2.default.isEmpty(lines)) {
                return;
            }

            // Render lines that are visible.

            var point = new _Point2.default(),
                lineCount = lines.length,
                lineHeight = this.lineHeight;

            var startIndex = -1,
                endIndex = -1,
                i;

            for (i = 0; i < lineCount; ++i) {
                var line = lines[i];

                point.y = line.top + lineHeight;
                var bottomVisible = this.isPointVisibleToRootView(point);
                if (bottomVisible) {
                    startIndex = i;
                    break;
                }
            }

            if (startIndex === -1) {
                return;
            }

            for (i = lineCount - 1; i >= startIndex; --i) {
                var _line = lines[i];

                point.y = _line.top;
                var topVisible = this.isPointVisibleToRootView(point);
                if (topVisible) {
                    endIndex = i;
                    break;
                }
            }

            context.fillStyle = this.textColor;
            context.textAlign = this.textAlign;
            context.textBaseline = 'top';

            var leftAlign = this.textAlign === undefined || this.textAlign === 'left',
                centerAlign = this.textAlign === 'center',
                x = leftAlign ? this.contentLeft : centerAlign ? this.contentCenterX : this.contentRight;

            for (i = startIndex; i <= endIndex; ++i) {
                var _line2 = lines[i];
                context.fillText(this._text.substring(_line2.start, _line2.end), x, _line2.top);
            }
        }
    }, {
        key: 'text',
        get: function get() {
            return this._text;
        },
        set: function set(text) {
            this._text = text;
            this.needsLayout = true;
        }
    }, {
        key: 'lineHeight',
        get: function get() {
            return this._lineHeight;
        },
        set: function set(lineHeight) {
            this._lineHeight = Math.round(Math.max(0, lineHeight));
            this.needsLayout = true;
        }
    }]);

    return TextView;
}(_View3.default);

exports.default = TextView;

},{"./Point":85,"./View":101,"./core":102,"./magic":105,"./wordWrap":108,"lodash":53}],100:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _ModifierKeyButton2 = require('./ModifierKeyButton');

var _ModifierKeyButton3 = _interopRequireDefault(_ModifierKeyButton2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A keyboard key that can be toggled between
 * selected and unselected states by tapping it.
 *
 * Events:
 * - selectedChanged(isSelected)
 */

var ToggleKeyButton = function (_ModifierKeyButton) {
    _inherits(ToggleKeyButton, _ModifierKeyButton);

    function ToggleKeyButton(deselectedText, selectedText) {
        _classCallCheck(this, ToggleKeyButton);

        var _this = _possibleConstructorReturn(this, (ToggleKeyButton.__proto__ || Object.getPrototypeOf(ToggleKeyButton)).call(this, deselectedText));

        _this.deselectedText = deselectedText;
        _this.selectedText = selectedText;
        return _this;
    }

    _createClass(ToggleKeyButton, [{
        key: 'tapped',
        value: function tapped() {
            this.selected = !this.selected;
            _get(ToggleKeyButton.prototype.__proto__ || Object.getPrototypeOf(ToggleKeyButton.prototype), 'tapped', this).call(this);
        }
    }, {
        key: 'selected',
        get: function get() {
            return this._selected;
        },
        set: function set(selected) {
            if (selected) {
                this.invertColors();
                this.text = this.selectedText;
            } else {
                this.restoreColors();
                this.text = this.deselectedText;
            }

            if (this._selected != selected) {
                this._selected = selected;
                this.emit('selectedChanged', selected);
            }
        }
    }]);

    return ToggleKeyButton;
}(_ModifierKeyButton3.default);

exports.default = ToggleKeyButton;

},{"./ModifierKeyButton":78}],101:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () {
    function sliceIterator(arr, i) {
        var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);if (i && _arr.length === i) break;
            }
        } catch (err) {
            _d = true;_e = err;
        } finally {
            try {
                if (!_n && _i["return"]) _i["return"]();
            } finally {
                if (_d) throw _e;
            }
        }return _arr;
    }return function (arr, i) {
        if (Array.isArray(arr)) {
            return arr;
        } else if (Symbol.iterator in Object(arr)) {
            return sliceIterator(arr, i);
        } else {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
    };
}();

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _Frame = require('./Frame');

var _Frame2 = _interopRequireDefault(_Frame);

var _EdgeInsets = require('./EdgeInsets');

var _EdgeInsets2 = _interopRequireDefault(_EdgeInsets);

var _fonts = require('./fonts');

var _Point = require('./Point');

var _Point2 = _interopRequireDefault(_Point);

var _magic = require('./magic');

var _core = require('./core');

var _Animation = require('./Animation');

var _Animation2 = _interopRequireDefault(_Animation);

var _util = require('./util');

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * A view is a graphical representation of some data bound by a 2D rectangle called its "frame".
 *
 * Each view has its own coordinate system with its origin in the top-left of its frame.
 *
 * Views may have many subviews but at most one superview.
 *
 * Views are positioned in the coordinate system of their superview.  The top-most or
 * "root" view has no superview or rather an implicit superview of the canvas on which
 * all of these views are rendered.
 *
 * Each view may have its own scale, angle (radians), and alpha (transparency).
 * Scaling and rotation are performed about the view's center, not it's top-left origin.
 *
 * Views have customizable appearance properties such as background color, shadowing,
 * borders, etc.
 *
 * Views support touch (or mouse-simulated touch) events.
 *
 * Views may be hidden which means they are not rendered nor respond to user interaction.
 * Any subview (or sub-subview, etc.) of a hidden view is implicitly hidden as well.
 *
 * Views support drag and drop (`draggable`, `acceptsDroppedViews`, etc.)
 *
 * View properties can be animated however you'd like. See `addAnimation`.
 *
 * It is possible to manually control a view via `needsUpdate` and `update`.
 *
 * Views may have shadows. If clipping is enabled (`clipsSubviews`), shadows will be clipped away.
 *
 * Typically, a view will add subviews in its constructor then lay them out in
 * `layoutSubviews` using positioning and alignment helper methods such as
 * `alignTop`, `moveToCenterMiddle`, etc.  The `move` methods are named based on
 * horizontal position followed by vertical position where horizontal positions are
 * one of `left`, `center`, or `right` and vertical positions are one of `top`,
 * `middle`, or `bottom`.  Thus, centering in the superview is handled in
 * `moveToCenterMiddle`.
 *
 * Layout is triggered (`layoutSubviews`):
 * - on the superview when a subview is added; and
 * - on the subview when it is added; and
 * - on the superview when a subview is removed; and
 * - on a view whose size has changed; and
 * - on a view whose insets have changed; and
 * - on a view whose font has changed.
 *
 * Layout is not triggered on changes to frame position, scale, alpha, angle, clipping,
 * or appearance with the exception of font.  A redraw is triggered with changes in appearance.
 * Redraws are always done via the run loop (see `needsDisplay`) which allows us to only
 * redraw when views having active animations, require manual updates, need layout, or have
 * changes in appearance. That is, we do not update, layout, animate, and redraw every view
 * every animation frame to reduce energy costs.
 *
 * Layout is triggered on the superview of a view when its `scale` changes and
 * `._superviewNeedsLayoutOnScaling` is true. Sometimes scale changes are temporary and might
 * not need a relayout in the superview; thus, it's an option.
 *
 * Layout is triggered on the superview of a view when its `angle` changes and
 * `._superviewNeedsLayoutOnRotation` is true. Sometimes angle changes are temporary and might
 * not need a relayout in the superview; thus, it's an option.
 *
 * Note that setting a subview's frame inside layoutSubviews would trigger infinite relayout
 * but that's not the case since layout occurs on *changes* to size, etc. not just setting
 * values thereupon.
 *
 * A single view in the hierarchy can become the "first responder" which is the view that has
 * "focus" and receives keyboard events.  Touch/mouse events are always passed to the hit-test
 * view or its first user-interaction-enabled superview.  If a view cannot become first responder,
 * its superviews are checked up to the root view.
 *
 * Events:
 * - changedVisibility(isHidden)
 * - subviewAdded(subview)
 * - subviewRemoved(subview)
 * - removedFromSuperview()
 * - didLayoutSubviews()
 * - tap(localPoint, tapCount)
 * - touchStart(localPoint)
 * - touchMove(localPoint)
 * - touchEnd(localPoint)
 * - touchCancel()
 * - longPressed(localPoint)
 * - dragStarted(superviewPoint)
 * - dragUpdated(superviewPoint)
 * - dragEnded(superviewPoint)
 * - dropAccepted(toOtherView)
 * - dropRejected(byOtherView)
 * - dropMightBeReceived(view, localPoint)
 * - dropWillNotBeReceived(view)
 * - dropReceived(droppedView, localPoint)
 * - didBecomeFirstResponder()
 * - didResignFirstResponder()
 * - keyPressed(key, ctrlKey, shiftKey, metaKey, altKey)
 * - animationAdded(animation)
 * - animationStarted(animation)
 * - animationCompleted(animation)
 */

var View = function (_EventEmitter) {
    _inherits(View, _EventEmitter);

    function View() {
        _classCallCheck(this, View);

        var _this = _possibleConstructorReturn(this, (View.__proto__ || Object.getPrototypeOf(View)).call(this));

        _this.id = _lodash2.default.uniqueId(_this.constructor.name);

        _this.superview = null;
        _this.subviews = [];

        // When this view is repositioned, redraw;
        // When this view is resized, relayout.;

        _this._frame = new _Frame2.default();

        _this._frame.origin.on('valueChanged', function () {
            _this.needsDisplay = true;
        });

        _this._frame.size.on('valueChanged', function () {
            _this.needsLayout = true;

            if (_this.superview) {
                _this.superview.needsLayout = true;
            }
        });

        // Insets are like "padding" if you are familiar with CSS.

        _this._insets = new _EdgeInsets2.default();
        _this._insets.on('valueChanged', function () {
            _this.needsLayout = true;
        });

        _this.needsLayout = true;
        _this._needsDisplay = false;

        _this._scale = new _Point2.default(1, 1);
        _this._superviewNeedsLayoutOnScaling = false;
        _this._scale.on('valueChanged', function () {
            if (_this.superview && _this._superviewNeedsLayoutOnScaling) {
                _this.superview.needsLayout = true;
            }

            _this.needsLayout = true;
        });

        _this._alpha = 1.0;
        _this._angle = 0.0;
        _this._superviewNeedsLayoutOnRotation = false;
        _this._drawMode = null;

        _this._hidden = false;
        _this._userInteractionEnabled = true;
        _this._clipsSubviews = true;

        _this._backgroundColor = null; // clears frame to transparent

        _this._font = (0, _fonts.SystemFontOfSize)(12);

        _this._borderColor = '#333';
        _this._borderWidth = 0;
        _this._cornerRadius = 0;

        _this._highlightsOnTouch = false;
        _this._highlightColor = 'rgba(0,0,0,0.2)';
        _this._highlighted = false;

        _this._shadowColor = null;
        _this._shadowBlur = 0;
        _this._shadowOffsetX = 0;
        _this._shadowOffsetY = 0;

        _this._animations = null;

        _this._touchCanceled = false;
        _this._timeOfLastTap = null;
        _this._tapCount = null;

        // As most views are not draggable, the drag-slots
        // are created on demand when enabling dragging.

        _this._draggable = false;
        _this._acceptsDroppedViews = false;
        return _this;
    }

    _createClass(View, [{
        key: 'hide',
        value: function hide() {
            this.hidden = true;
        }
    }, {
        key: 'show',
        value: function show() {
            this.hidden = false;
        }

        /**
         * The superviews might be off-screen but as long as they are all not `.hidden`
         * this returns true.
         */

    }, {
        key: 'allSuperviewsVisible',
        value: function allSuperviewsVisible() {
            var curr = this;

            while (curr) {
                if (curr.hidden) {
                    return false;
                }

                curr = curr.superview;
            }

            return true;
        }

        /**
         * Called when a view becomes unhidden or is added to a view that is visible.
         *
         * Notifies subviews that themselves are not hidden that they have now become visible.
         */

    }, {
        key: 'didBecomeVisible',
        value: function didBecomeVisible() {
            _lodash2.default.each(this.subviews, function (subview) {
                if (!subview.hidden) {
                    subview.didBecomeVisible();
                }
            });

            this.emit('changedVisibility', true);
        }

        /**
         * Called when a view will be hidden, either by directly setting `.hidden`
         * on this view or on one of its superviews.
         */

    }, {
        key: 'didBecomeHidden',
        value: function didBecomeHidden() {
            _lodash2.default.each(this.subviews, function (subview) {
                return subview.didBecomeHidden();
            });

            this.emit('changedVisibility', false);
        }

        /**
         * Returns true if the given local point is visible in the root view
         * of this view.
         */

    }, {
        key: 'isPointVisibleToRootView',
        value: function isPointVisibleToRootView(localPoint) {
            var _rootView$hitTest = this.rootView.hitTest(this.convertLocalToRoot(localPoint)),
                _rootView$hitTest2 = _slicedToArray(_rootView$hitTest, 1),
                hitView = _rootView$hitTest2[0];

            return hitView === this;
        }

        /**
         * Returns true if the local point is inside this view.
         *
         * By default this assumes the view's shape is a solid rectangle.
         *
         * Subclasses can override for transparency (holes) or other
         * view shapes (e.g. a circle).
         */

    }, {
        key: 'containsPoint',
        value: function containsPoint(localPoint) {
            return localPoint.x >= 0 && localPoint.x < this.width && localPoint.y >= 0 && localPoint.y < this.height;
        }
    }, {
        key: 'addSubview',

        /**
         * Adds a subview to this view.  The subview will be in front of all
         * other subviews already added to this view.
         */

        value: function addSubview(subview) {
            if (subview.superview) {
                subview.superview.removeSubview(subview);
            }

            subview.superview = this;
            this.subviews.push(subview);

            this.needsLayout = true;
            subview.needsLayout = true;

            subview.wasAddedToView();
            this.emit('subviewAdded', subview);
        }

        /**
         * Removes a subview whose superview is this view.
         */

    }, {
        key: 'removeSubview',
        value: function removeSubview(subview) {
            var index = this.subviews.indexOf(subview);
            if (index !== -1) {
                this.needsLayout = true;
                subview.willBeRemovedFromView(this);
                this.subviews.splice(index, 1);
                subview.wasRemovedFromView(this);
                this.emit('subviewRemoved', subview);
            }
        }

        /**
         * Removes this view from its superview.
         */

    }, {
        key: 'removeFromSuperview',
        value: function removeFromSuperview() {
            if (this.superview) {
                this.superview.removeSubview(this);
            }
        }

        /**
         * Called when this view was added as a subview of the given superview.
         */

    }, {
        key: 'wasAddedToView',
        value: function wasAddedToView() {
            if (this.allSuperviewsVisible()) {
                this.didBecomeVisible();
            }
        }

        /**
         * Called when this view is about to be removed from its superview.
         */

    }, {
        key: 'willBeRemovedFromView',
        value: function willBeRemovedFromView() /*superview*/{
            var _this2 = this;

            _lodash2.default.each(this.subviews, function (subview) {
                return subview.willBeRemovedFromView(_this2);
            });
            this.removeAllAnimations();
            this.resignFirstResponder();
            this.needsUpdate = false;
            this.needsLayout = false;
        }

        /**
         * Called when this view was removed as a subview of the given superview.
         */

    }, {
        key: 'wasRemovedFromView',
        value: function wasRemovedFromView() /*superview*/{
            var _this3 = this;

            this.superview = null;

            this.emit('removedFromSuperview');

            this.removeAllListeners();
            this.position.removeAllListeners();
            this.size.removeAllListeners();

            _lodash2.default.each(this.subviews, function (subview) {
                return subview.wasRemovedFromView(_this3);
            });
        }

        /**
         * Returns an array of this view's ancestor views.
         *
         * `[ superview, super-superview, ..., rootView ]`
         */

    }, {
        key: 'ancestorViews',
        value: function ancestorViews() {
            var list = [],
                curr = this.superview;

            while (curr) {
                list.push(curr);
                curr = curr.superview;
            }

            return list;
        }

        /**
         * Returns the top-most, "root", or oldest ancestor view of this view.
         */

    }, {
        key: 'getFirstSubviewByPredicate',

        /**
         * Returns the first subview that matches the given predicate.
         *
         * If `recursive` is truthy and none of the immediate subviews of this
         * subview match the predicate, the search continues recursively.
         */

        value: function getFirstSubviewByPredicate(pred) {
            var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var match = _lodash2.default.find(this.subviews, pred);

            if (!match && recursive) {
                _lodash2.default.each(this.subviews, function (subview) {
                    match = subview.getFirstSubviewByPredicate(pred, true);
                    if (match) {
                        return false;
                    }
                });
            }

            return match;
        }

        /**
         * Finds the first subview with a matching `.id`.
         */

    }, {
        key: 'findSubviewById',
        value: function findSubviewById(id) {
            var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            return this.getFirstSubviewByPredicate(_lodash2.default.matchesProperty('id', id), recursive);
        }

        /**
         * Returns the z-index of this view.
         *
         * The z-index is 0 for the subview furthest to the back, and is
         * incremented by one for each subview in front.
         *
         * Returns -1 if this view has no superview.
         */

    }, {
        key: 'bringToFront',

        /**
         * Makes this view the top-most subview of its superview
         * meaning it is rendered last.
         *
         * Since subviews are rendered from oldest added to
         * most recently added, there's an implicit Z ordering
         * more recent subviews are rendered atop older subviews.
         */

        value: function bringToFront(subview) {
            var index = this.subviews.indexOf(subview);
            if (index !== -1) {
                this.subviews.splice(index, 1);
                this.subviews.push(subview);
            }

            return this;
        }

        /**
         * Makes this view the bottom-most subview of its superview.
         */

    }, {
        key: 'moveToBack',
        value: function moveToBack(subview) {
            var index = this.subviews.indexOf(subview);
            if (index !== -1) {
                this.subviews.splice(index, 1);
                this.subviews.unshift(subview);
            }

            return this;
        }
    }, {
        key: 'layoutIfNeeded',

        /**
         * Layout the subviews of this view if it is currently
         * marked as needing layout.
         */

        value: function layoutIfNeeded() {
            if (this._needsLayout) {
                this.layoutSubviews();
                this.needsLayout = false;
                this.didLayoutSubviews();
            }
            return this;
        }

        /**
         * This view is asked to layout its subviews.
         */

    }, {
        key: 'layoutSubviews',
        value: function layoutSubviews() {
            _lodash2.default.each(this.subviews, function (subview) {
                return subview.layoutSubviews();
            });
        }
    }, {
        key: 'didLayoutSubviews',
        value: function didLayoutSubviews() {
            this.emit('didLayoutSubviews');
        }
    }, {
        key: 'touchStart',

        /**
         * The user touched down inside this view's frame.
         *
         * Events:
         * - touchStart(localPoint)
         */

        value: function touchStart(localPoint) {
            if (!this.userInteractionEnabled) {
                return;
            }

            this._touchCanceled = false;

            if (this.highlightsOnTouch) {
                this.highlighted = true;
            }

            this.emit('touchStart', localPoint);

            this._touchStartPoint = localPoint;

            this._longPressTimeout = setTimeout(this.longPressed.bind(this, localPoint), 700);

            this.needsDisplay = true;
        }

        /**
         * The user touched down inside this view's frame previously
         * and without lifting the finger, has moved the finger inside while
         * still inside this view's frame.
         *
         * This is not called if this view is draggable.
         */

    }, {
        key: 'touchMove',
        value: function touchMove(localPoint) {
            if (!this.userInteractionEnabled) {
                return;
            }

            this.emit('touchMove', localPoint);

            this.needsDisplay = true;

            if (this._touchStartPoint && (0, _util.distanceSquared)(this._touchStartPoint, localPoint) > 10) clearTimeout(this._longPressTimeout);
        }

        /**
         * The user touched down inside this view's frame
         * and then touched up inside this view's frame.
         *
         * Events:
         * - tap(localPoint, tapCount)
         */

    }, {
        key: 'tapped',
        value: function tapped(localPoint) {
            var _this4 = this;

            if (this._touchCanceled) {
                return;
            }

            this.needsDisplay = true;

            var now = +new Date();

            if (this._timeOfLastTap === null) {
                this._timeOfLastTap = now;
            }

            if (this._tapCount === null) {
                this._tapCount = 1;
            }

            // Tapping this view again within this many milliseconds;
            // of a previous tap on this view is considered a multi-tap.;

            var multiTapContinueMS = 300;

            // If this is an additional tap within a short timeout;
            // period, note it.

            var dt = now - this._timeOfLastTap;
            if (dt > 0 && dt < multiTapContinueMS) {
                this._tapCount++;
                this._timeOfLastTap = now;
                this.multiTapped(localPoint, this._tapCount);
            }

            // When no subsequent taps arrive on this view,
            // stop counting multi-taps.

            clearTimeout(this._multiTapTimeout);
            this._multiTapTimeout = setTimeout(function () {
                _this4._timeOfLastTap = null;
                _this4._tapCount = null;
            }, multiTapContinueMS);

            this.emit('tap', localPoint, this._tapCount);
        }

        /**
         * This view was tapped more than once within a short timeout window.
         * Called each time the view is tapped an additional time beyond the first
         * tap.
         * Note that `tapped` is called (and thus, `onTap` is triggered) for each
         * tap.
         *
         *     Tap #      Calls
         *     ------------------------------------------------------
         *     1          tapped(point)
         *     2          tapped(point), multiTapped(point, 2)
         *     ...        ...
         *     n          tapped(point), multiTapped(point, n)
         */

    }, {
        key: 'multiTapped',
        value: function multiTapped() /*localPoint, times*/{}

        /**
         * The user touched down inside this view's frame
         * and then touched up inside or outside this view's frame.
         *
         * Always called even if the view was tapped or dragged.
         *
         * Events:
         * - touchEnd(localPoint)
         */

    }, {
        key: 'touchEnd',
        value: function touchEnd() /*localPoint*/{
            this.highlighted = false;
            clearTimeout(this._longPressTimeout);
            this.emit('touchEnd');
            this.needsDisplay = true;
        }

        /**
         * This view was touched but the touchEnd will not be forthcoming.
         */

    }, {
        key: 'touchCancel',
        value: function touchCancel() {
            this.highlighted = false;
            clearTimeout(this._longPressTimeout);
            this._touchCanceled = true;
            this.needsDisplay = true;
            this.emit('touchCancel');
        }

        /**
         * The user touched and kept touching this view for a long time.
         *
         * This is a "long press" gesture.
         *
         * Events:
         * - onLongPressed(localPoint)
         */

    }, {
        key: 'longPressed',
        value: function longPressed(localPoint) {
            this._touchCanceled = true;
            this.emit('longPressed', localPoint);
        }

        /**
         * Registers an animation with this view, optionally creating the
         * `Animation` object, and starts the animation.
         *
         * When called as `addAnimation(props, opts)`, an `Animation`
         * is created from `props`.
         *
         * When called as `addAnimation(animationObj)`, the default
         * options are `{doNotStart: false}`.
         *
         * The `Animation` object is returned.  You can add event listeners
         * to it for `update`, `complete`, etc.
         */

    }, {
        key: 'addAnimation',
        value: function addAnimation(anim, opts) {
            var _this5 = this;

            if (_lodash2.default.isPlainObject(anim) && !opts) {
                opts = _lodash2.default.merge({ target: this }, anim);
                anim = new _Animation2.default(opts);
            } else if (!anim.target) {
                anim.target = this;
            }

            opts = opts || {};

            if (this._animations === null) {
                this._animations = {};
            }

            if (_lodash2.default.isEmpty(anim.name)) {
                throw new Error('anim name must be set');
            }

            if (_lodash2.default.has(this._animations, anim.name)) {
                if (!opts.failIfExists) {
                    this._animations[anim.name].stop();
                } else {
                    throw new Error(this.id + ' has anim "' + anim.name + '" already');
                }
            }

            this._animations[anim.name] = anim;

            anim.once('complete', function () /*finished*/{
                _this5.removeAnimationWithName(anim.name);
                _this5.emit('animationCompleted', anim);
            });

            this.emit('animationAdded', anim);

            if (!opts.doNotStart) {
                anim.start();
                this.emit('animationStarted', anim);
            }

            this.needsDisplay = true;
            return anim;
        }

        /**
         * Removes an animation by name.
         *
         * There is no "pause" of an animation.
         */

    }, {
        key: 'removeAnimationWithName',
        value: function removeAnimationWithName(name) {
            if (_lodash2.default.has(this._animations, name)) {
                var animation = this._animations[name];
                animation.stop();
                delete this._animations[name];
            }

            return this;
        }

        /**
         * Removes all animations registered on this view.
         */

    }, {
        key: 'removeAllAnimations',
        value: function removeAllAnimations() {
            var _this6 = this;

            _lodash2.default.each(this._animations, function (anim, name) {
                return _this6.removeAnimationWithName(name);
            });
            return this;
        }
    }, {
        key: 'hasAnimation',
        value: function hasAnimation(name) {
            return _lodash2.default.has(this._animations, name);
        }

        /**
         * Enable/disable dragging of this view.
         *
         * Events:
         * - onDragStarted: dragging of this view has begun.
         * - onDragUpdated: this view is being dragged.
         * - onDragEnded: this view was dropped on itself.
         * - onDropRejected: this view was dropped but the target view rejected it.
         * - onDropAccepted: this view was dropped on another view.
         */

    }, {
        key: 'draggingStarted',

        /**
         * This view has started being dragged.
         */

        value: function draggingStarted(superviewPoint) {
            this.lastDragPoint = superviewPoint;
            this.emit('dragStarted', this.lastDragPoint);
            this.needsDisplay = true;
        }

        /**
         * This view was dragged to a new point in its superview space.
         */

    }, {
        key: 'draggingUpdate',
        value: function draggingUpdate(superviewPoint) {
            if (this.lastDragPoint) {
                this.position.addSelf(superviewPoint.sub(this.lastDragPoint));
                this.emit('dragUpdated', superviewPoint);
                this.lastDragPoint.copy(superviewPoint);
                this.needsDisplay = true;
            }
        }

        /**
         * This view was dragged but that is all done with now.
         */

    }, {
        key: 'draggingEnded',
        value: function draggingEnded(superviewPoint) {
            this.emit('dragEnded', superviewPoint);
            this.needsDisplay = true;
        }

        /**
         * A dragged view is about to be dropped on this view.
         * If this view wishes to accept the dragged view, this should
         * return true.
         */

    }, {
        key: 'acceptsDroppedView',
        value: function acceptsDroppedView() /*otherView, localPoint*/{
            return this.userInteractionEnabled;
        }

        /**
         * This view was dropped on another view.
         * The other view accepted the drop attempt.
         */

    }, {
        key: 'wasAcceptedAsDroppedView',
        value: function wasAcceptedAsDroppedView(toOtherView /*, otherViewPoint*/) {
            this.emit('dropAccepted', toOtherView);
        }

        /**
         * This view was dropped on another view.
         * The other view rejected the drop attempt.
         */

    }, {
        key: 'wasRejectedAsDroppedView',
        value: function wasRejectedAsDroppedView(byOtherView /*, otherViewPoint*/) {
            this.emit('dropRejected', byOtherView);
        }

        /**
         * This view accepts the given view as a dropped view
         * but the view has not yet been dropped.
         *
         * This would be a good time to show an animation
         * if desired (e.g. scale up to show this view is ready
         * or similar).
         */

    }, {
        key: 'mightReceiveDroppedView',
        value: function mightReceiveDroppedView(view, localPoint) {
            this.emit('dropMightBeReceived', view, localPoint);
        }

        /**
         * This view accepts the given view as a dropped view
         * but the view was dragged outside this view's frame
         * and thus won't be dropped (at least immediately; the
         * view can be dragged back into this view's frame of course
         * during the same operation).
         *
         * This would be a good time to play an animation if desired
         * (e.g. scale back to normal scale).
         */

    }, {
        key: 'willNotReceiveDroppedView',
        value: function willNotReceiveDroppedView(view) {
            this.emit('dropWillNotBeReceived', view);
        }

        /**
         * A dragged view was accepted by this view and is being dropped
         * on this view.
         */

    }, {
        key: 'droppedViewWasReceived',
        value: function droppedViewWasReceived(droppedView, localPoint) {
            this.emit('dropReceived', droppedView, localPoint);
        }

        /**
         * The view is asked to draw itself into this given context.
         */

    }, {
        key: 'redraw',
        value: function redraw(context) {
            if (this.hidden) {
                return;
            }

            // While we layout in the update loop, it is possible for a
            // layout to be required during drawing of other views.;

            this.layoutIfNeeded();

            context.save();

            // Origin is the top-left corner of the view's frame.

            var pos = this.position;
            context.translate(pos.x, pos.y);

            // Scaling and rotation are performed about the view's center.

            var scale = this.scale,
                angle = this.angle;

            if (scale.x !== 1 || scale.y !== 1 || angle !== 0) {
                var cx = this.halfWidth,
                    cy = this.halfHeight;

                context.translate(cx, cy);

                if (scale.x !== 1 || scale.y !== 1) {
                    context.scale(scale.x, scale.y);
                }

                if (angle !== 0) {
                    context.rotate(angle);
                }

                context.translate(-cx, -cy);
            }

            this.addShapePath(context);

            var clips = this.clipsSubviews;

            if (clips) {
                context.save();
                context.clip();
            }

            // Set font after save() so that subviews inherit the font
            // if they don't override it

            var font = this.font;
            if (font) {
                context.font = font;
            }

            // Alpha of this view is a multiplier of superview alpha.;
            // e.g. 0.5 means 50% transparent **relative to superview alpha**;

            context.globalAlpha *= this.alpha;

            var drawMode = this.drawMode;
            if (drawMode) {
                context.globalCompositeOperation = drawMode;
            } else {
                context.globalCompositeOperation = 'source-over';
            }

            this.draw(context);

            this.subviews.forEach(function (subview) {
                return subview.redraw(context);
            });

            if (clips) {
                context.restore();
            }

            context.shadowColor = null;
            context.shadowBlur = 0;
            context.shadowOffsetX = 0;
            context.shadowOffsetY = 0;

            // Draw the border atop the subviews, and after any clipping
            // else we'd only see the portion of the border on the inside of the shape.

            if (this.borderColor && this.borderWidth) {
                // Note that the current path is not a part of the saved state so we
                // must re-add the view's shape before we can draw it's border.
                // https://html.spec.whatwg.org/multipage/scripting.html#the-canvas-state

                if (!_lodash2.default.isArray(this.borderColor) && !_lodash2.default.isArray(this.borderWidth)) this.addShapePath(context);

                // If these properties are arrays, we have to draw the border's
                // sides independently.  Thus, don't use a custom shape and an array
                // for borderWidth/Color; just use the default rectangular shape.

                this.drawBorder(context);
            }

            this.postDraw(context);

            context.restore();
        }

        /**
         * Add the shape of this view to the rendering context.
         *
         * By default the shape of a view is a rounded rectange if the view's
         * `cornerRadius` is greater than 0 or a rectangle if the `cornerRadius`
         * equals 0.
         */

    }, {
        key: 'addShapePath',
        value: function addShapePath(context) {
            var cr = this.cornerRadius;

            if (_lodash2.default.isArray(cr) || cr > 0) {
                context.roundRect(0, 0, this.width, this.height, cr);
            } else {
                context.beginPath();
                context.rect(0, 0, this.width, this.height);
                context.closePath();
            }
        }

        /**
         * The view is asked to draw itself.
         */

    }, {
        key: 'draw',
        value: function draw(context) {
            context.shadowColor = null;
            context.shadowBlur = 0;
            context.shadowOffsetX = 0;
            context.shadowOffsetY = 0;

            var bg = this.backgroundColor;
            if (bg) {
                context.fillStyle = bg;

                if (View.shadowsEnabled && this.shadowColor) {
                    context.shadowColor = this._shadowColor;
                    context.shadowBlur = this._shadowBlur;
                    context.shadowOffsetX = this._shadowOffsetX;
                    context.shadowOffsetY = this._shadowOffsetY;
                }

                context.fill();
            } else {
                context.clearRect(0, 0, this.width, this.height);
            }
        }

        /**
         * The view is asked to draw its border if any.
         *
         * Note that clipping is disabled at this point.
         */

    }, {
        key: 'drawBorder',
        value: function drawBorder(context) {
            var width = this.borderWidth,
                color = this.borderColor;

            // Expand both to arrays if either are arrays.
            // [top, left, bottom, right]

            var widthIsArray = _lodash2.default.isArray(width),
                colorIsArray = _lodash2.default.isArray(color);

            var expanded;

            if (widthIsArray && !colorIsArray) {
                expanded = [color, color, color, color];
                color = expanded;
                colorIsArray = true;
            } else if (!widthIsArray && colorIsArray) {
                expanded = [width, width, width, width];
                width = expanded;
                widthIsArray = true;
            }

            if (widthIsArray) {
                // TODO take cornerRadius into account.

                var topBorderWidth = width[0],
                    leftBorderWidth = width[1],
                    bottomBorderWidth = width[2],
                    rightBorderWidth = width[3];

                var top = topBorderWidth / 2,
                    left = leftBorderWidth / 2,
                    bottom = this.height - bottomBorderWidth / 2,
                    right = this.width - rightBorderWidth / 2;

                if (topBorderWidth > 0) {
                    context.beginPath();
                    context.moveTo(left, top);
                    context.lineTo(right, top);
                    context.lineWidth = width[0];
                    context.strokeStyle = color[0];
                    context.stroke();
                }

                if (leftBorderWidth > 0) {
                    context.beginPath();
                    context.moveTo(left, top);
                    context.lineTo(left, bottom);
                    context.lineWidth = width[1];
                    context.strokeStyle = color[1];
                    context.stroke();
                }

                if (bottomBorderWidth > 0) {
                    context.beginPath();
                    context.moveTo(left, bottom);
                    context.lineTo(right, bottom);
                    context.lineWidth = width[2];
                    context.strokeStyle = color[2];
                    context.stroke();
                }

                if (rightBorderWidth > 0) {
                    context.beginPath();
                    context.moveTo(right, top);
                    context.lineTo(right, bottom);
                    context.lineWidth = width[3];
                    context.strokeStyle = color[3];
                    context.stroke();
                }
            } else {
                context.lineWidth = width;
                context.strokeStyle = color;
                context.stroke();
            }
        }

        /**
         * Called after all drawing on this view and its subviews is done.
         */

    }, {
        key: 'postDraw',
        value: function postDraw(context) {
            if (this._debugMode || this.highlighted) {
                this.addShapePath(context);
            }

            if (this.highlighted) {
                context.fillStyle = this.highlightColor;
                context.fill();
            }

            if (this._debugMode) {
                this.drawDebugOverlays(context);
            }
        }
    }, {
        key: 'drawDebugOverlays',
        value: function drawDebugOverlays(context) {
            if (this.superview) {
                context.globalAlpha = 0.7;

                this.drawDebugBorder(context);
                //this.drawDebugCenterIndicators(context);
                this.drawDebugContentFrame(context);
                this.drawDebugToString(context);

                context.globalAlpha = 1;
            }
        }
    }, {
        key: 'drawDebugBorder',
        value: function drawDebugBorder(context) {
            context.strokeStyle = 'orange';
            context.lineWidth = 1;
            context.setLineDash([2]);
            context.stroke();
        }
    }, {
        key: 'drawDebugCenterIndicators',
        value: function drawDebugCenterIndicators(context) {
            context.strokeStyle = '#f00';
            context.beginPath();
            context.moveTo(this.center.x, 0);
            context.lineTo(this.center.x, this.height);
            context.moveTo(0, this.center.y);
            context.lineTo(this.width, this.center.y);
            context.closePath();
            context.stroke();
        }
    }, {
        key: 'drawDebugContentFrame',
        value: function drawDebugContentFrame(context) {
            var contentFrame = this.contentFrame;
            context.strokeStyle = '#00f';
            context.beginPath();
            context.rect(contentFrame.origin.x, contentFrame.origin.y, contentFrame.size.width, contentFrame.size.height);
            context.closePath();
            context.stroke();
        }
    }, {
        key: 'drawDebugToString',
        value: function drawDebugToString(context) {
            var text = this.toString();
            context.font = (0, _fonts.SystemFontOfSize)(7);
            context.beginPath();
            context.rect(0, 0, context.measureText(text).width, 15);
            context.closePath();
            context.fillStyle = '#ff0';
            context.fill();

            context.fillStyle = '#000';
            context.textAlign = 'left';
            context.textBaseline = 'top';
            context.fillText(text, 0, 0);
        }

        /**
         * Returns the deepest hit view or subview of this view
         * that contains the point `point` which is in the coordinate
         * system of this view.
         *
         * Returns `[hitView, hitViewLocalPoint]`.
         *
         * `hitView` will be null if the point is not inside this view
         * nor any of its subviews.
         */

    }, {
        key: 'hitTest',
        value: function hitTest(point) {
            if (this.hidden || !this.userInteractionEnabled) {
                return [null, null];
            }

            if (point.x < 0 || point.x > this.width || point.y < 0 || point.y > this.height) {

                return [null, null];
            }

            for (var n = this.subviews.length, i = n - 1; i >= 0; --i) {
                var subview = this.subviews[i],
                    subviewPoint = subview.convertSuperviewToLocal(point),
                    _subview$hitTest = subview.hitTest(subviewPoint),
                    _subview$hitTest2 = _slicedToArray(_subview$hitTest, 2),
                    subviewViewHit = _subview$hitTest2[0],
                    subviewViewHitPoint = _subview$hitTest2[1];

                if (subviewViewHit) {
                    return [subviewViewHit, subviewViewHitPoint];
                }
            }

            return [this, point];
        }

        /**
         * Returns a point in this view's superview coordinate system
         * tranformed to this view's coordinate system.
         */

    }, {
        key: 'convertSuperviewToLocal',
        value: function convertSuperviewToLocal(superviewPoint) {
            return superviewPoint.sub(this._frame.origin);
        }

        /**
         * Returns a point in this view's coordinate system
         * tranformed to this view's superview coordinate system.
         */

    }, {
        key: 'convertLocalToSuperview',
        value: function convertLocalToSuperview(localPoint) {
            return localPoint.add(this._frame.origin);
        }

        /**
         * Returns a point in this view's root view coordinate system
         * tranformed to this view's coordinate system.
         */

    }, {
        key: 'convertRootToLocal',
        value: function convertRootToLocal(point) {
            var ancestors = this.ancestorViews(),
                p = point.clone();

            // point in root view space so skip the transformation on that one.
            // [ superview, super-superview, ..., rootView ];

            for (var n = ancestors.length, i = n - 2; i >= 0; --i) {
                p = ancestors[i].convertSuperviewToLocal(p);
            }

            // this view is not one of its ancestors.;

            return this.convertSuperviewToLocal(p);
        }

        /**
         * Returns a point in this view's view coordinate system
         * tranformed to this view's root view coordinate system.
         */

    }, {
        key: 'convertLocalToRoot',
        value: function convertLocalToRoot(point) {
            var curr = this,
                p = point.clone();

            while (curr.superview) {
                p = curr.convertLocalToSuperview(p);
                curr = curr.superview;
            }

            return p;
        }

        /**
         * Converts a point in the coordinate system of an arbitrary view to that of
         * the local view, even if the other view has a different immediate superview
         * than the local view.
         */

    }, {
        key: 'convertOtherToLocal',
        value: function convertOtherToLocal(view, pointInView) {
            return this.convertRootToLocal(view.convertLocalToRoot(pointInView));
        }

        /**
         * Converts a point in the coordinate system of an arbitrary view to that of
         * this view's superview.
         */

    }, {
        key: 'convertOtherToSuperview',
        value: function convertOtherToSuperview(view, pointInView) {
            if (view.superview === this.superview) {
                return view.convertLocalToSuperview(pointInView);
            }

            return this.convertLocalToSuperview(this.convertOtherToLocal(view, pointInView));
        }

        /**
         * Converts a point in the local coordinate system to that of
         * the another view, even if the other view has a different immediate superview
         * than the local view.
         */

    }, {
        key: 'convertLocalToOther',
        value: function convertLocalToOther(localPoint, view) {
            return view.convertRootToLocal(this.convertLocalToRoot(localPoint));
        }

        /**
         * Returns the top-left corner of this view's frame.
         */

    }, {
        key: 'resize',

        /**
         * Updates this view's size.
         */

        value: function resize(w, h) {
            this._frame.size.set(w, h);
            return this;
        }

        /**
         * Returns this view's frame in local coordinates.
         */

    }, {
        key: 'setTop',
        value: function setTop(top) {
            this.top = top;
            return this;
        }

        /**
         * Returns the top edge coordinate of this view's frame.
         */

    }, {
        key: 'setBottom',
        value: function setBottom(bottom) {
            this.bottom = bottom;
            return this;
        }

        /**
         * Returns the top edge coordinate of this view's frame.
         */

    }, {
        key: 'setLeft',
        value: function setLeft(left) {
            this.left = left;
            return this;
        }

        /**
         * Returns the top edge coordinate of this view's frame.
         */

    }, {
        key: 'setRight',
        value: function setRight(right) {
            this.right = right;
            return this;
        }

        /**
         * Returns the width of this view's frame.
         */

    }, {
        key: 'setWidth',
        value: function setWidth(width) {
            this.width = width;
            return this;
        }

        /**
         * Returns half the width of this view's frame.
         */

    }, {
        key: 'setHeight',
        value: function setHeight(height) {
            this.height = height;
            return this;
        }

        /**
         * Returns half the height of this view's frame.
         */

    }, {
        key: 'encloseSubviews',

        /**
         * Update this view's rectangle to enclose all of its subviews
         */

        value: function encloseSubviews() {
            var minX = Infinity,
                minY = Infinity,
                maxX = -Infinity,
                maxY = -Infinity;

            _lodash2.default.each(this.subviews, function (subview) {
                minX = Math.min(minX, subview.left);
                minY = Math.min(minY, subview.top);
                maxX = Math.max(maxX, subview.right);
                maxY = Math.max(maxY, subview.bottom);
            });

            this.position = this.convertLocalToSuperview(new _Point2.default(minX, minY));

            this._frame.size.set(maxX - minX, maxY - minY);
        }

        /**
         * Move this view to be above the given view with optional offset.
         */

    }, {
        key: 'moveAbove',
        value: function moveAbove(view) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            this.bottom = Math.round(view.top + offset);
            return this;
        }

        /**
         * Move this view to be below the given view with optional offset.
         */

    }, {
        key: 'moveBelow',
        value: function moveBelow(view) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            this.top = Math.round(view.bottom + offset);
            return this;
        }

        /**
         * Move this view to the left of the given view with optional offset.
         */

    }, {
        key: 'moveLeftOf',
        value: function moveLeftOf(view) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            this.right = Math.round(view.left + offset);
            return this;
        }

        /**
         * Move this view to the right of the given view with optional offset.
         */

    }, {
        key: 'moveRightOf',
        value: function moveRightOf(view) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            this.left = Math.round(view.right + offset);
            return this;
        }
    }, {
        key: 'moveToLeftTop',
        value: function moveToLeftTop() {
            var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _magic.PointZero;

            if (this.superview) {
                this.left = Math.round(this.superview.contentLeft + offset.x);
                this.top = Math.round(this.superview.contentTop + offset.y);
            }
            return this;
        }
    }, {
        key: 'moveToCenterTop',
        value: function moveToCenterTop() {
            var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _magic.PointZero;

            if (this.superview) {
                this.centerX = Math.round(this.superview.contentCenterX + offset.x);
                this.top = Math.round(this.superview.contentTop + offset.y);
            }
            return this;
        }
    }, {
        key: 'moveToRightTop',
        value: function moveToRightTop() {
            var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _magic.PointZero;

            if (this.superview) {
                this.top = Math.round(this.superview.contentTop + offset.y);
                this.right = Math.round(this.superview.contentRight + offset.x);
            }
            return this;
        }
    }, {
        key: 'moveToLeftMiddle',
        value: function moveToLeftMiddle() {
            var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _magic.PointZero;

            if (this.superview) {
                this.left = Math.round(this.superview.contentLeft + offset.x);
                this.centerY = Math.round(this.superview.contentCenterY + offset.y);
            }
            return this;
        }
    }, {
        key: 'moveToCenterMiddle',
        value: function moveToCenterMiddle() {
            var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _magic.PointZero;

            if (this.superview) {
                this.center = this.superview.center.add(offset);
            }
            return this;
        }
    }, {
        key: 'moveToRightMiddle',
        value: function moveToRightMiddle() {
            var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _magic.PointZero;

            if (this.superview) {
                this.right = Math.round(this.superview.contentRight + offset.x);
                this.centerY = Math.round(this.superview.contentCenterY + offset.y);
            }
            return this;
        }
    }, {
        key: 'moveToLeftBottom',
        value: function moveToLeftBottom() {
            var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _magic.PointZero;

            if (this.superview) {
                this.bottom = Math.round(this.superview.contentBottom + offset.y);
                this.left = Math.round(this.superview.contentLeft + offset.x);
            }
            return this;
        }
    }, {
        key: 'moveToCenterBottom',
        value: function moveToCenterBottom() {
            var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _magic.PointZero;

            if (this.superview) {
                this.bottom = Math.round(this.superview.contentBottom + offset.y);
                this.centerX = Math.round(this.superview.contentCenterX + offset.x);
            }
            return this;
        }
    }, {
        key: 'moveToRightBottom',
        value: function moveToRightBottom() {
            var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _magic.PointZero;

            if (this.superview) {
                this.bottom = Math.round(this.superview.contentBottom + offset.y);
                this.right = Math.round(this.superview.contentRight + offset.x);
            }
            return this;
        }

        /**
         * Sets the left edge of this view's frame to that of the given view, plus
         * an optional offset.
         *
         * Assumes that `view` has the same superview as this view.
         */

    }, {
        key: 'alignLeft',
        value: function alignLeft(view) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            this.left = Math.round(view.left + offset);
            return this;
        }

        /**
         * Sets the right edge of this view's frame to that of the given view, plus
         * an optional offset.
         *
         * Assumes that `view` has the same superview as this view.
         */

    }, {
        key: 'alignRight',
        value: function alignRight(view) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            this.right = Math.round(view.right + offset);
            return this;
        }

        /**
         * Sets the top edge of this view's frame to that of the given view, plus
         * an optional offset.
         *
         * Assumes that `view` has the same superview as this view.
         */

    }, {
        key: 'alignTop',
        value: function alignTop(view) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            this.top = Math.round(view.top + offset);
            return this;
        }

        /**
         * Sets the bottom edge of this view's frame to that of the given view, plus
         * an optional offset.
         *
         * Assumes that `view` has the same superview as this view.
         */

    }, {
        key: 'alignBottom',
        value: function alignBottom(view) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            this.bottom = Math.round(view.bottom + offset);
            return this;
        }

        /**
         * Sets the vertical center coordinate of this view's frame to that of the
         * given view, plus an optional offset.
         */

    }, {
        key: 'alignVerticalCenter',
        value: function alignVerticalCenter(view) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            this.top = Math.round(this.convertOtherToSuperview(view, view.center).y - this.halfHeight + offset);
            return this;
        }

        /**
         * Sets the horizontal center coordinate of this view's frame to that of the
         * given view, plus an optional offset.
         */

    }, {
        key: 'alignHorizontalCenter',
        value: function alignHorizontalCenter(view) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            this.left = Math.round(this.convertOtherToSuperview(view, view.center).x - this.halfWidth + offset);
            return this;
        }

        /**
         * Sets the horizontal and vertical center of this view's frame to that of the
         * given view, plus an optional offset.
         */

    }, {
        key: 'alignCenter',
        value: function alignCenter(view) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _magic.PointZero;

            this.alignHorizontalCenter(view, offset.x);
            return this.alignVerticalCenter(view, offset.y);
        }

        /**
         * Sets this view's frame to that of the given view, plus an optional offset.
         */

    }, {
        key: 'align',
        value: function align(view) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _magic.PointZero;

            this._frame.copy(view.frame);

            if (offset !== _magic.PointZero) {
                this._frame.origin.addSelf(offset);
            }

            return this;
        }

        /**
         * Sets the width of this view's frame to that of the given view,
         * plus an optional offset.
         */

    }, {
        key: 'makeSameWidth',
        value: function makeSameWidth(view) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            this.width = Math.round(view.width + offset);
            return this;
        }

        /**
         * Sets the height of this view's frame to that of the given view,
         * plus an optional offset.
         */

    }, {
        key: 'makeSameHeight',
        value: function makeSameHeight(view) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            this.height = Math.round(view.height + offset);
            return this;
        }

        /**
         * Sets the width and height of this view's frame to that of the given view,
         * plus an optional offset.
         */

    }, {
        key: 'makeSameSize',
        value: function makeSameSize(view) {
            this.makeSameWidth(view);
            this.makeSameHeight(view);
            return this;
        }

        /**
         * From this view's current position, update the width of this view's frame
         * to fill the space to its right to the right edge of the superview's content frame,
         * less an optional margin.
         *
         * This does not take into account other sibling views that might be "in the way".
         */

    }, {
        key: 'fillWidth',
        value: function fillWidth() {
            var margin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            this.width = this.superview.contentRight - margin - this.left;
            return this;
        }

        /**
         * From this view's current position, update the height of this view's frame
         * to fill the space below to the bottom edge of the superview's content frame,
         * less an optional margin.
         *
         * This does not take into account other sibling views that might be "in the way".
         */

    }, {
        key: 'fillHeight',
        value: function fillHeight() {
            var margin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            this.height = this.superview.contentBottom - margin - this.top;
            return this;
        }

        /**
         * Fill both width and height.
         */

    }, {
        key: 'fillBoth',
        value: function fillBoth() {
            var margin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            return this.fillWidth(margin).fillHeight(margin);
        }

        /**
         * Returns the point in the center of this view in local coordinates.
         */

    }, {
        key: 'sizeToFit',

        /**
         * Sizes the content frame to tightly fit the view's content.
         */

        value: function sizeToFit() {}

        /**
         * You may request that this view's `update` method be called
         * once a frame by setting `needsUpdate` to `true`.
         * When done, be sure to set `needsUpdate` to `false`.
         */

    }, {
        key: 'update',

        /**
         * Update the internal state of the view.
         *
         * For subclasses to override.
         */

        value: function update() {}
    }, {
        key: 'toString',
        value: function toString() {
            var className = this.constructor.name,
                id = this.id !== undefined && '#' + this.id || '',
                frameDesc = this._frame.toString(),
                flags = [];

            if (this._needsLayout) {
                flags.push('layout');
            }

            if (this._needsUpdate) {
                flags.push('update');
            }

            if (this._clipsSubviews) {
                flags.push('clips');
            }

            if (this._hidden) {
                flags.push('hidden');
            }

            if (!this._userInteractionEnabled) {
                flags.push('disabled');
            }

            return '<' + className + id + '@' + frameDesc + '[' + flags.join(',') + ']>';
        }
    }, {
        key: 'dumpHierarchy',
        value: function dumpHierarchy() {
            var indent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

            console.log(indent + this.toString());

            var subviewIndent = indent + '    ';

            for (var i = 0, n = this.subviews.length; i < n; ++i) {
                this.subviews[i].dumpHierarchy(subviewIndent);
            }
        }

        /**
         * This view and all its ancestors must have user interaction enabled
         * for this view to potentially become the first responder.
         */

    }, {
        key: 'canBecomeFirstResponder',
        value: function canBecomeFirstResponder() {
            var curr = this;

            while (curr) {
                if (!curr.userInteractionEnabled) {
                    return false;
                }

                curr = curr.superview;
            }

            return true;
        }

        /**
         * This view is to become the first responder if possible.
         */

    }, {
        key: 'becomeFirstResponder',
        value: function becomeFirstResponder() {
            if (this.isFirstResponder()) {
                return true;
            }

            if (!this.canBecomeFirstResponder()) {
                return false;
            }

            var firstResponderBefore = View.firstResponder;
            if (firstResponderBefore) {
                firstResponderBefore.willResignFirstResponder(this);
            }

            this.willBecomeFirstResponder();
            View.firstResponder = this;
            this.didBecomeFirstResponder();

            if (firstResponderBefore) {
                firstResponderBefore.didResignFirstResponder();
            }

            View.globalEvents.emit('firstResponderDidChange', firstResponderBefore, this);

            return true;
        }

        /**
         * This view will no longer be the first responder.
         * Its superview will be instead.
         * Note that if a first responder is removed from its superview,
         * if auto-resigns first responder status (see willBeRemovedFromView).
         */

    }, {
        key: 'resignFirstResponder',
        value: function resignFirstResponder() {
            if (this.isFirstResponder()) {
                var nextResponder = this.nextResponder();
                if (nextResponder) {
                    nextResponder.becomeFirstResponder();
                } else {
                    this.willResignFirstResponder();
                    View.firstResponder = null;
                    this.didResignFirstResponder();
                }
            }
        }
    }, {
        key: 'isFirstResponder',
        value: function isFirstResponder() {
            return View.firstResponder === this;
        }
    }, {
        key: 'willBecomeFirstResponder',
        value: function willBecomeFirstResponder() {}
    }, {
        key: 'didBecomeFirstResponder',
        value: function didBecomeFirstResponder() {
            this.emit('didBecomeFirstResponder');
        }
    }, {
        key: 'willResignFirstResponder',
        value: function willResignFirstResponder(nextFirstResponder) {}
    }, {
        key: 'didResignFirstResponder',
        value: function didResignFirstResponder() {
            this.emit('didResignFirstResponder');
        }

        /**
         * We only support a default responder chain that bubbles up
         * to this view's superview.
         *
         * Subclasses can override this if needed.
         */

    }, {
        key: 'nextResponder',
        value: function nextResponder() {
            return this.superview;
        }

        /**
         * A key was pressed on some keyboard while this view or a descendent was first responder.
         *
         * `key` is a length-1 string for a character to be inserted at the current position.
         * Otherwise, `key` is expected to be a key name like:
         * 'Help', 'Backspace', 'Tab', 'Escape', 'Shift', 'Control', 'Alt',
         * 'Pause', 'CapsLock', 'Enter', 'PageUp', 'PageDown', 'End', 'Home',
         * 'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown', 'Delete', 'F1', 'F2',
         * 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12',
         */

    }, {
        key: 'keyPressed',
        value: function keyPressed(key, ctrlKey, shiftKey, metaKey, altKey) {
            this.emit('keyPressed', key, ctrlKey, shiftKey, metaKey, altKey);

            if (this.superview) {
                this.superview.keyPressed(key, ctrlKey, shiftKey, metaKey, altKey);
            }
        }
    }, {
        key: 'log',
        value: function log() {
            var _console;

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            (_console = console).log.apply(_console, [this.id, '@', new Date(), '|'].concat(args));
        }
    }, {
        key: 'frame',
        get: function get() {
            return this._frame;
        },
        set: function set(newFrame) {
            this._frame.copy(newFrame); // triggers layout via slot
        }
    }, {
        key: 'insets',
        get: function get() {
            return this._insets;
        },
        set: function set(newInsets) {
            this._insets.copy(newInsets); // triggers layout via slot
        }
    }, {
        key: 'font',
        get: function get() {
            return this._font;
        },
        set: function set(font) {
            if (this._font !== font) {
                this._font = font;
                this.needsLayout = true; // assumes font size changes
            }
        }
    }, {
        key: 'backgroundColor',
        get: function get() {
            return this._backgroundColor;
        },
        set: function set(backgroundColor) {
            if (backgroundColor !== this._backgroundColor) {
                this._backgroundColor = backgroundColor;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'borderColor',
        get: function get() {
            return this._borderColor;
        }

        /**
         * Set the color of the border.
         *
         * If a color, sets all edge border colors to the given color.
         * This allows arbitrary shape paths.
         *
         * If an array, sets each edge border color in order: top, left, bottom, right.
         * Note that using an array assumes a rectangular shape with a cornerRadius of 0.
         */

        , set: function set(borderColor) {
            var doUpdate = false;

            if (_lodash2.default.isArray(borderColor)) {
                if (borderColor.length === 4 && _lodash2.default.every(borderColor, _lodash2.default.isString) && (!_lodash2.default.isArray(this._borderColor) || !_lodash2.default.isEqual(borderColor, this._borderColor))) {
                    doUpdate = true;
                }
            } else if (this._borderColor !== borderColor) {
                doUpdate = true;
            }

            if (doUpdate) {
                this._borderColor = borderColor;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'topBorderColor',
        set: function set(topColor) {
            var color = this.borderColor;
            if (_lodash2.default.isArray(color) && color[0] !== topColor) {
                this._borderColor[0] = topColor;
                this.needsDisplay = true;
            } else {
                this.borderColor = [topColor, color, color, color];
            }
        },
        get: function get() {
            var color = this.borderColor;
            return _lodash2.default.isArray(color) ? color[0] : color;
        }
    }, {
        key: 'leftBorderColor',
        set: function set(leftColor) {
            var color = this.borderColor;
            if (_lodash2.default.isArray(color) && color[1] !== leftColor) {
                this._borderColor[1] = leftColor;
                this.needsDisplay = true;
            } else {
                this.borderColor = [color, leftColor, color, color];
            }
        },
        get: function get() {
            var color = this.borderColor;
            return _lodash2.default.isArray(color) ? color[1] : color;
        }
    }, {
        key: 'bottomBorderColor',
        set: function set(bottomColor) {
            var color = this.borderColor;
            if (_lodash2.default.isArray(color) && color[2] !== bottomColor) {
                this._borderColor[2] = bottomColor;
                this.needsDisplay = true;
            } else {
                this.borderColor = [color, color, bottomColor, color];
            }
        },
        get: function get() {
            var color = this.borderColor;
            return _lodash2.default.isArray(color) ? color[2] : color;
        }
    }, {
        key: 'rightBorderColor',
        set: function set(rightColor) {
            var color = this.borderColor;
            if (_lodash2.default.isArray(color) && color[3] !== rightColor) {
                this._borderColor[3] = rightColor;
                this.needsDisplay = true;
            } else {
                this.borderColor = [color, color, color, rightColor];
            }
        },
        get: function get() {
            var color = this.borderColor;
            return _lodash2.default.isArray(color) ? color[3] : color;
        }
    }, {
        key: 'borderWidth',
        get: function get() {
            return this._borderWidth;
        }

        /**
         * Set the line width of the view's border.
         *
         * If a single value, sets all edge border widths to the given value.
         * This allows arbitrary shape paths.
         *
         * If an array, sets each edge border width in order: top, left, bottom, right.
         * Note that using an array assumes a rectangular shape with a cornerRadius of 0.
         */

        , set: function set(borderWidth) {
            var doUpdate = false;

            if (_lodash2.default.isArray(borderWidth)) {
                if (borderWidth.length === 4 && _lodash2.default.every(borderWidth, _lodash2.default.isFinite) && (!_lodash2.default.isArray(this._borderWidth) || !_lodash2.default.isEqual(borderWidth, this._borderWidth))) {
                    doUpdate = true;
                }
            } else if (_lodash2.default.isFinite(borderWidth) && this._borderWidth !== borderWidth) {
                doUpdate = true;
            }

            if (doUpdate) {
                this._borderWidth = borderWidth;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'topBorderWidth',
        set: function set(topWidth) {
            var width = this.borderWidth;
            if (_lodash2.default.isArray(width) && this._borderWidth[0] !== topWidth) {
                this._borderWidth[0] = topWidth;
                this.needsDisplay = true;
            } else {
                this.borderWidth = [topWidth, width, width, width];
            }
        },
        get: function get() {
            var width = this.borderWidth;
            return _lodash2.default.isArray(width) ? width[0] : width;
        }
    }, {
        key: 'leftBorderWidth',
        set: function set(leftWidth) {
            var width = this.borderWidth;
            if (_lodash2.default.isArray(width) && this._borderWidth[1] !== leftWidth) {
                this._borderWidth[1] = leftWidth;
                this.needsDisplay = true;
            } else {
                this.borderWidth = [width, leftWidth, width, width];
            }
        },
        get: function get() {
            var width = this.borderWidth;
            return _lodash2.default.isArray(width) ? width[1] : width;
        }
    }, {
        key: 'bottomBorderWidth',
        set: function set(bottomWidth) {
            var width = this.borderWidth;
            if (_lodash2.default.isArray(width) && this._borderWidth[2] !== bottomWidth) {
                this._borderWidth[2] = bottomWidth;
                this.needsDisplay = true;
            } else {
                this.borderWidth = [width, width, bottomWidth, width];
            }
        },
        get: function get() {
            var width = this.borderWidth;
            return _lodash2.default.isArray(width) ? width[2] : width;
        }
    }, {
        key: 'rightBorderWidth',
        set: function set(rightWidth) {
            var width = this.borderWidth;
            if (_lodash2.default.isArray(width) && this._borderWidth[3] !== rightWidth) {
                this._borderWidth[3] = rightWidth;
                this.needsDisplay = true;
            } else {
                this.borderWidth = [width, width, width, rightWidth];
            }
        },
        get: function get() {
            var width = this.borderWidth;
            return _lodash2.default.isArray(width) ? width[3] : width;
        }
    }, {
        key: 'cornerRadius',
        get: function get() {
            return this._cornerRadius;
        }

        /**
         * Corner radius may be a single number which specifies the corner radius for
         * all 4 corners, or it may be a 4-element array of the form:
         *
         *     [top_left, top_right, lower_right, lower_left]
         */

        , set: function set(cornerRadius) {
            var doUpdate = false;

            if (_lodash2.default.isArray(cornerRadius)) {
                if (cornerRadius.length === 4 && _lodash2.default.every(cornerRadius, _lodash2.default.isFinite) && (!_lodash2.default.isArray(this._cornerRadius) || !_lodash2.default.isEqual(cornerRadius, this._cornerRadius))) {
                    doUpdate = true;
                }
            } else if (_lodash2.default.isFinite(cornerRadius) && this._cornerRadius !== cornerRadius) {
                doUpdate = true;
            }

            if (doUpdate) {
                this._cornerRadius = cornerRadius;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'topLeftCornerRadius',
        set: function set(radius) {
            var cornerRadius = this._cornerRadius;
            if (_lodash2.default.isArray(cornerRadius) && this._cornerRadius[0] !== radius) {
                this._cornerRadius[0] = radius;
                this.needsDisplay = true;
            } else {
                this.cornerRadius = [radius, cornerRadius, cornerRadius, cornerRadius];
            }
        },
        get: function get() {
            var cornerRadius = this.cornerRadius;
            return _lodash2.default.isArray(cornerRadius) ? cornerRadius[0] : cornerRadius;
        }
    }, {
        key: 'topRightCornerRadius',
        set: function set(radius) {
            var cornerRadius = this._cornerRadius;
            if (_lodash2.default.isArray(cornerRadius) && this._cornerRadius[1] !== radius) {
                this._cornerRadius[1] = radius;
                this.needsDisplay = true;
            } else {
                this.cornerRadius = [cornerRadius, radius, cornerRadius, cornerRadius];
            }
        },
        get: function get() {
            var cornerRadius = this.cornerRadius;
            return _lodash2.default.isArray(cornerRadius) ? cornerRadius[1] : cornerRadius;
        }
    }, {
        key: 'bottomRightCornerRadius',
        set: function set(radius) {
            var cornerRadius = this._cornerRadius;
            if (_lodash2.default.isArray(cornerRadius) && this._cornerRadius[2] !== radius) {
                this._cornerRadius[2] = radius;
                this.needsDisplay = true;
            } else {
                this.cornerRadius = [cornerRadius, cornerRadius, radius, cornerRadius];
            }
        },
        get: function get() {
            var cornerRadius = this.cornerRadius;
            return _lodash2.default.isArray(cornerRadius) ? cornerRadius[2] : cornerRadius;
        }
    }, {
        key: 'bottomLeftCornerRadius',
        set: function set(radius) {
            var cornerRadius = this._cornerRadius;
            if (_lodash2.default.isArray(cornerRadius) && this._cornerRadius[3] !== radius) {
                this._cornerRadius[3] = radius;
                this.needsDisplay = true;
            } else {
                this.cornerRadius = [cornerRadius, cornerRadius, cornerRadius, radius];
            }
        },
        get: function get() {
            var cornerRadius = this.cornerRadius;
            return _lodash2.default.isArray(cornerRadius) ? cornerRadius[3] : cornerRadius;
        }
    }, {
        key: 'userInteractionEnabled',
        get: function get() {
            return this._userInteractionEnabled;
        },
        set: function set(userInteractionEnabled) {
            if (this._userInteractionEnabled !== userInteractionEnabled) {
                this._userInteractionEnabled = userInteractionEnabled;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'hidden',
        get: function get() {
            return this._hidden;
        },
        set: function set(hidden) {
            hidden = !!hidden;

            if (this._hidden !== hidden) {
                this._hidden = hidden;

                if (hidden) {
                    this.didBecomeHidden();
                } else if (this.allSuperviewsVisible()) {
                    this.didBecomeVisible();
                }

                this.needsDisplay = true;
            }
        }
    }, {
        key: 'highlighted',
        get: function get() {
            return this._highlighted;
        },
        set: function set(highlighted) {
            if (this._highlighted !== highlighted) {
                this._highlighted = highlighted;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'highlightColor',
        get: function get() {
            return this._highlightColor;
        },
        set: function set(highlightColor) {
            if (this._highlightColor !== highlightColor) {
                this._highlightColor = highlightColor;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'highlightsOnTouch',
        get: function get() {
            return this._highlightsOnTouch;
        },
        set: function set(highlightsOnTouch) {
            if (this._highlightsOnTouch !== highlightsOnTouch) {
                this._highlightsOnTouch = highlightsOnTouch;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'clipsSubviews',
        get: function get() {
            return this._clipsSubviews;
        },
        set: function set(clipsSubviews) {
            if (this._clipsSubviews !== clipsSubviews) {
                this._clipsSubviews = clipsSubviews;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'shadowColor',
        get: function get() {
            return this._shadowColor;
        },
        set: function set(shadowColor) {
            if (this._shadowColor !== shadowColor) {
                this._shadowColor = shadowColor;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'shadowBlur',
        get: function get() {
            return this._shadowBlur;
        },
        set: function set(shadowBlur) {
            if (_lodash2.default.isFinite(shadowBlur) && this._shadowBlur !== shadowBlur) {
                this._shadowBlur = shadowBlur;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'shadowOffsetX',
        get: function get() {
            return this._shadowOffsetX;
        },
        set: function set(shadowOffsetX) {
            if (_lodash2.default.isFinite(shadowOffsetX) && this._shadowOffsetX !== shadowOffsetX) {
                this._shadowOffsetX = shadowOffsetX;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'shadowOffsetY',
        get: function get() {
            return this._shadowOffsetY;
        },
        set: function set(shadowOffsetY) {
            if (_lodash2.default.isFinite(shadowOffsetY) && this._shadowOffsetY !== shadowOffsetY) {
                this._shadowOffsetY = shadowOffsetY;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'alpha',
        get: function get() {
            return this._alpha;
        },
        set: function set(alpha) {
            alpha = Math.min(1, Math.max(0, alpha));
            if (_lodash2.default.isFinite(alpha) && this._alpha !== alpha) {
                this._alpha = alpha;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'drawMode',
        get: function get() {
            return this._drawMode;
        },
        set: function set(drawMode) {
            if (this._drawMode !== drawMode) {
                this._drawMode = drawMode;
                this.needsDisplay = true;
            }
        }
    }, {
        key: 'angle',
        get: function get() {
            return this._angle;
        },
        set: function set(angle) {
            if (_lodash2.default.isFinite(angle) && this._angle !== angle) {
                this._angle = angle;
                this.needsDisplay = true;

                if (this.superview && this._superviewNeedsLayoutOnRotation) {
                    this.superview.needsLayout = true;
                }
            }
        }
    }, {
        key: 'superviewNeedsLayoutOnRotation',
        get: function get() {
            return this._superviewNeedsLayoutOnRotation;
        },
        set: function set(yesNo) {
            this._superviewNeedsLayoutOnRotation = yesNo;
        }
    }, {
        key: 'scale',
        get: function get() {
            return this._scale;
        },
        set: function set(scale) {
            this._scale.set(scale, scale);
            return this;
        }
    }, {
        key: 'scaleX',
        get: function get() {
            return this._scale.x;
        },
        set: function set(sx) {
            this._scale.x = sx;
        }
    }, {
        key: 'scaleY',
        get: function get() {
            return this._scale.y;
        },
        set: function set(sy) {
            this._scale.y = sy;
        }
    }, {
        key: 'superviewNeedsLayoutOnScaling',
        get: function get() {
            return this._superviewNeedsLayoutOnScaling;
        },
        set: function set(yesNo) {
            this._superviewNeedsLayoutOnScaling = yesNo;
        }
    }, {
        key: 'rootView',
        get: function get() {
            var curr = this;

            while (curr.superview) {
                curr = curr.superview;
            }

            return curr;
        }

        /**
         * Returns the top-most view directly parented by the root view of this view.
         */

    }, {
        key: 'firstNonRootView',
        get: function get() {
            var curr = this;

            while (curr.superview && curr.superview.superview) {
                curr = curr.superview;
            }

            return curr;
        }
    }, {
        key: 'zIndex',
        get: function get() {
            return !this.superview ? -1 : this.superview.indexOf(this);
        }
    }, {
        key: 'needsLayout',
        get: function get() {
            return this._needsLayout;
        }

        /**
         * Mark the view as needing to be laid out.
         */

        , set: function set() {
            var needsIt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            if (this._needsLayout !== needsIt) {
                this._needsLayout = needsIt;
                (0, _core.viewNeedsLayout)(this, needsIt);
            }
        }
    }, {
        key: 'needsDisplay',
        get: function get() {
            return this._needsDisplay;
        },
        set: function set(needsIt) {
            this._needsDisplay = needsIt;
            if (needsIt) {
                (0, _core.queueRunLoopIteration)();
            }
        }
    }, {
        key: 'draggable',
        get: function get() {
            return this._draggable;
        },
        set: function set(on) {
            this._draggable = on;
        }

        /**
         * Enables dropping of views on this view.
         *
         * This view can still decide whether or not a dragged
         * view may be dropped on it in `acceptsDroppedView`.
         *
         * Events:
         * - onDropReceived: an accepted view was dropped on this view.
         * - onDropMightBeReceived: an accepted view hovers atop this view.
         * - onDropWillNotBeReceived: an accepted view leaves this view's frame.
         */

    }, {
        key: 'acceptsDroppedViews',
        get: function get() {
            return this._acceptsDroppedViews;
        },
        set: function set(on) {
            this._acceptsDroppedViews = on;
        }
    }, {
        key: 'position',
        get: function get() {
            return this._frame.origin;
        }

        /**
         * Updates the top-left corner of this view's frame
         * to the given point in superview coordinates.
         */

        , set: function set(point) {
            this._frame.origin.copy(point);
        }

        /**
         * Returns the size of this view's frame.
         */

    }, {
        key: 'size',
        get: function get() {
            return this._frame.size;
        }

        /**
         * Updates this view's size.
         */

        , set: function set(size) {
            this._frame.size.copy(size);
        }
    }, {
        key: 'bounds',
        get: function get() {
            return _Frame2.default.makeFrame(0, 0, this.width, this.height);
        }

        /**
         * Returns the top edge coordinate of this view's frame.
         */

    }, {
        key: 'top',
        get: function get() {
            return this.position.y;
        }

        /**
         * Updates the top edge coordinate of this view's frame.
         *
         * `top` is a value in this view's superview coordinate system.
         */

        , set: function set(top) {
            this._frame.origin.y = Math.round(top);
        }
    }, {
        key: 'bottom',
        get: function get() {
            return this.position.y + this.height;
        }

        /**
         * Updates the bottom edge coordinate of this view's frame.
         *
         * `bottom` is a value in this view's superview coordinate system.
         */

        , set: function set(bottom) {
            this._frame.origin.y = bottom - this.height;
        }
    }, {
        key: 'left',
        get: function get() {
            return this.position.x;
        }

        /**
         * Updates the left edge coordinate of this view's frame.
         *
         * `left` is a value in this view's superview coordinate system.
         */

        , set: function set(left) {
            this._frame.origin.x = Math.round(left);
        }
    }, {
        key: 'right',
        get: function get() {
            return this.position.x + this.width;
        }

        /**
         * Updates the right edge coordinate of this view's frame.
         *
         * `right` is a value in this view's superview coordinate system.
         */

        , set: function set(right) {
            this._frame.origin.x = Math.round(right - this.width);
        }
    }, {
        key: 'width',
        get: function get() {
            return this._frame.size.width;
        }

        /**
         * Grows or shrinks this view's frame have the given width.
         */

        , set: function set(width) {
            this._frame.size.set(Math.round(width), this.height);
        }
    }, {
        key: 'halfWidth',
        get: function get() {
            return Math.round(this._frame.size.width / 2);
        }

        /**
         * Returns the width of this view's frame.
         */

    }, {
        key: 'height',
        get: function get() {
            return this._frame.size.height;
        }

        /**
         * Grows or shrinks this view's frame have the given height.
         */

        , set: function set(height) {
            this._frame.size.set(this.width, Math.round(height));
        }
    }, {
        key: 'halfHeight',
        get: function get() {
            return Math.round(this._frame.size.height / 2);
        }
    }, {
        key: 'center',
        get: function get() {
            return new _Point2.default(this.halfWidth, this.halfHeight);
        }

        /**
         * Position the view such that it is centered about the given
         * point in this view's superview coordinate system.
         */

        , set: function set(point) {
            this.left = Math.round(point.x - this.halfWidth);
            this.top = Math.round(point.y - this.halfHeight);
            return this;
        }
    }, {
        key: 'centerX',
        get: function get() {
            return this.left + this.halfWidth;
        },
        set: function set(x) {
            this.left = Math.round(x - this.halfWidth);
            return this;
        }
    }, {
        key: 'centerY',
        get: function get() {
            return this.top + this.halfHeight;
        },
        set: function set(y) {
            this.top = Math.round(y - this.halfHeight);
            return this;
        }

        /**
         * Returns the point in the center of this view in superview coordinates.
         */

    }, {
        key: 'centerInSuperview',
        get: function get() {
            return this.convertLocalToSuperview(this.center);
        }

        /**
         * A view's "content frame" is the frame inset from the view's frame
         * by the view's edge insets.
         */

    }, {
        key: 'contentTop',
        get: function get() {
            return this.insets.top;
        }
    }, {
        key: 'contentBottom',
        get: function get() {
            return this.size.height - this.insets.bottom;
        }
    }, {
        key: 'contentLeft',
        get: function get() {
            return this.insets.left;
        }
    }, {
        key: 'contentRight',
        get: function get() {
            return this.size.width - this.insets.right;
        }
    }, {
        key: 'contentWidth',
        get: function get() {
            var insets = this.insets;
            return Math.max(0, this.size.width - insets.right - insets.left);
        },
        set: function set(w) {
            this.width = this.insets.left + w + this.insets.right;
        }
    }, {
        key: 'contentHeight',
        get: function get() {
            var insets = this.insets;
            return Math.max(0, this.size.height - insets.bottom - insets.top);
        },
        set: function set(h) {
            this.height = this.insets.top + h + this.insets.bottom;
        }
    }, {
        key: 'contentFrame',
        get: function get() {
            return _Frame2.default.makeFrame(this.contentLeft, this.contentTop, this.contentWidth, this.contentHeight);
        }

        /**
         * Returns the point located at the center of this view's content frame.
         */

    }, {
        key: 'contentCenter',
        get: function get() {
            return new _Point2.default(this.contentCenterX, this.contentCenterY);
        }
    }, {
        key: 'contentCenterX',
        get: function get() {
            return this.contentLeft + this.contentWidth / 2;
        }
    }, {
        key: 'contentCenterY',
        get: function get() {
            return this.contentTop + this.contentHeight / 2;
        }
    }, {
        key: 'needsUpdate',
        get: function get() {
            return this._needsUpdate;
        },
        set: function set(needsIt) {
            this._needsUpdate = needsIt;
            (0, _core.viewNeedsUpdate)(this, needsIt);
        }
    }]);

    return View;
}(_events2.default);

/**
 * Events:
 * - firstResponderDidChange(oldFirstResponder, newFirstResponder)
 */

exports.default = View;
View.globalEvents = new _events2.default();

View.shadowsEnabled = true; //!isMobile();

},{"./Animation":57,"./EdgeInsets":66,"./Frame":67,"./Point":85,"./core":102,"./fonts":103,"./magic":105,"./util":107,"events":109,"lodash":53}],102:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.initCanvasUI = initCanvasUI;
exports.getCanvas = getCanvas;
exports.getContext = getContext;
exports.getRootView = getRootView;
exports.setRootView = setRootView;
exports.queueRunLoopIteration = queueRunLoopIteration;
exports.viewNeedsUpdate = viewNeedsUpdate;
exports.viewNeedsLayout = viewNeedsLayout;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

require('./shapes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _canvas, _context, _rootView;

/**
 * Init the canvas UI system with a given class representing
 * the root view of the application.
 */

function initCanvasUI(rootViewClass, canvas) {
    if (canvas) {
        _canvas = canvas;
    } else {
        _canvas = document.createElement('canvas');
        document.body.appendChild(_canvas);
    }

    setTimeout(function () {
        setupCanvas();
        setRootView(new rootViewClass());

        require('./input').addInputListeners();
        queueRunLoopIteration();

        window.addEventListener('resize', handleResize, false);
        window.addEventListener('orientationchange', handleResize, false);
    }, 0);
}

function handleResize() {
    setupCanvas();

    if (_rootView) _rootView.resize(window.innerWidth, window.innerHeight);

    queueRunLoopIteration();
}

function setupCanvas() {
    _canvas.setAttribute('id', 'ui-canvas');

    var ratio = window.devicePixelRatio || 1;
    _canvas.width = window.innerWidth * ratio;
    _canvas.height = window.innerHeight * ratio;

    _canvas.style.position = 'absolute';
    _canvas.style.top = 0;
    _canvas.style.left = 0;
    _canvas.style.width = '100%';
    _canvas.style.height = '100%';
    _canvas.style.overflow = 'hidden';
    _canvas.style.zIndex = 1000;

    _context = _canvas.getContext('2d');
    _context.scale(ratio, ratio);
}

function getCanvas() {
    return _canvas;
}

/**
 * Returns the 2D rendering context for the canvas.
 *
 * Typically the root view will be told to redraw itself,
 * and is given the 2d context for the canvas. However, sometimes
 * views need access to the context outside of a redraw (e.g.
 * text metrics).
 */

function getContext() {
    return _context;
}

/**
 * Returns the root view. Typically views do not need
 * access to this and should prefer `this._rootView`.;
 */

function getRootView() {
    return _rootView;
}

function setRootView(view) {
    if (_rootView) _rootView.willBeRemovedFromView();

    _rootView = view;
    _rootView.resize(window.innerWidth, window.innerHeight).wasAddedToView();
}

// Run loop iterations come via requestAnimationFrame.
//
// Views typically will not need to call this directly.;
// Instead, the more intuitive `.needsUpdate`, `.needsLayout`,
// and `.needsDisplay` should be used.

var _runLoopIterationNeeded = false;

function queueRunLoopIteration() {
    if (!_runLoopIterationNeeded) {
        _runLoopIterationNeeded = true;
        requestAnimationFrame(_iterateRunLoop);
    }
}

// The views that have requested to be manually update()d

var _viewsNeedingUpdate = [];

function viewNeedsUpdate(view, needsIt) {
    var index = _viewsNeedingUpdate.indexOf(view);
    if (needsIt && index === -1) {
        _viewsNeedingUpdate.push(view);
    } else if (!needsIt && index !== -1) {
        _viewsNeedingUpdate.splice(index, 1);
    }
}

// The views that have been marked as needing their layout recomputed.

var _viewsNeedingLayout = [];

function viewNeedsLayout(view, needsIt) {
    var index = _viewsNeedingLayout.indexOf(view);
    if (needsIt && index === -1) {
        _viewsNeedingLayout.push(view);
        queueRunLoopIteration();
    } else if (!needsIt && index !== -1) {
        _viewsNeedingLayout.splice(index, 1);
    }
}

/**
 * Run loop iteration
 *
 * Notes:
 *
 * - Redrawing the canvas is not continuous; only when a view needs display
 *   (e.g. has an active animation).
 *
 * - If any view needs display, the root view and all non-hidden child views
 *   are asked to draw themselves.  We don't redraw only "dirty" views as
 *   compositing w/ cached bitmaps etc is too expensive.
 *
 * - Layout is not performed on every update either; only on views that need it.
 */

function _iterateRunLoop(t) {
    _lodash2.default.each(_viewsNeedingUpdate, function (v) {
        return v && v.update(t);
    });

    while (_viewsNeedingLayout.length > 0) {
        _lodash2.default.each(_viewsNeedingLayout, function (v) {
            return v && v.layoutIfNeeded();
        });
    }

    _rootView.redraw(_context);

    _runLoopIterationNeeded = !_lodash2.default.isEmpty(_viewsNeedingUpdate) || !_lodash2.default.isEmpty(_viewsNeedingLayout);

    if (_runLoopIterationNeeded) {
        requestAnimationFrame(_iterateRunLoop);
    }
}

},{"./input":104,"./shapes":106,"lodash":53}],103:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SystemFontOfSize = SystemFontOfSize;
exports.BoldSystemFontOfSize = BoldSystemFontOfSize;
exports.lineHeight = lineHeight;
exports._makeFont = _makeFont;
exports.smallFont = smallFont;
exports.normalFont = normalFont;
exports.largeFont = largeFont;
exports.hugeFont = hugeFont;

var _magic = require('./magic');

var systemFontName = 'HelveticaNeue, sans-serif',
    boldSystemFontName = 'HelveticaNeue-Bold, sans-serif';

function SystemFontOfSize(pt) {
    return pt + 'pt ' + systemFontName;
}

function BoldSystemFontOfSize(pt) {
    return pt + 'pt ' + boldSystemFontName;
}

function lineHeight(fontSpec) {
    var match = fontSpec.match(/(\d+)px /);
    if (match) return parseInt(match[1], 10) * 2;

    match = fontSpec.match(/(\d+)pt /);
    if (match) return Math.round(parseInt(match[1], 10) * 1.7);

    return _magic.FingerSizePoints;
}

var _isMobile = (0, _magic.isMobile)();

function _makeFont(size) {
    //return localStorage.BOLD_FONTS === 'true' ? BoldSystemFontOfSize(size) : SystemFontOfSize(size);
    return SystemFontOfSize(size);
}

function smallFont() {
    return _isMobile ? _makeFont(9) : _makeFont(12);
}
function normalFont() {
    return _isMobile ? _makeFont(11) : _makeFont(17);
}
function largeFont() {
    return _isMobile ? _makeFont(13) : _makeFont(19);
}
function hugeFont() {
    return _isMobile ? _makeFont(17) : _makeFont(21);
}

},{"./magic":105}],104:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.latestPointerTiming = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.resetPointerHandling = resetPointerHandling;
exports.addInputListeners = addInputListeners;

var _Point = require('./Point');

var _Point2 = _interopRequireDefault(_Point);

var _ScrollView = require('./ScrollView');

var _ScrollView2 = _interopRequireDefault(_ScrollView);

var _View = require('./View');

var _View2 = _interopRequireDefault(_View);

var _core = require('./core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Pointer (mouse, touch)

var trackedView, isDragging, scrollContentView, dropTargetView;

/**
 * Transforms a point in document or page coordinates to canvas coordinates.
 */

function pageToCanvas(x, y) {
    var canvas = (0, _core.getCanvas)();
    return new _Point2.default(x - canvas.offsetLeft, y - canvas.offsetTop);
}

/**
 * Finds a scroll view that is an ancestor of the given view.
 */

function findScrollViewAncestor(view) {
    var curr = view;

    while (curr) {
        if (curr instanceof _ScrollView2.default && curr.userInteractionEnabled) {
            return curr.contentView;
        }

        curr = curr.superview;
    }
}

// Where the pointer (touch, mouse) is on press/down.

var rootPointerDownPoint;

// How touch works in a view with a ScrollView for one of its superviews:
//
// A pointer down event atop a view that's visible and "hit" by the localized
// pointer location becomes the "tracked view".
//
// If the user then drags the pointer (finger, mouse) far enough
// (`startScrollingDistance`) and one of the superviews of the tracked view is
// a `ScrollView`, the touch is canceled, scrolling begins, and the
// `ScrollView`'s `contentView` becomes the tracked view.
//
// If scrolling does not begin within `touchStartDelayForScrolling` milliseconds,
// the tracked view is sent `touchStart`.  However, if the user does move at
// least `startScrollingDistance` even after `touchStartDelayForScrolling`
// milliseconds, the touch is canceled and scrolling does begin.

var startScrollingDistance = 30,
    // points
touchStartDelayForScrolling = 100; // milliseconds

var scrollStartTimeout;

/**
 * Time at which the most recent pointer-down/up/move event occurred.
 * There is some small delay (say 5ms) for processing these events
 * and sometimes we need the reported time sans this processing lag.
 */

var latestPointerTiming = exports.latestPointerTiming = { down: 0, up: 0, move: 0 };

/**
 * The user has touched or pressed a mouse button at the given page coordinates.
 *
 * We aggregate touch and mouse as "pointer".
 */

function pointerDown(x, y) {
    latestPointerTiming.down = window.performance.now();

    var rootView = (0, _core.getRootView)(),
        rootPoint = rootView.convertSuperviewToLocal(pageToCanvas(x, y)),
        _rootView$hitTest = rootView.hitTest(rootPoint),
        _rootView$hitTest2 = _slicedToArray(_rootView$hitTest, 2),
        hitView = _rootView$hitTest2[0],
        hitViewPoint = _rootView$hitTest2[1];


    rootPointerDownPoint = rootPoint;

    if (hitView) {
        trackedView = hitView;

        scrollContentView = findScrollViewAncestor(trackedView);
        if (scrollContentView) {
            scrollContentView.superview.resetVelocity(); // stop inertia scrolling on touch

            clearTimeout(scrollStartTimeout);
            scrollStartTimeout = setTimeout(function () {
                if (trackedView) {
                    var newTrackedView = trackedView.touchStart(hitViewPoint);
                    if (newTrackedView && newTrackedView !== trackedView) {
                        trackedView = newTrackedView;
                    }
                }
            }, touchStartDelayForScrolling);
        } else {
            var newTrackedView = trackedView.touchStart(hitViewPoint);
            if (newTrackedView && newTrackedView !== trackedView) {
                trackedView = newTrackedView;
            }
        }
    } else {
        trackedView = null;
    }

    dropTargetView = null;
}

/**
 * The user has moved a finger or moved the mouse to the given page coordinates.
 */

function pointerMove(x, y) {
    latestPointerTiming.move = window.performance.now();

    if (!trackedView) {
        return;
    }

    var rootView = (0, _core.getRootView)(),
        rootPoint = rootView.convertSuperviewToLocal(pageToCanvas(x, y));

    var distanceMovedFromDownPoint = 0;

    if (rootPointerDownPoint) {
        distanceMovedFromDownPoint = Math.sqrt((rootPoint.x - rootPointerDownPoint.x) * (rootPoint.x - rootPointerDownPoint.x) + (rootPoint.y - rootPointerDownPoint.y) * (rootPoint.y - rootPointerDownPoint.y));
    }

    if (!isDragging && scrollContentView && trackedView !== scrollContentView && distanceMovedFromDownPoint > startScrollingDistance) {

        trackedView.touchCancel();
        trackedView = scrollContentView;
        trackedView.draggingStarted(scrollContentView.superview.convertRootToLocal(rootPoint));
        isDragging = true;
        clearTimeout(scrollStartTimeout);
    } else if (!isDragging) {
        if (trackedView.draggable) {
            trackedView.draggingStarted(trackedView.superview.convertRootToLocal(rootPoint));
            isDragging = true;
            clearTimeout(scrollStartTimeout);
        } else {
            trackedView.touchMove(trackedView.convertRootToLocal(rootPoint));
        }
    } else if (isDragging) {
        trackedView.draggingUpdate(trackedView.superview.convertRootToLocal(rootPoint));

        // It's possible that the tracked view canceled dragging.

        if (!trackedView) {
            return;
        }

        // Figure out the view the tracked view is over;
        // disable user interaction on the tracked view so we don't hit it.

        trackedView.userInteractionEnabled = false;

        var _rootView$hitTest3 = rootView.hitTest(rootPoint),
            _rootView$hitTest4 = _slicedToArray(_rootView$hitTest3, 2),
            hitView = _rootView$hitTest4[0],
            hitViewPoint = _rootView$hitTest4[1];

        trackedView.userInteractionEnabled = true;

        // If there's a view under the tracked view being dragged around that accepts
        // the tracked view, notify it

        if (hitView) {
            if (dropTargetView !== hitView) {
                // Different drop target; previous drop target will not receive.

                if (dropTargetView) {
                    dropTargetView.willNotReceiveDroppedView(trackedView);
                }

                if (hitView.acceptsDroppedViews && hitView.acceptsDroppedView(trackedView)) {

                    dropTargetView = hitView;
                    dropTargetView.mightReceiveDroppedView(trackedView, hitViewPoint);
                } else {
                    dropTargetView = null;
                }
            }
        }
    }
}

/**
 * The user has lifted a depressed finger or released a depressed mouse button at
 * the given page coordinates.
 */

function pointerUp(x, y) {
    latestPointerTiming.up = window.performance.now();

    rootPointerDownPoint = undefined;

    if (!trackedView) {
        return;
    }

    var rootView = (0, _core.getRootView)(),
        rootPoint = rootView.convertSuperviewToLocal(pageToCanvas(x, y));

    // If dragging we cannot drop the tracked view on itself so
    // disable its user interaction which fails the hit test and passes
    // to whatever view would be hit under it.

    if (isDragging) {
        trackedView.userInteractionEnabled = false;
    }

    var _rootView$hitTest5 = rootView.hitTest(rootPoint),
        _rootView$hitTest6 = _slicedToArray(_rootView$hitTest5, 2),
        upView = _rootView$hitTest6[0],
        upViewPoint = _rootView$hitTest6[1];

    if (isDragging) {
        trackedView.userInteractionEnabled = true;
    }

    if (upView) {
        if (isDragging) {
            if (upView !== trackedView && upView.acceptsDroppedViews) {
                if (upView.acceptsDroppedView(trackedView, upViewPoint)) {
                    upView.droppedViewWasReceived(trackedView, upViewPoint);
                    trackedView.wasAcceptedAsDroppedView(upView, upViewPoint);
                } else {
                    trackedView.wasRejectedAsDroppedView(upView, upViewPoint);
                }
            }

            if (trackedView.draggable) {
                trackedView.draggingEnded(trackedView.superview.convertRootToLocal(rootPoint));
            }
        } else if (upView && upView === trackedView) {
            upView.tapped(upViewPoint);
        }

        if (trackedView) {
            //if (scrollStartTimeout) {
            //    clearTimeout(scrollStartTimeout)
            //    trackedView.touchStart(trackedView.convertRootToLocal(rootPoint))
            //}
            trackedView.touchEnd(trackedView.convertRootToLocal(rootPoint));
        }
    }

    resetPointerHandling();
}

function resetPointerHandling() {
    isDragging = false;
    trackedView = null;
    dropTargetView = null;
}

// Keyboard handling

// Key codes
// Not all of them but the most common.

var keyCodeToName = {
    0x06: 'Help',
    0x2F: 'Help',
    0x08: 'Backspace',
    0x09: 'Tab',
    0x1B: 'Escape',
    0x10: 'Shift',
    0x11: 'Control',
    0x12: 'Alt',
    0x13: 'Pause',
    0x14: 'CapsLock',
    0x0D: 'Enter',
    0x21: 'PageUp',
    0x22: 'PageDown',
    0x23: 'End',
    0x24: 'Home',
    0x25: 'ArrowLeft',
    0x26: 'ArrowUp',
    0x27: 'ArrowRight',
    0x28: 'ArrowDown',
    0x2E: 'Delete',
    0x70: 'F1',
    0x71: 'F2',
    0x72: 'F3',
    0x73: 'F4',
    0x74: 'F5',
    0x75: 'F6',
    0x76: 'F7',
    0x77: 'F8',
    0x78: 'F9',
    0x79: 'F10',
    0x7A: 'F11',
    0x7B: 'F12'
};

var ctrlKey = false,
    shiftKey = false,
    metaKey = false,
    altKey = false;

function keyPressed(key) {
    if (_View2.default.firstResponder) {
        _View2.default.firstResponder.keyPressed(key, ctrlKey, shiftKey, metaKey, altKey);
    }
}

function handleBrowserKeyboard() {
    // keypress produces character values; keydown/up produces key codes.

    document.body.addEventListener('keypress', function (e) {
        if (!ctrlKey && !metaKey && !altKey && e.keyCode !== 13) {
            // Enter (I suppose here for newline entry)
            keyPressed(String.fromCharCode(e.keyCode));
        }

        if (e.preventDefault) {
            e.preventDefault();
        }

        if (e.stopImmediatePropagation) {
            e.stopImmediatePropagation();
        }
    }, false);

    document.body.addEventListener('keydown', function (e) {
        var keyCode = 'keyCode' in event ? event.keyCode : 'which' in event ? event.which : 0;

        if (keyCode !== 0) {
            var keyName = keyCodeToName[keyCode];

            // ctrl/shift only avail in keydown/up not in keypress.

            ctrlKey = e.ctrlKey;
            shiftKey = e.shiftKey;
            metaKey = e.metaKey;
            altKey = e.altKey;

            if (keyName !== undefined) {
                keyPressed(keyName);
            } else if (ctrlKey || metaKey || altKey) {
                keyPressed(String.fromCharCode(keyCode));
            }

            if (keyName === 'Backspace' || // browser back
            keyName === 'Tab' || // browser focus next
            metaKey && (keyName === 'ArrowLeft' || keyName === 'ArrowRight')) {
                // browser back/fwd

                e.preventDefault();
                e.stopImmediatePropagation();
            }
        }
    }, false);
}

/**
 * Add listeners for input (touch, mouse) events.
 */

function addInputListeners() {
    var canvas = (0, _core.getCanvas)();

    canvas.addEventListener('mousedown', function (e) {
        pointerDown(e.pageX, e.pageY);
    }, false);

    canvas.addEventListener('mouseup', function (e) {
        pointerUp(e.pageX, e.pageY);
    }, false);

    canvas.addEventListener('mousemove', function (e) {
        pointerMove(e.pageX, e.pageY);
    }, false);

    // We do not support multi-touch

    canvas.addEventListener('touchstart', function (e) {
        if (e.touches.length === 1) {
            var touch = e.touches[0];
            pointerDown(touch.pageX, touch.pageY);
        }

        if (e.stopPropagation) {
            e.stopPropagation();
        }

        // Stops touch from being also reported as mouse events
        // in desktop browsers.

        if (e.preventDefault) {
            e.preventDefault();
        }
    }, false);

    canvas.addEventListener('touchend', function (e) {
        if (e.changedTouches.length === 1) {
            var touch = e.changedTouches[0];
            pointerUp(touch.pageX, touch.pageY);
        }

        if (e.stopPropagation) {
            e.stopPropagation();
        }

        if (e.preventDefault) {
            e.preventDefault();
        }
    }, false);

    canvas.addEventListener('touchmove', function (e) {
        if (e.changedTouches.length === 1) {
            var touch = e.changedTouches[0];
            pointerMove(touch.pageX, touch.pageY);
        }

        if (e.stopPropagation) {
            e.stopPropagation();
        }

        if (e.preventDefault) {
            e.preventDefault();
        }
    }, false);

    canvas.addEventListener('touchcancel', function () {
        resetPointerHandling();
    });

    if (document.body) {
        handleBrowserKeyboard();
    }
}

},{"./Point":85,"./ScrollView":87,"./View":101,"./core":102}],105:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SectionMargin = exports.StandardMargin = exports.FingerSizePoints = exports.EdgeInsetsZero = exports.RectZero = exports.SizeZero = exports.PointZero = undefined;
exports.isMobile = isMobile;

var _Point = require('./Point');

var _Point2 = _interopRequireDefault(_Point);

var _Size = require('./Size');

var _Size2 = _interopRequireDefault(_Size);

var _Frame = require('./Frame');

var _Frame2 = _interopRequireDefault(_Frame);

var _EdgeInsets = require('./EdgeInsets');

var _EdgeInsets2 = _interopRequireDefault(_EdgeInsets);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The size of a finger in points as per Apple a while back.
 * Obviously an approximation; the idea is to avoid tiny hit targets.
 */

var PointZero = exports.PointZero = new _Point2.default();
var SizeZero = exports.SizeZero = new _Size2.default();
var RectZero = exports.RectZero = _Frame2.default.makeFrame(0, 0, 0, 0);
var EdgeInsetsZero = exports.EdgeInsetsZero = new _EdgeInsets2.default();

function isMobile() {
  return !!navigator.userAgent.match(/iPad|iPhone|Android/i);
}

// Looks OK either way really.
var FingerSizePoints = exports.FingerSizePoints = isMobile() ? 50 : 60;

var StandardMargin = exports.StandardMargin = isMobile() ? 12 : 20;
var SectionMargin = exports.SectionMargin = isMobile() ? 30 : 20;

},{"./EdgeInsets":66,"./Frame":67,"./Point":85,"./Size":90}],106:[function(require,module,exports){
'use strict';

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

// These shape path routines were originally authored by "MJS 2015".
// See http://xqt2.com/p/MoreCanvasContext.html for more information.

var TwoPi = 2 * Math.PI;

/**
 * Adds a rounded rectangle path to the context.
 *
 * Radius is a number or an array of four numbers
 * [top_left, top_right, lower_right, lower_left] for individual control.
 *
 * The radius is limited by the size of the rectangle, so that if the dimensions
 * are to small, the radius is shrunk.
 */

CanvasRenderingContext2D.prototype.roundRect = function (x, y, w, h, r) {
    var minWH = Math.min(w / 2, h / 2);

    if (!_lodash2.default.isArray(r)) {
        r = Math.min(Math.abs(r), Math.abs(minWH));
        r = [r, r, r, r];
    } else {
        for (var i = 0; i < 4; ++i) {
            r[i] = Math.min(Math.abs(r[i]), Math.abs(minWH)) || 0;
        }
    }

    this.beginPath();

    this.moveTo(Math.round(x + r[0]), Math.round(y));
    this.lineTo(Math.round(x + w - r[1]), Math.round(y));
    this.arc(Math.round(x + w - r[1]), Math.round(y + r[1]), Math.round(r[1]), 0.75 * TwoPi, 0, false);

    this.lineTo(Math.round(x + w), Math.round(y + h - r[2]));
    this.arc(Math.round(x + w - r[2]), Math.round(y + h - r[2]), Math.round(r[2]), 0, 0.25 * TwoPi, false);

    this.lineTo(Math.round(x + r), Math.round(y + h));
    this.arc(Math.round(x + r[3]), Math.round(y + h - r[3]), Math.round(r[3]), 0.25 * TwoPi, 0.5 * TwoPi, false);

    this.lineTo(Math.round(x), Math.round(y + r[0]));
    this.arc(Math.round(x + r[0]), Math.round(y + r[0]), Math.round(r[0]), 0.5 * TwoPi, 0.75 * TwoPi, false);

    this.closePath();
};

/**
 * A regular n-sided shape. It starts and closes a complete path.
 */

CanvasRenderingContext2D.prototype.polygon = function (x, y, r) {
    var n = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 3;
    var angle = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

    if (n < 3) {
        throw new Error('invalid number of sides');
    }

    var endAngle = angle + TwoPi,
        angleIncr = TwoPi / n;

    var px = x - r * Math.sin(angle),
        py = y - r * Math.cos(angle);

    this.beginPath();

    this.moveTo(px, py);

    while (angle < endAngle) {
        px = x - r * Math.sin(angle);
        py = y - r * Math.cos(angle);

        this.lineTo(px, py);

        angle += angleIncr;
    }

    this.closePath();
};

/**
 * Adds a path that draws a star.
 * Ratios bigger than 1 will grow the star.
 * A ratio of exactly 1 will mimic a polygon of 2*n sides.
 */

CanvasRenderingContext2D.prototype.star = function (x, y, r) {
    var ratio = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.6;
    var n = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 5;
    var angle = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

    var endAngle = angle + TwoPi,
        angleIncr = Math.PI / n;

    var px = x - r * Math.sin(angle),
        py = y - r * Math.cos(angle);

    this.beginPath();

    this.moveTo(px, py);
    angle += angleIncr;

    px = x - ratio * r * Math.sin(angle);
    py = y - ratio * r * Math.cos(angle);
    this.lineTo(px, py);
    angle += angleIncr;

    while (angle < endAngle) {
        px = x - r * Math.sin(angle);
        py = y - r * Math.cos(angle);
        this.lineTo(px, py);
        angle += angleIncr;

        px = x - ratio * r * Math.sin(angle);
        py = y - ratio * r * Math.cos(angle);
        this.lineTo(px, py);
        angle += angleIncr;
    }

    this.closePath();
};

/**
 * Adds a shap which is a set of straight lines between the given points
 * [[x,y]]
 * shape is a list of point ala [[x,y]]
 * This will draw straight lines between them.
 */

CanvasRenderingContext2D.prototype.shape = function (x, y, points) {
    var scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    var angle = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

    var sinAngle = Math.sin(angle),
        cosAngle = Math.cos(angle);

    var px = x + scale * (cosAngle * points[0][0] - sinAngle * points[0][1]),
        py = y + scale * (sinAngle * points[0][0] + cosAngle * points[0][1]);

    this.beginPath();

    this.moveTo(px, py);

    for (var i = 1, N = points.length; i < N; ++i) {
        var point = points[i];

        px = x + scale * (cosAngle * point[0] - sinAngle * point[1]);
        py = y + scale * (sinAngle * point[0] + cosAngle * point[1]);

        this.lineTo(px, py);
    }

    this.closePath();
};

},{"lodash":53}],107:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.radiansToDegrees = radiansToDegrees;
exports.degreesToRadians = degreesToRadians;
exports.setPropertyRecursive = setPropertyRecursive;
exports.distanceSquared = distanceSquared;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function radiansToDegrees(radians) {
    return radians * 180.0 / Math.PI;
}

function degreesToRadians(degrees) {
    return degrees * Math.PI / 180.0;
}

function setPropertyRecursive(view, prop, val) {
    view[prop] = val;

    _lodash2.default.each(view.subviews, function (subview) {
        return setPropertyRecursive(subview, prop, val);
    });
}

function distanceSquared(a, b) {
    return (b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y);
}

},{"lodash":53}],108:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = wordWrap;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _core = require('./core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var glyphWidths = {},
    whitespace = ' \n\t\r',
    newlines = '\n\r';

/**
 * Returns array of lines of the form `[{start:int, end:int, top:int}]`
 * where `start` and `end` are indices into `text`. Use `text.substring` to
 * pull out the text for each line. The advantage here is that only a subset
 * of the text will be visible and using substring is more advantageous than
 * storing each line explicitly a second time (once in each line object, another
 * in `text`).
 *
 * Assumptions:
 *
 * - `context.font` is expected to be set before calling this.
 *
 * - codepoints in `codepointRange` will use actual glyph widths for the codepoints that
 *   fall in this range; otherwise, this will fallback
 *   to a glyph width equal to that of the letter 'x' (i.e. treated as monospace)
 *   which is more conservative and will provide lower-quality word-wrapping.
 */

function wordWrap(text, y, maxWidth, lineHeight) {
    var codepointRange = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [0, 1024];

    var context = (0, _core.getContext)(),
        defaultGlyphWidth = context.measureText('x').width,
        x = 0,
        letters = text.split(''),
        n = letters.length,
        lines = [],
        start = 0,
        space = 0,
        font = context.font;

    // Cache glyph widths for the given code point range and font.

    if (!_lodash2.default.has(glyphWidths, font)) {
        glyphWidths[font] = {};

        _lodash2.default.each(_lodash2.default.range(codepointRange[0], codepointRange[1]), function (i) {
            var str = String.fromCharCode(i);
            glyphWidths[font][str] = context.measureText(str).width;
        });
    }

    for (var i = 0; i < n; ++i) {
        var letter = letters[i],
            glyphWidth = glyphWidths[font][letter] || defaultGlyphWidth;

        if (whitespace.indexOf(letter) !== -1) {
            space = i;
        }

        if (newlines.indexOf(letter) !== -1 || x + glyphWidth >= maxWidth) {
            lines.push({ start: start, end: space, top: y });
            x = 0;
            y += lineHeight;
            start = space + 1;
            i = space;
        } else {
            x += glyphWidth;
        }
    }

    if (start < n) {
        lines.push({ start: start, end: n, top: y });
    }

    return lines;
}

},{"./core":102,"lodash":53}],109:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],110:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[51])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
